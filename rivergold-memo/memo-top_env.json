{"cpu_type_headers": [], "cuda_type_headers": [], "function_registrations": [".op(torch::RegisterOperators::options()\n  .schema(\"aten::_cast_Byte(Tensor self, bool non_blocking=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::_cast_Byte)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_cast_Char(Tensor self, bool non_blocking=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::_cast_Char)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_cast_Double(Tensor self, bool non_blocking=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::_cast_Double)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_cast_Float(Tensor self, bool non_blocking=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::_cast_Float)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_cast_Int(Tensor self, bool non_blocking=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::_cast_Int)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_cast_Long(Tensor self, bool non_blocking=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::_cast_Long)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_cast_Short(Tensor self, bool non_blocking=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::_cast_Short)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_cast_Half(Tensor self, bool non_blocking=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::_cast_Half)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::backward(Tensor self, Tensor? gradient=None, bool keep_graph=False, bool create_graph=False) -> void\")\n  .impl_unboxedOnlyATenCatchAllKernel<void (const Tensor &, const Tensor &, bool, bool), &TypeDefault::backward>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::set_data(Tensor(a!) self, Tensor new_data) -> void\")\n  .impl_unboxedOnlyATenCatchAllKernel<void (const Tensor &, const Tensor &), &TypeDefault::set_data>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::data(Tensor self) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &), &TypeDefault::data>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::is_leaf(Tensor self) -> bool\")\n  .impl_unboxedOnlyATenCatchAllKernel<bool (const Tensor &), &TypeDefault::is_leaf>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::output_nr(Tensor self) -> int\")\n  .impl_unboxedOnlyATenCatchAllKernel<int64_t (const Tensor &), &TypeDefault::output_nr>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_version(Tensor self) -> int\")\n  .impl_unboxedOnlyATenCatchAllKernel<int64_t (const Tensor &), &TypeDefault::_version>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::rename_(Tensor(a!) self, Dimname[]? names) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, c10::optional<DimnameList>), &TypeDefault::rename_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::rename(Tensor(a) self, Dimname[]? names) -> Tensor(a)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, c10::optional<DimnameList>), &TypeDefault::rename>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::align_to(Tensor(a) self, DimnameList names) -> Tensor(a)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, DimnameList), &TypeDefault::align_to>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::align_as(Tensor self, Tensor other) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, const Tensor &), &TypeDefault::align_as>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::align_tensors(Tensor[] tensors) -> Tensor[]\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::vector<Tensor> (TensorList), &TypeDefault::align_tensors>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::refine_names(Tensor(a) self, DimnameList names) -> Tensor(a)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, DimnameList), &TypeDefault::refine_names>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::unflatten(Tensor self, Dimname dim, int[] sizes, DimnameList names) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, IntArrayRef, DimnameList), &TypeDefault::unflatten>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::unflatten(Tensor self, int dim, int[] sizes, DimnameList names) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, int64_t, IntArrayRef, DimnameList), &TypeDefault::unflatten>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_debug_has_internal_overlap(Tensor self) -> int\")\n  .catchAllKernel<int64_t (const Tensor &)>(&TypeDefault::_debug_has_internal_overlap)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_sobol_engine_draw(Tensor quasi, int n, Tensor sobolstate, int dimension, int num_generated, ScalarType? dtype) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, const Tensor &, int64_t, int64_t, c10::optional<ScalarType>), &TypeDefault::_sobol_engine_draw>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_sobol_engine_ff_(Tensor(a!) self, int n, Tensor sobolstate, int dimension, int num_generated) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, int64_t, const Tensor &, int64_t, int64_t), &TypeDefault::_sobol_engine_ff_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_sobol_engine_scramble_(Tensor(a!) self, Tensor ltm, int dimension) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, const Tensor &, int64_t), &TypeDefault::_sobol_engine_scramble_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_sobol_engine_initialize_state_(Tensor(a!) self, int dimension) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, int64_t), &TypeDefault::_sobol_engine_initialize_state_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_reshape_from_tensor(Tensor self, Tensor shape) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::_reshape_from_tensor)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_shape_as_tensor(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::_shape_as_tensor)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::dropout(Tensor input, float p, bool train) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, double, bool)>(&TypeDefault::dropout)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, double, bool), &TypeDefault::dropout_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::feature_dropout(Tensor input, float p, bool train) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, double, bool)>(&TypeDefault::feature_dropout)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::feature_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, double, bool), &TypeDefault::feature_dropout_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::alpha_dropout(Tensor input, float p, bool train) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, double, bool)>(&TypeDefault::alpha_dropout)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, double, bool), &TypeDefault::alpha_dropout_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::feature_alpha_dropout(Tensor input, float p, bool train) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, double, bool)>(&TypeDefault::feature_alpha_dropout)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::feature_alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, double, bool), &TypeDefault::feature_alpha_dropout_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::abs(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::abs)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::acos(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::acos)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::avg_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, bool ceil_mode=False, bool count_include_pad=True) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool), &TypeDefault::avg_pool1d>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::adaptive_avg_pool1d(Tensor self, int[1] output_size) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef), &TypeDefault::adaptive_avg_pool1d>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::adaptive_max_pool1d(Tensor self, int[1] output_size) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef), &TypeDefault::adaptive_max_pool1d>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, Scalar, Scalar)>(&TypeDefault::add)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::add_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, Scalar, Scalar), &TypeDefault::add_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(&TypeDefault::addr)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar), &TypeDefault::addr_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar), &TypeDefault::addr_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::affine_grid_generator(Tensor theta, int[] size, bool align_corners) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool), &TypeDefault::affine_grid_generator>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::affine_grid_generator_backward(Tensor grad, int[] size, bool align_corners) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool), &TypeDefault::affine_grid_generator_backward>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::all.dim(Tensor self, int dim, bool keepdim=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, bool)>(&TypeDefault::all)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::all.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, int64_t, bool), &TypeDefault::all_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::all.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, bool), &TypeDefault::all>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::all.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, Dimname, bool), &TypeDefault::all_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::allclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> bool\")\n  .catchAllKernel<bool (const Tensor &, const Tensor &, double, double, bool)>(&TypeDefault::allclose)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::any.dim(Tensor self, int dim, bool keepdim=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, bool)>(&TypeDefault::any)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::any.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, int64_t, bool), &TypeDefault::any_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::any.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, bool), &TypeDefault::any>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::any.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, Dimname, bool), &TypeDefault::any_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::arange(Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (Scalar, const TensorOptions &), &TypeDefault::arange>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::arange.start(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (Scalar, Scalar, const TensorOptions &), &TypeDefault::arange>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::arange.start_step(Scalar start, Scalar end, Scalar step, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (Scalar, Scalar, Scalar, const TensorOptions &), &TypeDefault::arange>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::arange.out(Scalar end, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::arange_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_dim_arange(Tensor like, int dim) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t)>(&TypeDefault::_dim_arange)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::argmax(Tensor self, int? dim=None, bool keepdim=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, c10::optional<int64_t>, bool)>(&TypeDefault::argmax)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::argmin(Tensor self, int? dim=None, bool keepdim=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, c10::optional<int64_t>, bool)>(&TypeDefault::argmin)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::as_strided_(Tensor(a!) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>), &TypeDefault::as_strided_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::asin(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::asin)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::atan(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::atan)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_baddbmm_mkl_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar), &TypeDefault::_baddbmm_mkl_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::bartlett_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (int64_t, const TensorOptions &), &TypeDefault::bartlett_window>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::bartlett_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (int64_t, bool, const TensorOptions &), &TypeDefault::bartlett_window>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double, bool), &TypeDefault::batch_norm>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_batch_norm_impl_index(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor, Tensor, Tensor, int)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor,Tensor,Tensor,int64_t> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double, bool), &TypeDefault::_batch_norm_impl_index>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_batch_norm_impl_index_backward(int impl_index, Tensor input, Tensor grad_output, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var_transform, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (int64_t, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, std::array<bool,3>), &TypeDefault::_batch_norm_impl_index_backward>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::bernoulli(Tensor self, *, Generator? generator=None) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, Generator *), &TypeDefault::bernoulli>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::bernoulli.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, Generator *), &TypeDefault::bernoulli_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::bernoulli.p(Tensor self, float p, *, Generator? generator=None) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, double, Generator *), &TypeDefault::bernoulli>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::bilinear(Tensor input1, Tensor input2, Tensor weight, Tensor? bias) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &), &TypeDefault::bilinear>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::binary_cross_entropy_with_logits(Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t), &TypeDefault::binary_cross_entropy_with_logits>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::binary_cross_entropy_with_logits_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t), &TypeDefault::binary_cross_entropy_with_logits_backward>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::bitwise_not(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::bitwise_not)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::bitwise_not_(Tensor(a!) self) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &), &TypeDefault::bitwise_not_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::logical_not(Tensor self) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &), &TypeDefault::logical_not>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::logical_not_(Tensor(a!) self) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &), &TypeDefault::logical_not_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::logical_xor(Tensor self, Tensor other) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, const Tensor &), &TypeDefault::logical_xor>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::logical_xor_(Tensor(a!) self, Tensor other) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::logical_xor_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::blackman_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (int64_t, const TensorOptions &), &TypeDefault::blackman_window>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::blackman_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (int64_t, bool, const TensorOptions &), &TypeDefault::blackman_window>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::broadcast_tensors(Tensor[] tensors) -> Tensor[]\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::vector<Tensor> (TensorList), &TypeDefault::broadcast_tensors>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cat(Tensor[] tensors, int dim=0) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (TensorList, int64_t), &TypeDefault::cat>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, TensorList, int64_t), &TypeDefault::cat_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::cat.names(Tensor[] tensors, Dimname dim) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (TensorList, Dimname), &TypeDefault::cat>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::cat.names_out(Tensor[] tensors, Dimname dim, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, TensorList, Dimname), &TypeDefault::cat_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::ceil(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::ceil)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::ceil_(Tensor(a!) self) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &), &TypeDefault::ceil_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::chain_matmul(Tensor[] matrices) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (TensorList), &TypeDefault::chain_matmul>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::chunk(Tensor(a) self, int chunks, int dim=0) -> Tensor(a)[]\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::vector<Tensor> (const Tensor &, int64_t, int64_t), &TypeDefault::chunk>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::clamp(Tensor self, Scalar? min=None, Scalar? max=None) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>)>(&TypeDefault::clamp)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::clamp_max(Tensor self, Scalar max) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, Scalar)>(&TypeDefault::clamp_max)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::clamp_min(Tensor self, Scalar min) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, Scalar)>(&TypeDefault::clamp_min)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cudnn_is_acceptable(Tensor self) -> bool\")\n  .catchAllKernel<bool (const Tensor &)>(&TypeDefault::cudnn_is_acceptable)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::constant_pad_nd(Tensor self, int[] pad, Scalar value=0) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef, Scalar), &TypeDefault::constant_pad_nd>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::contiguous(Tensor self, *, MemoryFormat memory_format=contiguous_format) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, MemoryFormat), &TypeDefault::contiguous>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t), &TypeDefault::convolution>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::convolution_overrideable(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t), &TypeDefault::convolution_overrideable>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::convolution_backward_overrideable(Tensor grad_output, Tensor input, Tensor weight, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, std::array<bool,3>), &TypeDefault::convolution_backward_overrideable>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool), &TypeDefault::_convolution>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_convolution_nogroup(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef), &TypeDefault::_convolution_nogroup>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_convolution_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor weight, Tensor self, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool, std::array<bool,3>), &TypeDefault::_convolution_double_backward>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::conv1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] dilation=1, int groups=1) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t), &TypeDefault::conv1d>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::conv2d(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, int groups=1) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t), &TypeDefault::conv2d>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::conv3d(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1, int groups=1) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t), &TypeDefault::conv3d>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::conv_tbc(Tensor self, Tensor weight, Tensor bias, int pad=0) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>(&TypeDefault::conv_tbc)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::conv_tbc_backward(Tensor self, Tensor input, Tensor weight, Tensor bias, int pad) -> (Tensor, Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t), &TypeDefault::conv_tbc_backward>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::conv_transpose1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] output_padding=0, int groups=1, int[1] dilation=1) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef), &TypeDefault::conv_transpose1d>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::conv_transpose2d.input(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int groups=1, int[2] dilation=1) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef), &TypeDefault::conv_transpose2d>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::conv_transpose3d.input(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int groups=1, int[3] dilation=1) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef), &TypeDefault::conv_transpose3d>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::copy_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, const Tensor &, bool), &TypeDefault::copy_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cos(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::cos)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cosh(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::cosh)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cosine_embedding_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, double, int64_t)>(&TypeDefault::cosine_embedding_loss)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cumsum(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>), &TypeDefault::cumsum>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cumsum.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>), &TypeDefault::cumsum_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::cumsum.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>), &TypeDefault::cumsum>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::cumsum.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, Dimname, c10::optional<ScalarType>), &TypeDefault::cumsum_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cumprod(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>), &TypeDefault::cumprod>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cumprod.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>), &TypeDefault::cumprod_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::cumprod.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>), &TypeDefault::cumprod>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::cumprod.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, Dimname, c10::optional<ScalarType>), &TypeDefault::cumprod_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::ctc_loss.IntList(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t, int64_t, bool), &TypeDefault::ctc_loss>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::ctc_loss.Tensor(Tensor log_probs, Tensor targets, Tensor input_lengths, Tensor target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, bool)>(&TypeDefault::ctc_loss)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::det(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::det)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::diag_embed(Tensor self, int offset=0, int dim1=-2, int dim2=-1) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, int64_t, int64_t)>(&TypeDefault::diag_embed)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::diagflat(Tensor self, int offset=0) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t)>(&TypeDefault::diagflat)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::diagonal(Tensor(a) self, int offset=0, int dim1=0, int dim2=1) -> Tensor(a)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, int64_t, int64_t, int64_t), &TypeDefault::diagonal>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::fill_diagonal_(Tensor(a!) self, Scalar fill_value, bool wrap=False) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, Scalar, bool), &TypeDefault::fill_diagonal_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::div.Scalar(Tensor self, Scalar other) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, Scalar)>(&TypeDefault::div)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::div_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::div_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::dot.out(Tensor self, Tensor tensor, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &), &TypeDefault::dot_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::einsum(str equation, Tensor[] tensors) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (std::string, TensorList), &TypeDefault::einsum>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::embedding(Tensor weight, Tensor indices, int padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t, bool, bool)>(&TypeDefault::embedding)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::embedding_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq, bool sparse) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t, int64_t, bool, bool)>(&TypeDefault::embedding_backward)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::embedding_sparse_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t, int64_t, bool)>(&TypeDefault::embedding_sparse_backward)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None) -> (Tensor, Tensor, Tensor, Tensor)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const Tensor &), &TypeDefault::embedding_bag>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, bool, const Tensor &), &TypeDefault::_embedding_bag_backward>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_embedding_bag_sparse_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, const Tensor &), &TypeDefault::_embedding_bag_sparse_backward>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::empty.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &, c10::optional<MemoryFormat>), &TypeDefault::empty>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::new_empty(Tensor self, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, IntArrayRef, const TensorOptions &), &TypeDefault::new_empty>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::new_full(Tensor self, int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, IntArrayRef, Scalar, const TensorOptions &), &TypeDefault::new_full>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::empty.out(int[] size, *, MemoryFormat? memory_format=None, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, IntArrayRef, c10::optional<MemoryFormat>), &TypeDefault::empty_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::empty_like(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::empty_like)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::empty_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, MemoryFormat? memory_format=contiguous_format) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const TensorOptions &, c10::optional<MemoryFormat>), &TypeDefault::empty_like>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::erf(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::erf)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::erfc(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::erfc)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::exp(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::exp)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::expm1(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::expm1)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::expm1_(Tensor(a!) self) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &), &TypeDefault::expm1_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::expand(Tensor(a) self, int[] size, *, bool implicit=False) -> Tensor(a)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool), &TypeDefault::expand>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::expand_as(Tensor self, Tensor other) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::expand_as)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::eye(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (int64_t, const TensorOptions &), &TypeDefault::eye>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::eye.m(int n, int m, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (int64_t, int64_t, const TensorOptions &), &TypeDefault::eye>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::flatten.using_ints(Tensor self, int start_dim=0, int end_dim=-1) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, int64_t)>(&TypeDefault::flatten)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::flatten.named_out_dim(Tensor self, int start_dim, int end_dim, Dimname out_dim) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, int64_t, int64_t, Dimname), &TypeDefault::flatten>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::flatten.using_names(Tensor self, Dimname start_dim, Dimname end_dim, Dimname out_dim) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, Dimname, Dimname), &TypeDefault::flatten>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::flatten.DimnameList(Tensor self, DimnameList dims, Dimname out_dim) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, DimnameList, Dimname), &TypeDefault::flatten>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::fill_.Scalar(Tensor(a!) self, Scalar value) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::fill_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::fill_.Tensor(Tensor(a!) self, Tensor value) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::fill_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::floor(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::floor)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::floor_(Tensor(a!) self) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &), &TypeDefault::floor_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::frac(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::frac)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::full.names(int[] size, Scalar fill_value, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (IntArrayRef, Scalar, c10::optional<DimnameList>, const TensorOptions &), &TypeDefault::full>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::full(int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (IntArrayRef, Scalar, const TensorOptions &), &TypeDefault::full>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::full.out(int[] size, Scalar fill_value, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, IntArrayRef, Scalar), &TypeDefault::full_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::full_like(Tensor self, Scalar fill_value) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, Scalar)>(&TypeDefault::full_like)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::full_like.dtype(Tensor self, Scalar fill_value, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Scalar, const TensorOptions &), &TypeDefault::full_like>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::grid_sampler(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t, int64_t, bool)>(&TypeDefault::grid_sampler)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::hann_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (int64_t, const TensorOptions &), &TypeDefault::hann_window>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::hann_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (int64_t, bool, const TensorOptions &), &TypeDefault::hann_window>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::hamming_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (int64_t, const TensorOptions &), &TypeDefault::hamming_window>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::hamming_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (int64_t, bool, const TensorOptions &), &TypeDefault::hamming_window>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::hamming_window.periodic_alpha(int window_length, bool periodic, float alpha, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (int64_t, bool, double, const TensorOptions &), &TypeDefault::hamming_window>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::hamming_window.periodic_alpha_beta(int window_length, bool periodic, float alpha, float beta, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (int64_t, bool, double, double, const TensorOptions &), &TypeDefault::hamming_window>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::hinge_embedding_loss(Tensor self, Tensor target, float margin=1.0, int reduction=Mean) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, double, int64_t)>(&TypeDefault::hinge_embedding_loss)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::group_norm(Tensor input, int num_groups, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enabled=True) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &, double, bool), &TypeDefault::group_norm>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::fft(Tensor self, int signal_ndim, bool normalized=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, bool)>(&TypeDefault::fft)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::ifft(Tensor self, int signal_ndim, bool normalized=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, bool)>(&TypeDefault::ifft)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, bool, bool)>(&TypeDefault::rfft)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::irfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True, int[] signal_sizes=[]) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, int64_t, bool, bool, IntArrayRef), &TypeDefault::irfft>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_cufft_get_plan_cache_size(int device_index) -> int\")\n  .catchAllKernel<int64_t (int64_t)>(&TypeDefault::_cufft_get_plan_cache_size)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_cufft_get_plan_cache_max_size(int device_index) -> int\")\n  .catchAllKernel<int64_t (int64_t)>(&TypeDefault::_cufft_get_plan_cache_max_size)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_cufft_set_plan_cache_max_size(int device_index, int max_size) -> void\")\n  .impl_unboxedOnlyATenCatchAllKernel<void (int64_t, int64_t), &TypeDefault::_cufft_set_plan_cache_max_size>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_cufft_clear_plan_cache(int device_index) -> void\")\n  .impl_unboxedOnlyATenCatchAllKernel<void (int64_t), &TypeDefault::_cufft_clear_plan_cache>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::index.Tensor(Tensor self, Tensor?[] indices) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, TensorList), &TypeDefault::index>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, int64_t, const Tensor &, const Tensor &), &TypeDefault::index_copy_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::index_copy(Tensor self, int dim, Tensor index, Tensor source) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>(&TypeDefault::index_copy)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::index_copy_.dimname(Tensor(a!) self, Dimname dim, Tensor index, Tensor source) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, Dimname, const Tensor &, const Tensor &), &TypeDefault::index_copy_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::index_copy.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, const Tensor &, const Tensor &), &TypeDefault::index_copy>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::index_put_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, TensorList, const Tensor &, bool), &TypeDefault::index_put_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::index_put(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, TensorList, const Tensor &, bool), &TypeDefault::index_put>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_index_put_impl_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, TensorList, const Tensor &, bool, bool), &TypeDefault::_index_put_impl_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::instance_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool use_input_stats, float momentum, float eps, bool cudnn_enabled) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double, bool), &TypeDefault::instance_norm>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::inverse(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::inverse)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::inverse.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::inverse_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::isclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, double, double, bool)>(&TypeDefault::isclose)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::isnan(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::isnan)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::is_distributed(Tensor self) -> bool\")\n  .catchAllKernel<bool (const Tensor &)>(&TypeDefault::is_distributed)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::is_floating_point(Tensor self) -> bool\")\n  .catchAllKernel<bool (const Tensor &)>(&TypeDefault::is_floating_point)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::is_complex(Tensor self) -> bool\")\n  .catchAllKernel<bool (const Tensor &)>(&TypeDefault::is_complex)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::is_nonzero(Tensor self) -> bool\")\n  .catchAllKernel<bool (const Tensor &)>(&TypeDefault::is_nonzero)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::is_same_size(Tensor self, Tensor other) -> bool\")\n  .catchAllKernel<bool (const Tensor &, const Tensor &)>(&TypeDefault::is_same_size)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::is_signed(Tensor self) -> bool\")\n  .catchAllKernel<bool (const Tensor &)>(&TypeDefault::is_signed)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::kl_div(Tensor self, Tensor target, int reduction=Mean) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t)>(&TypeDefault::kl_div)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::kthvalue(Tensor self, int k, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, int64_t, bool), &TypeDefault::kthvalue>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::kthvalue.dimname(Tensor self, int k, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, Dimname, bool), &TypeDefault::kthvalue>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::kthvalue.dimname_out(Tensor self, int k, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, Dimname, bool), &TypeDefault::kthvalue_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::layer_norm(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enable=True) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, IntArrayRef, const Tensor &, const Tensor &, double, bool), &TypeDefault::layer_norm>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &), &TypeDefault::linear>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::fbgemm_linear_int8_weight_fp32_activation(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &), &TypeDefault::fbgemm_linear_int8_weight_fp32_activation>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::fbgemm_linear_int8_weight(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &)>(&TypeDefault::fbgemm_linear_int8_weight)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::fbgemm_linear_quantize_weight(Tensor input) -> (Tensor, Tensor, float, int)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor,double,int64_t> (const Tensor &), &TypeDefault::fbgemm_linear_quantize_weight>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::fbgemm_pack_gemm_matrix_fp16(Tensor input) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::fbgemm_pack_gemm_matrix_fp16)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::fbgemm_linear_fp16_weight_fp32_activation(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &), &TypeDefault::fbgemm_linear_fp16_weight_fp32_activation>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::fbgemm_linear_fp16_weight(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &)>(&TypeDefault::fbgemm_linear_fp16_weight)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::fbgemm_pack_quantized_matrix(Tensor input) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::fbgemm_pack_quantized_matrix)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::fbgemm_pack_quantized_matrix.KN(Tensor input, int K, int N) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, int64_t)>(&TypeDefault::fbgemm_pack_quantized_matrix)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::linspace(Scalar start, Scalar end, int steps=100, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (Scalar, Scalar, int64_t, const TensorOptions &), &TypeDefault::linspace>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::log(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::log)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::log_(Tensor(a!) self) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &), &TypeDefault::log_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::log10(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::log10)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::log1p(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::log1p)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::log2(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::log2)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::logdet(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::logdet)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::logspace(Scalar start, Scalar end, int steps=100, float base=10.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (Scalar, Scalar, int64_t, double, const TensorOptions &), &TypeDefault::logspace>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::log_softmax(Tensor self, int dim, ScalarType? dtype=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>), &TypeDefault::log_softmax>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::log_softmax(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>), &TypeDefault::log_softmax>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::logsumexp(Tensor self, int[1] dim, bool keepdim=False) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool), &TypeDefault::logsumexp>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool), &TypeDefault::logsumexp_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::logsumexp.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, DimnameList, bool), &TypeDefault::logsumexp>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::logsumexp.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, DimnameList, bool), &TypeDefault::logsumexp_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::margin_ranking_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, double, int64_t)>(&TypeDefault::margin_ranking_loss)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::matmul(Tensor self, Tensor other) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::matmul)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &), &TypeDefault::matmul_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::matrix_rank.tol(Tensor self, float tol, bool symmetric=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, double, bool)>(&TypeDefault::matrix_rank)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::matrix_rank(Tensor self, bool symmetric=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::matrix_rank)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::matrix_power(Tensor self, int n) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t)>(&TypeDefault::matrix_power)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool), &TypeDefault::max>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::max.dim_max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool), &TypeDefault::max_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::max_values(Tensor self, int[1] dim, bool keepdim=False) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool), &TypeDefault::max_values>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::max.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, Dimname, bool), &TypeDefault::max>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::max.names_dim_max(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname, bool), &TypeDefault::max_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::max_values.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, DimnameList, bool), &TypeDefault::max_values>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::max_pool1d_with_indices(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool), &TypeDefault::max_pool1d_with_indices>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::max_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool), &TypeDefault::max_pool1d>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool), &TypeDefault::max_pool2d>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::max_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool), &TypeDefault::max_pool3d>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::median.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool), &TypeDefault::median>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::median.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool), &TypeDefault::median_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::median.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, Dimname, bool), &TypeDefault::median>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::median.names_dim_values(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname, bool), &TypeDefault::median_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool), &TypeDefault::min>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::min.dim_min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool), &TypeDefault::min_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::min_values(Tensor self, int[1] dim, bool keepdim=False) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool), &TypeDefault::min_values>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::min.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, Dimname, bool), &TypeDefault::min>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::min.names_dim_min(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname, bool), &TypeDefault::min_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::min_values.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, DimnameList, bool), &TypeDefault::min_values>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::mkldnn_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t), &TypeDefault::mkldnn_convolution>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::mkldnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool), &TypeDefault::mkldnn_convolution_backward_input>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::mkldnn_convolution_backward_weights(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool), &TypeDefault::mkldnn_convolution_backward_weights>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::mkldnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, std::array<bool,3>), &TypeDefault::mkldnn_convolution_backward>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_sparse_mm(Tensor sparse, Tensor dense) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::_sparse_mm)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool), &TypeDefault::mode>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool), &TypeDefault::mode_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::mode.dimname(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, Dimname, bool), &TypeDefault::mode>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::mode.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname, bool), &TypeDefault::mode_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::mul.Scalar(Tensor self, Scalar other) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, Scalar)>(&TypeDefault::mul)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::mul_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::mul_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::mvlgamma(Tensor self, int p) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t)>(&TypeDefault::mvlgamma)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::mvlgamma_(Tensor(a!) self, int p) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, int64_t), &TypeDefault::mvlgamma_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::narrow(Tensor(a) self, int dim, int start, int length) -> Tensor(a)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, int64_t, int64_t, int64_t), &TypeDefault::narrow>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_nnpack_available() -> bool\")\n  .catchAllKernel<bool ()>(&TypeDefault::_nnpack_available)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, int[2] padding) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef), &TypeDefault::_nnpack_spatial_convolution>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_nnpack_spatial_convolution_backward(Tensor input, Tensor grad_output, Tensor weight, int[2] padding, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, std::array<bool,3>), &TypeDefault::_nnpack_spatial_convolution_backward>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_nnpack_spatial_convolution_backward_input(Tensor input, Tensor grad_output, Tensor weight, int[2] padding) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef), &TypeDefault::_nnpack_spatial_convolution_backward_input>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_nnpack_spatial_convolution_backward_weight(Tensor input, int[] weightsize, Tensor grad_output, int[2] padding) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef, const Tensor &, IntArrayRef), &TypeDefault::_nnpack_spatial_convolution_backward_weight>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::ones.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &), &TypeDefault::ones>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::ones(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (IntArrayRef, const TensorOptions &), &TypeDefault::ones>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::ones.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, IntArrayRef), &TypeDefault::ones_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::ones_like(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::ones_like)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::ones_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const TensorOptions &), &TypeDefault::ones_like>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::pairwise_distance(Tensor x1, Tensor x2, float p=2, float eps=1e-06, bool keepdim=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, double, double, bool)>(&TypeDefault::pairwise_distance)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cdist(Tensor x1, Tensor x2, float p=2) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, double)>(&TypeDefault::cdist)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_cdist_backward(Tensor grad, Tensor x1, Tensor x2, float p, Tensor cdist) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, double, const Tensor &)>(&TypeDefault::_cdist_backward)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::pdist(Tensor self, float p=2) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, double)>(&TypeDefault::pdist)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_pdist_forward(Tensor self, float p=2) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, double)>(&TypeDefault::_pdist_forward)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_pdist_backward(Tensor grad, Tensor self, float p, Tensor pdist) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, double, const Tensor &)>(&TypeDefault::_pdist_backward)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cosine_similarity(Tensor x1, Tensor x2, int dim=1, float eps=1e-08) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t, double)>(&TypeDefault::cosine_similarity)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::permute(Tensor(a) self, int[] dims) -> Tensor(a)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef), &TypeDefault::permute>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::numpy_T(Tensor(a) self) -> Tensor(a)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &), &TypeDefault::numpy_T>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::pixel_shuffle(Tensor self, int upscale_factor) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t)>(&TypeDefault::pixel_shuffle)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::is_pinned(Tensor self) -> bool\")\n  .catchAllKernel<bool (const Tensor &)>(&TypeDefault::is_pinned)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::pin_memory(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::pin_memory)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::pinverse(Tensor self, float rcond=1e-15) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, double)>(&TypeDefault::pinverse)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::poisson_nll_loss(Tensor input, Tensor target, bool log_input, bool full, float eps, int reduction) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, bool, bool, double, int64_t)>(&TypeDefault::poisson_nll_loss)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::scalar_tensor(Scalar s, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (Scalar, const TensorOptions &), &TypeDefault::scalar_tensor>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::rand.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &), &TypeDefault::rand>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::rand.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (IntArrayRef, Generator *, c10::optional<DimnameList>, const TensorOptions &), &TypeDefault::rand>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rand(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (IntArrayRef, const TensorOptions &), &TypeDefault::rand>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rand.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (IntArrayRef, Generator *, const TensorOptions &), &TypeDefault::rand>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rand.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, IntArrayRef), &TypeDefault::rand_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rand.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, IntArrayRef, Generator *), &TypeDefault::rand_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rand_like(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::rand_like)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rand_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const TensorOptions &), &TypeDefault::rand_like>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randint(int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (int64_t, IntArrayRef, const TensorOptions &), &TypeDefault::randint>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randint.generator(int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (int64_t, IntArrayRef, Generator *, const TensorOptions &), &TypeDefault::randint>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randint.low(int low, int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (int64_t, int64_t, IntArrayRef, const TensorOptions &), &TypeDefault::randint>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randint.low_generator(int low, int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (int64_t, int64_t, IntArrayRef, Generator *, const TensorOptions &), &TypeDefault::randint>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randint.out(int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, int64_t, IntArrayRef), &TypeDefault::randint_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randint.generator_out(int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, int64_t, IntArrayRef, Generator *), &TypeDefault::randint_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randint.low_out(int low, int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, int64_t, int64_t, IntArrayRef), &TypeDefault::randint_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randint.low_generator_out(int low, int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, int64_t, int64_t, IntArrayRef, Generator *), &TypeDefault::randint_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randint_like(Tensor self, int high) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t)>(&TypeDefault::randint_like)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randint_like.low(Tensor self, int low, int high) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, int64_t)>(&TypeDefault::randint_like)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randint_like.dtype(Tensor self, int high, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, int64_t, const TensorOptions &), &TypeDefault::randint_like>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randint_like.low_dtype(Tensor self, int low, int high, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, int64_t, int64_t, const TensorOptions &), &TypeDefault::randint_like>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randn(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (IntArrayRef, const TensorOptions &), &TypeDefault::randn>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randn.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (IntArrayRef, Generator *, const TensorOptions &), &TypeDefault::randn>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::randn.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &), &TypeDefault::randn>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::randn.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (IntArrayRef, Generator *, c10::optional<DimnameList>, const TensorOptions &), &TypeDefault::randn>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randn.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, IntArrayRef), &TypeDefault::randn_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randn.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, IntArrayRef, Generator *), &TypeDefault::randn_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randn_like(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::randn_like)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randn_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const TensorOptions &), &TypeDefault::randn_like>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randperm(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (int64_t, const TensorOptions &), &TypeDefault::randperm>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randperm.generator(int n, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (int64_t, Generator *, const TensorOptions &), &TypeDefault::randperm>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::randperm.out(int n, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, int64_t), &TypeDefault::randperm_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::range.step(Scalar start, Scalar end, Scalar step=1, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (Scalar, Scalar, Scalar, const TensorOptions &), &TypeDefault::range>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::range(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (Scalar, Scalar, const TensorOptions &), &TypeDefault::range>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::reciprocal(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::reciprocal)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::neg(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::neg)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::neg_(Tensor(a!) self) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &), &TypeDefault::neg_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::repeat(Tensor self, int[] repeats) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef), &TypeDefault::repeat>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, c10::optional<int64_t>)>(&TypeDefault::repeat_interleave)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::repeat_interleave.self_int(Tensor self, int repeats, int? dim=None) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, c10::optional<int64_t>)>(&TypeDefault::repeat_interleave)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::reshape(Tensor self, int[] shape) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef), &TypeDefault::reshape>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::reshape_as(Tensor self, Tensor other) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::reshape_as)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::round(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::round)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::round_(Tensor(a!) self) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &), &TypeDefault::round_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rrelu(Tensor self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, Scalar, Scalar, bool, Generator *), &TypeDefault::rrelu>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rrelu_(Tensor(a!) self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, Scalar, Scalar, bool, Generator *), &TypeDefault::rrelu_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rsqrt(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::rsqrt)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rsqrt_(Tensor(a!) self) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &), &TypeDefault::rsqrt_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::select.Dimname(Tensor(a) self, Dimname dim, int index) -> Tensor(a)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, int64_t), &TypeDefault::select>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::select.int(Tensor(a) self, int dim, int index) -> Tensor(a)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, int64_t, int64_t), &TypeDefault::select>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::selu(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::selu)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::selu_(Tensor(a!) self) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &), &TypeDefault::selu_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::celu(Tensor self, Scalar alpha=1.0) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, Scalar)>(&TypeDefault::celu)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::celu_(Tensor(a!) self, Scalar alpha=1.0) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::celu_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::sin(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::sin)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::sinh(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::sinh)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::detach(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::detach)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::detach_(Tensor(a!) self) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &), &TypeDefault::detach_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::size.int(Tensor self, int dim) -> int\")\n  .catchAllKernel<int64_t (const Tensor &, int64_t)>(&TypeDefault::size)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::size.Dimname(Tensor self, Dimname dim) -> int\")\n  .impl_unboxedOnlyATenCatchAllKernel<int64_t (const Tensor &, Dimname), &TypeDefault::size>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::slice.Tensor(Tensor(a) self, int dim=0, int start=0, int end=9223372036854775807, int step=1) -> Tensor(a)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, int64_t, int64_t, int64_t, int64_t), &TypeDefault::slice>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &), &TypeDefault::slogdet>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::smm(Tensor self, Tensor mat2) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::smm)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::softmax(Tensor self, int dim, ScalarType? dtype=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>), &TypeDefault::softmax>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::softmax(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>), &TypeDefault::softmax>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::split.Tensor(Tensor(a) self, int split_size, int dim=0) -> Tensor(a)[]\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::vector<Tensor> (const Tensor &, int64_t, int64_t), &TypeDefault::split>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::split_with_sizes(Tensor self, int[] split_sizes, int dim=0) -> Tensor[]\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::vector<Tensor> (const Tensor &, IntArrayRef, int64_t), &TypeDefault::split_with_sizes>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::squeeze(Tensor(a) self) -> Tensor(a)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &), &TypeDefault::squeeze>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::squeeze.dim(Tensor(a) self, int dim) -> Tensor(a)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, int64_t), &TypeDefault::squeeze>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::squeeze.dimname(Tensor(a) self, Dimname dim) -> Tensor(a)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname), &TypeDefault::squeeze>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::squeeze_(Tensor(a!) self) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &), &TypeDefault::squeeze_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::squeeze_.dim(Tensor(a!) self, int dim) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, int64_t), &TypeDefault::squeeze_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::squeeze_.dimname(Tensor(a!) self, Dimname dim) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, Dimname), &TypeDefault::squeeze_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::sspaddmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(&TypeDefault::sspaddmm)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::stack(Tensor[] tensors, int dim=0) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (TensorList, int64_t), &TypeDefault::stack>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, TensorList, int64_t), &TypeDefault::stack_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::stft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool normalized=False, bool onesided=True) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, const Tensor &, bool, bool), &TypeDefault::stft>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::stride.int(Tensor self, int dim) -> int\")\n  .catchAllKernel<int64_t (const Tensor &, int64_t)>(&TypeDefault::stride)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::stride.Dimname(Tensor self, Dimname dim) -> int\")\n  .impl_unboxedOnlyATenCatchAllKernel<int64_t (const Tensor &, Dimname), &TypeDefault::stride>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::sum(Tensor self, *, ScalarType? dtype=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, c10::optional<ScalarType>), &TypeDefault::sum>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::sum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>), &TypeDefault::sum>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::sum.dim_DimnameList(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, DimnameList, bool, c10::optional<ScalarType>), &TypeDefault::sum>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::sum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>), &TypeDefault::sum_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::sum.DimnameList_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, DimnameList, bool, c10::optional<ScalarType>), &TypeDefault::sum_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::sum_to_size(Tensor self, int[] size) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef), &TypeDefault::sum_to_size>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::sqrt(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::sqrt)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::std(Tensor self, bool unbiased=True) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::std)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::std.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool, bool), &TypeDefault::std>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::std_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, bool), &TypeDefault::std_mean>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::std_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, bool, bool), &TypeDefault::std_mean>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::std_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, DimnameList, bool, bool), &TypeDefault::std_mean>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::std.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool, bool), &TypeDefault::std_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::std.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, DimnameList, bool, bool), &TypeDefault::std>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::std.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, DimnameList, bool, bool), &TypeDefault::std_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::prod(Tensor self, *, ScalarType? dtype=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, c10::optional<ScalarType>), &TypeDefault::prod>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::prod.dim_int(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, int64_t, bool, c10::optional<ScalarType>), &TypeDefault::prod>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::prod.int_out(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, int64_t, bool, c10::optional<ScalarType>), &TypeDefault::prod_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::prod.dim_Dimname(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, bool, c10::optional<ScalarType>), &TypeDefault::prod>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::prod.Dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, Dimname, bool, c10::optional<ScalarType>), &TypeDefault::prod_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::t(Tensor(a) self) -> Tensor(a)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &), &TypeDefault::t>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::t_(Tensor(a!) self) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &), &TypeDefault::t_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::tan(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::tan)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::tanh(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::tanh)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::tensordot(Tensor self, Tensor other, int[] dims_self, int[] dims_other) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef), &TypeDefault::tensordot>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::threshold(Tensor self, Scalar threshold, Scalar value) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, Scalar, Scalar)>(&TypeDefault::threshold)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::threshold_(Tensor(a!) self, Scalar threshold, Scalar value) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, Scalar, Scalar), &TypeDefault::threshold_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::threshold.out(Tensor self, Scalar threshold, Scalar value, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, Scalar, Scalar), &TypeDefault::threshold_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::threshold_backward(Tensor grad_output, Tensor self, Scalar threshold) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, Scalar)>(&TypeDefault::threshold_backward)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::transpose.int(Tensor(a) self, int dim0, int dim1) -> Tensor(a)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, int64_t, int64_t), &TypeDefault::transpose>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::transpose.Dimname(Tensor(a) self, Dimname dim0, Dimname dim1) -> Tensor(a)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, Dimname), &TypeDefault::transpose>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::transpose_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, int64_t, int64_t), &TypeDefault::transpose_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::one_hot(Tensor self, int num_classes=-1) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t)>(&TypeDefault::one_hot)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rot90(Tensor self, int k=1, int[] dims=[0,1]) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, int64_t, IntArrayRef), &TypeDefault::rot90>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::trapz.x(Tensor y, Tensor x, *, int dim=-1) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t)>(&TypeDefault::trapz)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::trapz.dx(Tensor y, *, float dx=1, int dim=-1) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, double, int64_t)>(&TypeDefault::trapz)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_trilinear(Tensor i1, Tensor i2, Tensor i3, int[] expand1, int[] expand2, int[] expand3, int[] sumdim, int unroll_dim=1) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t), &TypeDefault::_trilinear>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::triplet_margin_loss(Tensor anchor, Tensor positive, Tensor negative, float margin=1.0, float p=2, float eps=1e-06, bool swap=False, int reduction=Mean) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, double, double, double, bool, int64_t)>(&TypeDefault::triplet_margin_loss)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::trunc(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::trunc)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::trunc_(Tensor(a!) self) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &), &TypeDefault::trunc_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::type_as(Tensor self, Tensor other) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::type_as)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_has_compatible_shallow_copy_type(Tensor self, Tensor from) -> bool\")\n  .catchAllKernel<bool (const Tensor &, const Tensor &)>(&TypeDefault::_has_compatible_shallow_copy_type)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_unsafe_view(Tensor self, int[] size) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef), &TypeDefault::_unsafe_view>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::unsqueeze(Tensor(a) self, int dim) -> Tensor(a)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, int64_t), &TypeDefault::unsqueeze>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::unsqueeze_(Tensor(a!) self, int dim) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, int64_t), &TypeDefault::unsqueeze_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::var(Tensor self, bool unbiased=True) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::var)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::var.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool, bool), &TypeDefault::var>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::var.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool, bool), &TypeDefault::var_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::var.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, DimnameList, bool, bool), &TypeDefault::var>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::var.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, DimnameList, bool, bool), &TypeDefault::var_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::var_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, bool), &TypeDefault::var_mean>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::var_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, bool, bool), &TypeDefault::var_mean>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::var_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, DimnameList, bool, bool), &TypeDefault::var_mean>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::view_as(Tensor self, Tensor other) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::view_as)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::where.self(Tensor condition, Tensor self, Tensor other) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &)>(&TypeDefault::where)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::where(Tensor condition) -> Tensor[]\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::vector<Tensor> (const Tensor &), &TypeDefault::where>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::norm_except_dim(Tensor v, int pow=2, int dim=0) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, int64_t, int64_t), &TypeDefault::norm_except_dim>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_weight_norm(Tensor v, Tensor g, int dim=0) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t)>(&TypeDefault::_weight_norm)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_weight_norm_differentiable_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t), &TypeDefault::_weight_norm_differentiable_backward>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::zeros.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &), &TypeDefault::zeros>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::zeros(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (IntArrayRef, const TensorOptions &), &TypeDefault::zeros>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::zeros.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, IntArrayRef), &TypeDefault::zeros_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::zeros_like(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::zeros_like)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::zeros_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const TensorOptions &), &TypeDefault::zeros_like>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_sparse_sum(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::_sparse_sum)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_sparse_sum.dtype(Tensor self, *, ScalarType dtype) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, ScalarType), &TypeDefault::_sparse_sum>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_sparse_sum.dim(Tensor self, int[1] dim) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef), &TypeDefault::_sparse_sum>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_sparse_sum.dim_dtype(Tensor self, int[1] dim, *, ScalarType dtype) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, IntArrayRef, ScalarType), &TypeDefault::_sparse_sum>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, ScalarType dtype) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, c10::optional<Scalar>, ScalarType), &TypeDefault::norm>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::norm.Scalar(Tensor self, Scalar p=2) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, Scalar)>(&TypeDefault::norm)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType), &TypeDefault::norm>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::norm.ScalarOpt_dim(Tensor self, Scalar? p, int[1] dim, bool keepdim=False) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, c10::optional<Scalar>, IntArrayRef, bool), &TypeDefault::norm>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::norm.dtype_out(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType), &TypeDefault::norm_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::norm.out(Tensor self, Scalar? p, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool), &TypeDefault::norm_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::norm.names_ScalarOpt_dim_dtype(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, c10::optional<Scalar>, DimnameList, bool, ScalarType), &TypeDefault::norm>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::norm.names_ScalarOpt_dim(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, c10::optional<Scalar>, DimnameList, bool), &TypeDefault::norm>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::norm.names_dtype_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, c10::optional<Scalar>, DimnameList, bool, ScalarType), &TypeDefault::norm_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::norm.names_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, c10::optional<Scalar>, DimnameList, bool), &TypeDefault::norm_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::frobenius_norm(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::frobenius_norm)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::frobenius_norm.dim(Tensor self, int[1] dim, bool keepdim=False) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool), &TypeDefault::frobenius_norm>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::frobenius_norm.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool), &TypeDefault::frobenius_norm_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::nuclear_norm(Tensor self, bool keepdim=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::nuclear_norm)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::nuclear_norm.out(Tensor self, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, bool), &TypeDefault::nuclear_norm_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::nuclear_norm.dim(Tensor self, int[2] dim, bool keepdim=False) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool), &TypeDefault::nuclear_norm>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::nuclear_norm.dim_out(Tensor self, int[2] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool), &TypeDefault::nuclear_norm_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::resize_as_(Tensor(a!) self, Tensor the_template) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::resize_as_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::sub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, Scalar, Scalar)>(&TypeDefault::sub)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::sub_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, Scalar, Scalar), &TypeDefault::sub_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rsub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, Scalar)>(&TypeDefault::rsub)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rsub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, Scalar, Scalar)>(&TypeDefault::rsub)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_sparse_addmm(Tensor self, Tensor sparse, Tensor dense, *, Scalar beta=1, Scalar alpha=1) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(&TypeDefault::_sparse_addmm)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::sparse_coo_tensor.size(int[] size, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (IntArrayRef, const TensorOptions &), &TypeDefault::sparse_coo_tensor>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::sparse_coo_tensor.indices(Tensor indices, Tensor values, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const TensorOptions &), &TypeDefault::sparse_coo_tensor>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::sparse_coo_tensor.indices_size(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, IntArrayRef, const TensorOptions &), &TypeDefault::sparse_coo_tensor>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_sparse_coo_tensor_unsafe(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, IntArrayRef, const TensorOptions &), &TypeDefault::_sparse_coo_tensor_unsafe>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::to_dense_backward(Tensor grad, Tensor input) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::to_dense_backward)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::numel(Tensor self) -> int\")\n  .catchAllKernel<int64_t (const Tensor &)>(&TypeDefault::numel)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::unbind.int(Tensor(a) self, int dim=0) -> Tensor(a)[]\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::vector<Tensor> (const Tensor &, int64_t), &TypeDefault::unbind>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::unbind.Dimname(Tensor(a) self, Dimname dim) -> Tensor(a)[]\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::vector<Tensor> (const Tensor &, Dimname), &TypeDefault::unbind>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::to_mkldnn_backward(Tensor grad, Tensor input) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::to_mkldnn_backward)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::to.dtype_layout(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, bool non_blocking=False, bool copy=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const TensorOptions &, bool, bool), &TypeDefault::to>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::to.device(Tensor self, Device device, ScalarType dtype, bool non_blocking=False, bool copy=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Device, ScalarType, bool, bool), &TypeDefault::to>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::to.dtype(Tensor self, ScalarType dtype, bool non_blocking=False, bool copy=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, ScalarType, bool, bool), &TypeDefault::to>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::to.other(Tensor self, Tensor other, bool non_blocking=False, bool copy=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, bool, bool)>(&TypeDefault::to)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::meshgrid(Tensor[] tensors) -> Tensor[]\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::vector<Tensor> (TensorList), &TypeDefault::meshgrid>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cartesian_prod(Tensor[] tensors) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (TensorList), &TypeDefault::cartesian_prod>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::combinations(Tensor self, int r=2, bool with_replacement=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, bool)>(&TypeDefault::combinations)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::item(Tensor self) -> Scalar\")\n  .catchAllKernel<Scalar (const Tensor &)>(&TypeDefault::item)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::result_type.Tensor(Tensor tensor, Tensor other) -> ScalarType\")\n  .impl_unboxedOnlyATenCatchAllKernel<ScalarType (const Tensor &, const Tensor &), &TypeDefault::result_type>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::result_type.Scalar(Tensor tensor, Scalar other) -> ScalarType\")\n  .impl_unboxedOnlyATenCatchAllKernel<ScalarType (const Tensor &, Scalar), &TypeDefault::result_type>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::result_type.Scalar_Tensor(Scalar scalar, Tensor tensor) -> ScalarType\")\n  .impl_unboxedOnlyATenCatchAllKernel<ScalarType (Scalar, const Tensor &), &TypeDefault::result_type>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::result_type.Scalar_Scalar(Scalar scalar1, Scalar scalar2) -> ScalarType\")\n  .impl_unboxedOnlyATenCatchAllKernel<ScalarType (Scalar, Scalar), &TypeDefault::result_type>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::can_cast(ScalarType from, ScalarType to) -> bool\")\n  .impl_unboxedOnlyATenCatchAllKernel<bool (ScalarType, ScalarType), &TypeDefault::can_cast>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::promote_types(ScalarType type1, ScalarType type2) -> ScalarType\")\n  .impl_unboxedOnlyATenCatchAllKernel<ScalarType (ScalarType, ScalarType), &TypeDefault::promote_types>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_thnn_differentiable_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor input_gates, Tensor hidden_gates, Tensor? input_bias, Tensor? hidden_bias, Tensor cx, Tensor cy) -> (Tensor, Tensor, Tensor, Tensor, Tensor)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &), &TypeDefault::_thnn_differentiable_lstm_cell_backward>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_thnn_differentiable_gru_cell_backward(Tensor grad_hy, Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias, Tensor? hidden_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &), &TypeDefault::_thnn_differentiable_gru_cell_backward>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::lstm.input(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool, bool), &TypeDefault::lstm>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool), &TypeDefault::lstm>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool), &TypeDefault::gru>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool), &TypeDefault::gru>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rnn_tanh.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool), &TypeDefault::rnn_tanh>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rnn_tanh.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool), &TypeDefault::rnn_tanh>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rnn_relu.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool), &TypeDefault::rnn_relu>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rnn_relu.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool), &TypeDefault::rnn_relu>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, TensorList, const Tensor &, const Tensor &, const Tensor &, const Tensor &), &TypeDefault::lstm_cell>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &), &TypeDefault::gru_cell>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &), &TypeDefault::rnn_tanh_cell>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &), &TypeDefault::rnn_relu_cell>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::quantized_lstm(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, *, ScalarType? dtype=None, bool use_dynamic=False) -> (Tensor, Tensor, Tensor)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool, bool, c10::optional<ScalarType>, bool), &TypeDefault::quantized_lstm>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::quantized_gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool), &TypeDefault::quantized_gru>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::quantized_gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool), &TypeDefault::quantized_gru>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::quantized_lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, TensorList, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar), &TypeDefault::quantized_lstm_cell>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::quantized_gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar)>(&TypeDefault::quantized_gru_cell)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::quantized_rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar)>(&TypeDefault::quantized_rnn_relu_cell)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::quantized_rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar)>(&TypeDefault::quantized_rnn_tanh_cell)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_pack_padded_sequence(Tensor input, Tensor lengths, bool batch_first) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, bool), &TypeDefault::_pack_padded_sequence>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_pack_padded_sequence_backward(Tensor grad, int[] input_size, Tensor batch_sizes, bool batch_first) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef, const Tensor &, bool), &TypeDefault::_pack_padded_sequence_backward>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_pad_packed_sequence(Tensor data, Tensor batch_sizes, bool batch_first, Scalar padding_value, int total_length) -> (Tensor, Tensor)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, bool, Scalar, int64_t), &TypeDefault::_pad_packed_sequence>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::masked_fill.Scalar(Tensor self, Tensor mask, Scalar value) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, Scalar)>(&TypeDefault::masked_fill)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::masked_fill.Tensor(Tensor self, Tensor mask, Tensor value) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &)>(&TypeDefault::masked_fill)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::masked_scatter(Tensor self, Tensor mask, Tensor source) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &)>(&TypeDefault::masked_scatter)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::index_add(Tensor self, int dim, Tensor index, Tensor source) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>(&TypeDefault::index_add)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::index_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, const Tensor &, const Tensor &), &TypeDefault::index_add>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::index_fill.Scalar(Tensor self, int dim, Tensor index, Scalar value) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, const Tensor &, Scalar)>(&TypeDefault::index_fill)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::index_fill.Tensor(Tensor self, int dim, Tensor index, Tensor value) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>(&TypeDefault::index_fill)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::index_fill_.dimname_Scalar(Tensor(a!) self, Dimname dim, Tensor index, Scalar value) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, Dimname, const Tensor &, Scalar), &TypeDefault::index_fill_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::index_fill_.dimname_Scalar(Tensor(a!) self, Dimname dim, Tensor index, Tensor value) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, Dimname, const Tensor &, const Tensor &), &TypeDefault::index_fill_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::index_fill.dimname_Scalar(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, const Tensor &, Scalar), &TypeDefault::index_fill>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::index_fill.dimname_Tensor(Tensor self, Dimname dim, Tensor index, Tensor value) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, const Tensor &, const Tensor &), &TypeDefault::index_fill>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::scatter.src(Tensor self, int dim, Tensor index, Tensor src) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>(&TypeDefault::scatter)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::scatter.value(Tensor self, int dim, Tensor index, Scalar value) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, const Tensor &, Scalar)>(&TypeDefault::scatter)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::scatter.dimname_src(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, const Tensor &, const Tensor &), &TypeDefault::scatter>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::scatter.dimname_value(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, const Tensor &, Scalar), &TypeDefault::scatter>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::scatter_add(Tensor self, int dim, Tensor index, Tensor src) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>(&TypeDefault::scatter_add)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::scatter_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, const Tensor &, const Tensor &), &TypeDefault::scatter_add>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::lt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::lt_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::lt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::lt_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::gt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::gt_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::gt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::gt_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::le_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::le_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::le_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::le_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::ge_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::ge_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::ge_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::ge_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::eq_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::eq_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::eq_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::eq_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::ne_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::ne_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::ne_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::ne_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::atan2_(Tensor(a!) self, Tensor other) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::atan2_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::digamma_(Tensor(a!) self) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &), &TypeDefault::digamma_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::polygamma_(Tensor(a!) self, int n) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, int64_t), &TypeDefault::polygamma_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::addcdiv_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar), &TypeDefault::addcdiv_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cross.out(Tensor self, Tensor other, int? dim=None, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, c10::optional<int64_t>), &TypeDefault::cross_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cross(Tensor self, Tensor other, int? dim=None) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, c10::optional<int64_t>)>(&TypeDefault::cross)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::triu(Tensor self, int diagonal=0) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t)>(&TypeDefault::triu)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::tril(Tensor self, int diagonal=0) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t)>(&TypeDefault::tril)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::index_select.dimname_out(Tensor self, Dimname dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, Dimname, const Tensor &), &TypeDefault::index_select_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::index_select.dimname(Tensor self, Dimname dim, Tensor index) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, const Tensor &), &TypeDefault::index_select>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::nonzero_numpy(Tensor self) -> Tensor[]\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::vector<Tensor> (const Tensor &), &TypeDefault::nonzero_numpy>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::gather.dimname_out(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, Dimname, const Tensor &, bool), &TypeDefault::gather_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::gather.dimname(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, const Tensor &, bool), &TypeDefault::gather>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::_gather_sparse_backward(Tensor self, int dim, Tensor index, Tensor grad) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>(&TypeDefault::_gather_sparse_backward)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::addcmul.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar), &TypeDefault::addcmul_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::addcmul(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar)>(&TypeDefault::addcmul)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::addcmul_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar), &TypeDefault::addcmul_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::addcdiv.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar), &TypeDefault::addcdiv_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::addcdiv(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar)>(&TypeDefault::addcdiv)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::triangular_solve.X(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False, *, Tensor(a!) X, Tensor(b!) M) -> (Tensor(a!) solution, Tensor(b!) cloned_coefficient)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &, bool, bool, bool), &TypeDefault::triangular_solve_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::triangular_solve(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False) -> (Tensor solution, Tensor cloned_coefficient)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, bool, bool, bool), &TypeDefault::triangular_solve>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::symeig.e(Tensor self, bool eigenvectors=False, bool upper=True, *, Tensor(a!) e, Tensor(b!) V) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, bool, bool), &TypeDefault::symeig_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::symeig(Tensor self, bool eigenvectors=False, bool upper=True) -> (Tensor eigenvalues, Tensor eigenvectors)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, bool, bool), &TypeDefault::symeig>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::svd.U(Tensor self, bool some=True, bool compute_uv=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) V) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) V)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor &,Tensor &,Tensor &> (Tensor &, Tensor &, Tensor &, const Tensor &, bool, bool), &TypeDefault::svd_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::svd(Tensor self, bool some=True, bool compute_uv=True) -> (Tensor U, Tensor S, Tensor V)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, bool, bool), &TypeDefault::svd>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cholesky.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, bool), &TypeDefault::cholesky_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cholesky(Tensor self, bool upper=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::cholesky)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cholesky_solve.out(Tensor self, Tensor input2, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, bool), &TypeDefault::cholesky_solve_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::cholesky_solve(Tensor self, Tensor input2, bool upper=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, bool)>(&TypeDefault::cholesky_solve)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::solve(Tensor self, Tensor A) -> (Tensor solution, Tensor LU)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &), &TypeDefault::solve>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::solve.solution(Tensor self, Tensor A, *, Tensor(a!) solution, Tensor(b!) lu) -> (Tensor(a!) solution, Tensor(b!) LU)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &), &TypeDefault::solve_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::qr.Q(Tensor self, bool some=True, *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, bool), &TypeDefault::qr_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::qr(Tensor self, bool some=True) -> (Tensor Q, Tensor R)\")\n  .impl_unboxedOnlyC10CatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, bool), &TypeDefault::qr>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::lu_solve.out(Tensor self, Tensor LU_data, Tensor LU_pivots, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &), &TypeDefault::lu_solve_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::lu_solve(Tensor self, Tensor LU_data, Tensor LU_pivots) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &)>(&TypeDefault::lu_solve)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::digamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::digamma_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::digamma(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::digamma)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::polygamma.out(int n, Tensor self, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, int64_t, const Tensor &), &TypeDefault::polygamma_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::polygamma(int n, Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (int64_t, const Tensor &)>(&TypeDefault::polygamma)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::sign(Tensor self) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &), &TypeDefault::sign>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::sign_(Tensor(a!) self) -> Tensor(a!)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor & (Tensor &), &TypeDefault::sign_>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::atan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &), &TypeDefault::atan2_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::atan2(Tensor self, Tensor other) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::atan2)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::sort.dimname_values(Tensor self, Dimname dim, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname, bool), &TypeDefault::sort_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::sort.dimname(Tensor self, Dimname dim, bool descending=False) -> (Tensor values, Tensor indices)\")\n  .impl_unboxedOnlyATenCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, Dimname, bool), &TypeDefault::sort>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::argsort(Tensor self, int dim=-1, bool descending=False) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, int64_t, bool)>(&TypeDefault::argsort)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", "#ifdef BUILD_NAMEDTENSOR\n.op(torch::RegisterOperators::options()\n  .schema(\"aten::argsort.dimname(Tensor self, Dimname dim, bool descending=False) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, Dimname, bool), &TypeDefault::argsort>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n#endif", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::all(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::all)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::any(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::any)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::normal.float_float(float mean, float std, int[] size, *, Generator? generator=None, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (double, double, IntArrayRef, Generator *, const TensorOptions &), &TypeDefault::normal>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::normal.float_float_out(float mean, float std, int[] size, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, double, double, IntArrayRef, Generator *), &TypeDefault::normal_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::alias(Tensor(a) self) -> Tensor(a)\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &), &TypeDefault::alias>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::multilabel_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, int64_t), &TypeDefault::multilabel_margin_loss_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::multilabel_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t)>(&TypeDefault::multilabel_margin_loss)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::nll_loss.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t), &TypeDefault::nll_loss_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::nll_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t), &TypeDefault::nll_loss>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t), &TypeDefault::nll_loss2d_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t), &TypeDefault::nll_loss2d>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::log_sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::log_sigmoid_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::log_sigmoid(Tensor self) -> Tensor\")\n  .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::log_sigmoid)\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor\")\n  .impl_unboxedOnlyC10CatchAllKernel<Tensor (const Tensor &, IntArrayRef), &TypeDefault::adaptive_avg_pool2d>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::thnn_conv2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef), &TypeDefault::thnn_conv2d_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::thnn_conv2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef), &TypeDefault::thnn_conv2d>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::thnn_conv_depthwise2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef), &TypeDefault::thnn_conv_depthwise2d_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::thnn_conv_depthwise2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef), &TypeDefault::thnn_conv_depthwise2d>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::thnn_conv3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, *, Tensor(a!) out) -> Tensor(a!)\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef), &TypeDefault::thnn_conv3d_out>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n", ".op(torch::RegisterOperators::options()\n  .schema(\"aten::thnn_conv3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0) -> Tensor\")\n  .impl_unboxedOnlyATenCatchAllKernel<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef), &TypeDefault::thnn_conv3d>()\n  .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))\n"], "c10_ops_already_moved_from_aten_to_c10": ["    {\"aten::_cast_Byte\", \"\"},\n", "    {\"aten::_cast_Char\", \"\"},\n", "    {\"aten::_cast_Double\", \"\"},\n", "    {\"aten::_cast_Float\", \"\"},\n", "    {\"aten::_cast_Int\", \"\"},\n", "    {\"aten::_cast_Long\", \"\"},\n", "    {\"aten::_cast_Short\", \"\"},\n", "    {\"aten::_cast_Half\", \"\"},\n", "    {\"aten::data\", \"\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::align_as\", \"\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::align_tensors\", \"\"},\n#endif", "    {\"aten::_cudnn_ctc_loss\", \"\"},\n", "    {\"aten::_cudnn_rnn_flatten_weight\", \"\"},\n", "    {\"aten::_debug_has_internal_overlap\", \"\"},\n", "    {\"aten::_fused_dropout\", \"\"},\n", "    {\"aten::_masked_scale\", \"\"},\n", "    {\"aten::_sobol_engine_ff_\", \"\"},\n", "    {\"aten::_sobol_engine_scramble_\", \"\"},\n", "    {\"aten::_sobol_engine_initialize_state_\", \"\"},\n", "    {\"aten::_reshape_from_tensor\", \"\"},\n", "    {\"aten::_shape_as_tensor\", \"\"},\n", "    {\"aten::dropout\", \"\"},\n", "    {\"aten::dropout_\", \"\"},\n", "    {\"aten::feature_dropout\", \"\"},\n", "    {\"aten::feature_dropout_\", \"\"},\n", "    {\"aten::alpha_dropout\", \"\"},\n", "    {\"aten::alpha_dropout_\", \"\"},\n", "    {\"aten::feature_alpha_dropout\", \"\"},\n", "    {\"aten::feature_alpha_dropout_\", \"\"},\n", "    {\"aten::abs\", \"\"},\n", "    {\"aten::abs_\", \"\"},\n", "    {\"aten::acos\", \"\"},\n", "    {\"aten::acos_\", \"\"},\n", "    {\"aten::avg_pool1d\", \"\"},\n", "    {\"aten::adaptive_avg_pool1d\", \"\"},\n", "    {\"aten::adaptive_max_pool1d\", \"\"},\n", "    {\"aten::add\", \"Tensor\"},\n", "    {\"aten::add_\", \"Tensor\"},\n", "    {\"aten::add\", \"Scalar\"},\n", "    {\"aten::add_\", \"Scalar\"},\n", "    {\"aten::addmv\", \"\"},\n", "    {\"aten::addmv_\", \"\"},\n", "    {\"aten::addr\", \"\"},\n", "    {\"aten::addr_\", \"\"},\n", "    {\"aten::affine_grid_generator\", \"\"},\n", "    {\"aten::affine_grid_generator_backward\", \"\"},\n", "    {\"aten::all\", \"dim\"},\n", "    {\"aten::allclose\", \"\"},\n", "    {\"aten::any\", \"dim\"},\n", "    {\"aten::_dim_arange\", \"\"},\n", "    {\"aten::argmax\", \"\"},\n", "    {\"aten::argmin\", \"\"},\n", "    {\"aten::as_strided\", \"\"},\n", "    {\"aten::as_strided_\", \"\"},\n", "    {\"aten::asin\", \"\"},\n", "    {\"aten::asin_\", \"\"},\n", "    {\"aten::atan\", \"\"},\n", "    {\"aten::atan_\", \"\"},\n", "    {\"aten::baddbmm\", \"\"},\n", "    {\"aten::baddbmm_\", \"\"},\n", "    {\"aten::_baddbmm_mkl_\", \"\"},\n", "    {\"aten::bernoulli\", \"\"},\n", "    {\"aten::bernoulli_\", \"Tensor\"},\n", "    {\"aten::bernoulli_\", \"float\"},\n", "    {\"aten::bernoulli\", \"p\"},\n", "    {\"aten::bitwise_not\", \"\"},\n", "    {\"aten::bitwise_not_\", \"\"},\n", "    {\"aten::logical_not\", \"\"},\n", "    {\"aten::logical_not_\", \"\"},\n", "    {\"aten::logical_xor\", \"\"},\n", "    {\"aten::logical_xor_\", \"\"},\n", "    {\"aten::bmm\", \"\"},\n", "    {\"aten::broadcast_tensors\", \"\"},\n", "    {\"aten::cat\", \"\"},\n", "    {\"aten::ceil\", \"\"},\n", "    {\"aten::ceil_\", \"\"},\n", "    {\"aten::chain_matmul\", \"\"},\n", "    {\"aten::chunk\", \"\"},\n", "    {\"aten::clamp\", \"\"},\n", "    {\"aten::clamp_\", \"\"},\n", "    {\"aten::clamp_max\", \"\"},\n", "    {\"aten::clamp_max_\", \"\"},\n", "    {\"aten::clamp_min\", \"\"},\n", "    {\"aten::clamp_min_\", \"\"},\n", "    {\"aten::cudnn_is_acceptable\", \"\"},\n", "    {\"aten::constant_pad_nd\", \"\"},\n", "    {\"aten::conv_tbc\", \"\"},\n", "    {\"aten::conv_tbc_backward\", \"\"},\n", "    {\"aten::copy_\", \"\"},\n", "    {\"aten::_copy_from\", \"\"},\n", "    {\"aten::cos\", \"\"},\n", "    {\"aten::cos_\", \"\"},\n", "    {\"aten::cosh\", \"\"},\n", "    {\"aten::cosh_\", \"\"},\n", "    {\"aten::cosine_embedding_loss\", \"\"},\n", "    {\"aten::cudnn_affine_grid_generator\", \"\"},\n", "    {\"aten::cudnn_affine_grid_generator_backward\", \"\"},\n", "    {\"aten::cudnn_convolution_backward_input\", \"\"},\n", "    {\"aten::cudnn_convolution_backward\", \"\"},\n", "    {\"aten::cudnn_convolution_backward_bias\", \"\"},\n", "    {\"aten::cudnn_convolution_backward_weight\", \"\"},\n", "    {\"aten::cudnn_convolution_transpose_backward\", \"\"},\n", "    {\"aten::cudnn_convolution_transpose_backward_bias\", \"\"},\n", "    {\"aten::cudnn_convolution_transpose_backward_input\", \"\"},\n", "    {\"aten::cudnn_convolution_transpose_backward_weight\", \"\"},\n", "    {\"aten::cudnn_grid_sampler\", \"\"},\n", "    {\"aten::cudnn_grid_sampler_backward\", \"\"},\n", "    {\"aten::ctc_loss\", \"IntList\"},\n", "    {\"aten::ctc_loss\", \"Tensor\"},\n", "    {\"aten::_ctc_loss\", \"\"},\n", "    {\"aten::_ctc_loss_backward\", \"\"},\n", "    {\"aten::det\", \"\"},\n", "    {\"aten::diag_embed\", \"\"},\n", "    {\"aten::diagflat\", \"\"},\n", "    {\"aten::diagonal\", \"\"},\n", "    {\"aten::fill_diagonal_\", \"\"},\n", "    {\"aten::div\", \"Tensor\"},\n", "    {\"aten::div_\", \"Tensor\"},\n", "    {\"aten::div\", \"Scalar\"},\n", "    {\"aten::div_\", \"Scalar\"},\n", "    {\"aten::dot\", \"\"},\n", "    {\"aten::einsum\", \"\"},\n", "    {\"aten::embedding\", \"\"},\n", "    {\"aten::embedding_backward\", \"\"},\n", "    {\"aten::embedding_dense_backward\", \"\"},\n", "    {\"aten::embedding_renorm_\", \"\"},\n", "    {\"aten::embedding_sparse_backward\", \"\"},\n", "    {\"aten::_embedding_bag_per_sample_weights_backward\", \"\"},\n", "    {\"aten::resize_\", \"\"},\n", "    {\"aten::empty_like\", \"\"},\n", "    {\"aten::erf\", \"\"},\n", "    {\"aten::erf_\", \"\"},\n", "    {\"aten::erfc\", \"\"},\n", "    {\"aten::erfc_\", \"\"},\n", "    {\"aten::exp\", \"\"},\n", "    {\"aten::exp_\", \"\"},\n", "    {\"aten::expm1\", \"\"},\n", "    {\"aten::expm1_\", \"\"},\n", "    {\"aten::expand\", \"\"},\n", "    {\"aten::expand_as\", \"\"},\n", "    {\"aten::flatten\", \"using_ints\"},\n", "    {\"aten::fill_\", \"Scalar\"},\n", "    {\"aten::fill_\", \"Tensor\"},\n", "    {\"aten::floor\", \"\"},\n", "    {\"aten::floor_\", \"\"},\n", "    {\"aten::frac\", \"\"},\n", "    {\"aten::frac_\", \"\"},\n", "    {\"aten::full_like\", \"\"},\n", "    {\"aten::grid_sampler\", \"\"},\n", "    {\"aten::grid_sampler_2d\", \"\"},\n", "    {\"aten::grid_sampler_2d_backward\", \"\"},\n", "    {\"aten::grid_sampler_3d\", \"\"},\n", "    {\"aten::grid_sampler_3d_backward\", \"\"},\n", "    {\"aten::hinge_embedding_loss\", \"\"},\n", "    {\"aten::ger\", \"\"},\n", "    {\"aten::fft\", \"\"},\n", "    {\"aten::ifft\", \"\"},\n", "    {\"aten::rfft\", \"\"},\n", "    {\"aten::irfft\", \"\"},\n", "    {\"aten::_fft_with_size\", \"\"},\n", "    {\"aten::_cufft_get_plan_cache_size\", \"\"},\n", "    {\"aten::_cufft_get_plan_cache_max_size\", \"\"},\n", "    {\"aten::index_copy_\", \"\"},\n", "    {\"aten::index_copy\", \"\"},\n", "    {\"aten::inverse\", \"\"},\n", "    {\"aten::_inverse_helper\", \"\"},\n", "    {\"aten::isclose\", \"\"},\n", "    {\"aten::isnan\", \"\"},\n", "    {\"aten::is_distributed\", \"\"},\n", "    {\"aten::is_floating_point\", \"\"},\n", "    {\"aten::is_complex\", \"\"},\n", "    {\"aten::is_nonzero\", \"\"},\n", "    {\"aten::is_same_size\", \"\"},\n", "    {\"aten::is_signed\", \"\"},\n", "    {\"aten::kl_div\", \"\"},\n", "    {\"aten::kl_div_backward\", \"\"},\n", "    {\"aten::kthvalue\", \"\"},\n", "    {\"aten::fbgemm_linear_int8_weight_fp32_activation\", \"\"},\n", "    {\"aten::fbgemm_linear_int8_weight\", \"\"},\n", "    {\"aten::fbgemm_linear_quantize_weight\", \"\"},\n", "    {\"aten::fbgemm_pack_gemm_matrix_fp16\", \"\"},\n", "    {\"aten::fbgemm_linear_fp16_weight_fp32_activation\", \"\"},\n", "    {\"aten::fbgemm_linear_fp16_weight\", \"\"},\n", "    {\"aten::fbgemm_pack_quantized_matrix\", \"\"},\n", "    {\"aten::fbgemm_pack_quantized_matrix\", \"KN\"},\n", "    {\"aten::log\", \"\"},\n", "    {\"aten::log_\", \"\"},\n", "    {\"aten::log10\", \"\"},\n", "    {\"aten::log10_\", \"\"},\n", "    {\"aten::log1p\", \"\"},\n", "    {\"aten::log1p_\", \"\"},\n", "    {\"aten::log2\", \"\"},\n", "    {\"aten::log2_\", \"\"},\n", "    {\"aten::logdet\", \"\"},\n", "    {\"aten::_log_softmax\", \"\"},\n", "    {\"aten::_log_softmax_backward_data\", \"\"},\n", "    {\"aten::logsumexp\", \"\"},\n", "    {\"aten::margin_ranking_loss\", \"\"},\n", "    {\"aten::matmul\", \"\"},\n", "    {\"aten::matrix_rank\", \"tol\"},\n", "    {\"aten::matrix_rank\", \"\"},\n", "    {\"aten::matrix_power\", \"\"},\n", "    {\"aten::max\", \"dim\"},\n", "    {\"aten::max_values\", \"\"},\n", "    {\"aten::max_pool1d_with_indices\", \"\"},\n", "    {\"aten::max_pool1d\", \"\"},\n", "    {\"aten::max_pool2d\", \"\"},\n", "    {\"aten::mkldnn_max_pool2d\", \"\"},\n", "    {\"aten::quantized_max_pool2d\", \"\"},\n", "    {\"aten::max_pool3d\", \"\"},\n", "    {\"aten::median\", \"dim\"},\n", "    {\"aten::min\", \"dim\"},\n", "    {\"aten::min_values\", \"\"},\n", "    {\"aten::mkldnn_convolution_backward_input\", \"\"},\n", "    {\"aten::mkldnn_convolution_backward_weights\", \"\"},\n", "    {\"aten::mkldnn_convolution_backward\", \"\"},\n", "    {\"aten::miopen_convolution_backward_input\", \"\"},\n", "    {\"aten::miopen_convolution_backward\", \"\"},\n", "    {\"aten::miopen_convolution_backward_bias\", \"\"},\n", "    {\"aten::miopen_convolution_backward_weight\", \"\"},\n", "    {\"aten::miopen_convolution_transpose_backward\", \"\"},\n", "    {\"aten::miopen_convolution_transpose_backward_input\", \"\"},\n", "    {\"aten::miopen_convolution_transpose_backward_weight\", \"\"},\n", "    {\"aten::miopen_depthwise_convolution_backward_input\", \"\"},\n", "    {\"aten::miopen_depthwise_convolution_backward\", \"\"},\n", "    {\"aten::miopen_depthwise_convolution_backward_weight\", \"\"},\n", "    {\"aten::mm\", \"\"},\n", "    {\"aten::_sparse_mm\", \"\"},\n", "    {\"aten::mode\", \"\"},\n", "    {\"aten::mul\", \"Tensor\"},\n", "    {\"aten::mul_\", \"Tensor\"},\n", "    {\"aten::mul\", \"Scalar\"},\n", "    {\"aten::mul_\", \"Scalar\"},\n", "    {\"aten::mv\", \"\"},\n", "    {\"aten::mvlgamma\", \"\"},\n", "    {\"aten::mvlgamma_\", \"\"},\n", "    {\"aten::narrow_copy\", \"\"},\n", "    {\"aten::narrow\", \"\"},\n", "    {\"aten::batch_norm_stats\", \"\"},\n", "    {\"aten::_nnpack_available\", \"\"},\n", "    {\"aten::_nnpack_spatial_convolution_backward\", \"\"},\n", "    {\"aten::_nnpack_spatial_convolution_backward_input\", \"\"},\n", "    {\"aten::_nnpack_spatial_convolution_backward_weight\", \"\"},\n", "    {\"aten::ones_like\", \"\"},\n", "    {\"aten::pairwise_distance\", \"\"},\n", "    {\"aten::cdist\", \"\"},\n", "    {\"aten::_cdist_backward\", \"\"},\n", "    {\"aten::pdist\", \"\"},\n", "    {\"aten::_pdist_forward\", \"\"},\n", "    {\"aten::_pdist_backward\", \"\"},\n", "    {\"aten::cosine_similarity\", \"\"},\n", "    {\"aten::permute\", \"\"},\n", "    {\"aten::numpy_T\", \"\"},\n", "    {\"aten::pixel_shuffle\", \"\"},\n", "    {\"aten::is_pinned\", \"\"},\n", "    {\"aten::pin_memory\", \"\"},\n", "    {\"aten::pinverse\", \"\"},\n", "    {\"aten::poisson_nll_loss\", \"\"},\n", "    {\"aten::rand_like\", \"\"},\n", "    {\"aten::randint_like\", \"\"},\n", "    {\"aten::randint_like\", \"low\"},\n", "    {\"aten::randn_like\", \"\"},\n", "    {\"aten::reciprocal\", \"\"},\n", "    {\"aten::reciprocal_\", \"\"},\n", "    {\"aten::neg\", \"\"},\n", "    {\"aten::neg_\", \"\"},\n", "    {\"aten::repeat\", \"\"},\n", "    {\"aten::repeat_interleave\", \"Tensor\"},\n", "    {\"aten::repeat_interleave\", \"self_Tensor\"},\n", "    {\"aten::repeat_interleave\", \"self_int\"},\n", "    {\"aten::reshape\", \"\"},\n", "    {\"aten::_mkldnn_reshape\", \"\"},\n", "    {\"aten::reshape_as\", \"\"},\n", "    {\"aten::round\", \"\"},\n", "    {\"aten::round_\", \"\"},\n", "    {\"aten::rrelu\", \"\"},\n", "    {\"aten::rrelu_\", \"\"},\n", "    {\"aten::relu\", \"\"},\n", "    {\"aten::relu_\", \"\"},\n", "    {\"aten::prelu\", \"\"},\n", "    {\"aten::prelu_backward\", \"\"},\n", "    {\"aten::gelu\", \"\"},\n", "    {\"aten::gelu_backward\", \"\"},\n", "    {\"aten::hardshrink\", \"\"},\n", "    {\"aten::hardshrink_backward\", \"\"},\n", "    {\"aten::rsqrt\", \"\"},\n", "    {\"aten::rsqrt_\", \"\"},\n", "    {\"aten::select\", \"int\"},\n", "    {\"aten::selu\", \"\"},\n", "    {\"aten::selu_\", \"\"},\n", "    {\"aten::celu\", \"\"},\n", "    {\"aten::celu_\", \"\"},\n", "    {\"aten::sigmoid\", \"\"},\n", "    {\"aten::sigmoid_\", \"\"},\n", "    {\"aten::sin\", \"\"},\n", "    {\"aten::sin_\", \"\"},\n", "    {\"aten::sinh\", \"\"},\n", "    {\"aten::sinh_\", \"\"},\n", "    {\"aten::detach\", \"\"},\n", "    {\"aten::detach_\", \"\"},\n", "    {\"aten::size\", \"int\"},\n", "    {\"aten::slice\", \"Tensor\"},\n", "    {\"aten::slogdet\", \"\"},\n", "    {\"aten::smm\", \"\"},\n", "    {\"aten::_softmax\", \"\"},\n", "    {\"aten::_softmax_backward_data\", \"\"},\n", "    {\"aten::split\", \"Tensor\"},\n", "    {\"aten::split_with_sizes\", \"\"},\n", "    {\"aten::squeeze\", \"\"},\n", "    {\"aten::squeeze\", \"dim\"},\n", "    {\"aten::squeeze_\", \"\"},\n", "    {\"aten::squeeze_\", \"dim\"},\n", "    {\"aten::sspaddmm\", \"\"},\n", "    {\"aten::stack\", \"\"},\n", "    {\"aten::stride\", \"int\"},\n", "    {\"aten::sum_to_size\", \"\"},\n", "    {\"aten::sqrt\", \"\"},\n", "    {\"aten::sqrt_\", \"\"},\n", "    {\"aten::std\", \"\"},\n", "    {\"aten::std\", \"dim\"},\n", "    {\"aten::std_mean\", \"\"},\n", "    {\"aten::std_mean\", \"dim\"},\n", "    {\"aten::t\", \"\"},\n", "    {\"aten::t_\", \"\"},\n", "    {\"aten::tan\", \"\"},\n", "    {\"aten::tan_\", \"\"},\n", "    {\"aten::tanh\", \"\"},\n", "    {\"aten::tanh_\", \"\"},\n", "    {\"aten::tensordot\", \"\"},\n", "    {\"aten::threshold\", \"\"},\n", "    {\"aten::threshold_\", \"\"},\n", "    {\"aten::threshold_backward\", \"\"},\n", "    {\"aten::transpose\", \"int\"},\n", "    {\"aten::_mkldnn_transpose\", \"\"},\n", "    {\"aten::transpose_\", \"\"},\n", "    {\"aten::_mkldnn_transpose_\", \"\"},\n", "    {\"aten::one_hot\", \"\"},\n", "    {\"aten::flip\", \"\"},\n", "    {\"aten::roll\", \"\"},\n", "    {\"aten::rot90\", \"\"},\n", "    {\"aten::trapz\", \"x\"},\n", "    {\"aten::trapz\", \"dx\"},\n", "    {\"aten::_trilinear\", \"\"},\n", "    {\"aten::triplet_margin_loss\", \"\"},\n", "    {\"aten::trunc\", \"\"},\n", "    {\"aten::trunc_\", \"\"},\n", "    {\"aten::type_as\", \"\"},\n", "    {\"aten::_has_compatible_shallow_copy_type\", \"\"},\n", "    {\"aten::_unique\", \"\"},\n", "    {\"aten::unique_dim\", \"\"},\n", "    {\"aten::unique_consecutive\", \"\"},\n", "    {\"aten::unique_dim_consecutive\", \"\"},\n", "    {\"aten::_unique2\", \"\"},\n", "    {\"aten::_unsafe_view\", \"\"},\n", "    {\"aten::unsqueeze\", \"\"},\n", "    {\"aten::unsqueeze_\", \"\"},\n", "    {\"aten::var\", \"\"},\n", "    {\"aten::var\", \"dim\"},\n", "    {\"aten::var_mean\", \"\"},\n", "    {\"aten::var_mean\", \"dim\"},\n", "    {\"aten::view_as\", \"\"},\n", "    {\"aten::where\", \"self\"},\n", "    {\"aten::where\", \"\"},\n", "    {\"aten::_s_where\", \"\"},\n", "    {\"aten::norm_except_dim\", \"\"},\n", "    {\"aten::_weight_norm\", \"\"},\n", "    {\"aten::_weight_norm_cuda_interface\", \"\"},\n", "    {\"aten::_weight_norm_cuda_interface_backward\", \"\"},\n", "    {\"aten::_weight_norm_differentiable_backward\", \"\"},\n", "    {\"aten::zeros_like\", \"\"},\n", "    {\"aten::_standard_gamma_grad\", \"\"},\n", "    {\"aten::_standard_gamma\", \"\"},\n", "    {\"aten::_dirichlet_grad\", \"\"},\n", "    {\"aten::_sample_dirichlet\", \"\"},\n", "    {\"aten::poisson\", \"\"},\n", "    {\"aten::native_norm\", \"\"},\n", "    {\"aten::_sparse_sum\", \"\"},\n", "    {\"aten::_sparse_sum\", \"dim\"},\n", "    {\"aten::_sparse_sum_backward\", \"\"},\n", "    {\"aten::norm\", \"Scalar\"},\n", "    {\"aten::norm\", \"ScalarOpt_dim\"},\n", "    {\"aten::frobenius_norm\", \"\"},\n", "    {\"aten::frobenius_norm\", \"dim\"},\n", "    {\"aten::nuclear_norm\", \"\"},\n", "    {\"aten::nuclear_norm\", \"dim\"},\n", "    {\"aten::clone\", \"\"},\n", "    {\"aten::resize_as_\", \"\"},\n", "    {\"aten::pow\", \"Tensor_Scalar\"},\n", "    {\"aten::zero_\", \"\"},\n", "    {\"aten::sub\", \"Tensor\"},\n", "    {\"aten::sub_\", \"Tensor\"},\n", "    {\"aten::sub\", \"Scalar\"},\n", "    {\"aten::sub_\", \"Scalar\"},\n", "    {\"aten::rsub\", \"Tensor\"},\n", "    {\"aten::rsub\", \"Scalar\"},\n", "    {\"aten::_sparse_addmm\", \"\"},\n", "    {\"aten::addmm\", \"\"},\n", "    {\"aten::addmm_\", \"\"},\n", "    {\"aten::sparse_resize_\", \"\"},\n", "    {\"aten::sparse_resize_and_clear_\", \"\"},\n", "    {\"aten::sparse_mask\", \"\"},\n", "    {\"aten::to_dense\", \"\"},\n", "    {\"aten::to_dense_backward\", \"\"},\n", "    {\"aten::sparse_dim\", \"\"},\n", "    {\"aten::_dimI\", \"\"},\n", "    {\"aten::dense_dim\", \"\"},\n", "    {\"aten::_dimV\", \"\"},\n", "    {\"aten::_nnz\", \"\"},\n", "    {\"aten::coalesce\", \"\"},\n", "    {\"aten::is_coalesced\", \"\"},\n", "    {\"aten::_indices\", \"\"},\n", "    {\"aten::_values\", \"\"},\n", "    {\"aten::_coalesced_\", \"\"},\n", "    {\"aten::indices\", \"\"},\n", "    {\"aten::values\", \"\"},\n", "    {\"aten::hspmm\", \"\"},\n", "    {\"aten::copy_sparse_to_sparse_\", \"\"},\n", "    {\"aten::numel\", \"\"},\n", "    {\"aten::unbind\", \"int\"},\n", "    {\"aten::to_sparse\", \"sparse_dim\"},\n", "    {\"aten::to_sparse\", \"\"},\n", "    {\"aten::to_mkldnn\", \"\"},\n", "    {\"aten::mkldnn_reorder_conv2d_weight\", \"\"},\n", "    {\"aten::to_mkldnn_backward\", \"\"},\n", "    {\"aten::dequantize\", \"\"},\n", "    {\"aten::q_scale\", \"\"},\n", "    {\"aten::q_zero_point\", \"\"},\n", "    {\"aten::q_per_channel_scales\", \"\"},\n", "    {\"aten::q_per_channel_zero_points\", \"\"},\n", "    {\"aten::int_repr\", \"\"},\n", "    {\"aten::_make_per_tensor_quantized_tensor\", \"\"},\n", "    {\"aten::_make_per_channel_quantized_tensor\", \"\"},\n", "    {\"aten::fake_quantize_per_tensor_affine\", \"\"},\n", "    {\"aten::fake_quantize_per_tensor_affine_backward\", \"\"},\n", "    {\"aten::to\", \"other\"},\n", "    {\"aten::meshgrid\", \"\"},\n", "    {\"aten::cartesian_prod\", \"\"},\n", "    {\"aten::combinations\", \"\"},\n", "    {\"aten::item\", \"\"},\n", "    {\"aten::_local_scalar_dense\", \"\"},\n", "    {\"aten::_thnn_fused_gru_cell_backward\", \"\"},\n", "    {\"aten::lstm\", \"input\"},\n", "    {\"aten::lstm\", \"data\"},\n", "    {\"aten::gru\", \"input\"},\n", "    {\"aten::gru\", \"data\"},\n", "    {\"aten::rnn_tanh\", \"input\"},\n", "    {\"aten::rnn_tanh\", \"data\"},\n", "    {\"aten::rnn_relu\", \"input\"},\n", "    {\"aten::rnn_relu\", \"data\"},\n", "    {\"aten::quantized_gru\", \"input\"},\n", "    {\"aten::quantized_gru\", \"data\"},\n", "    {\"aten::quantized_lstm_cell\", \"\"},\n", "    {\"aten::quantized_gru_cell\", \"\"},\n", "    {\"aten::quantized_rnn_relu_cell\", \"\"},\n", "    {\"aten::quantized_rnn_tanh_cell\", \"\"},\n", "    {\"aten::_pack_padded_sequence\", \"\"},\n", "    {\"aten::_pack_padded_sequence_backward\", \"\"},\n", "    {\"aten::_pad_packed_sequence\", \"\"},\n", "    {\"aten::set_\", \"source_Tensor\"},\n", "    {\"aten::set_\", \"\"},\n", "    {\"aten::is_set_to\", \"\"},\n", "    {\"aten::masked_fill_\", \"Scalar\"},\n", "    {\"aten::masked_fill\", \"Scalar\"},\n", "    {\"aten::masked_fill_\", \"Tensor\"},\n", "    {\"aten::masked_fill\", \"Tensor\"},\n", "    {\"aten::masked_scatter_\", \"\"},\n", "    {\"aten::masked_scatter\", \"\"},\n", "    {\"aten::view\", \"\"},\n", "    {\"aten::put_\", \"\"},\n", "    {\"aten::index_add_\", \"\"},\n", "    {\"aten::index_add\", \"\"},\n", "    {\"aten::index_fill_\", \"Scalar\"},\n", "    {\"aten::index_fill\", \"Scalar\"},\n", "    {\"aten::index_fill_\", \"Tensor\"},\n", "    {\"aten::index_fill\", \"Tensor\"},\n", "    {\"aten::scatter_\", \"src\"},\n", "    {\"aten::scatter\", \"src\"},\n", "    {\"aten::scatter_\", \"value\"},\n", "    {\"aten::scatter\", \"value\"},\n", "    {\"aten::scatter_add_\", \"\"},\n", "    {\"aten::scatter_add\", \"\"},\n", "    {\"aten::lt_\", \"Scalar\"},\n", "    {\"aten::lt_\", \"Tensor\"},\n", "    {\"aten::gt_\", \"Scalar\"},\n", "    {\"aten::gt_\", \"Tensor\"},\n", "    {\"aten::le_\", \"Scalar\"},\n", "    {\"aten::le_\", \"Tensor\"},\n", "    {\"aten::ge_\", \"Scalar\"},\n", "    {\"aten::ge_\", \"Tensor\"},\n", "    {\"aten::eq_\", \"Scalar\"},\n", "    {\"aten::eq_\", \"Tensor\"},\n", "    {\"aten::ne_\", \"Scalar\"},\n", "    {\"aten::ne_\", \"Tensor\"},\n", "    {\"aten::__and__\", \"Scalar\"},\n", "    {\"aten::__and__\", \"Tensor\"},\n", "    {\"aten::__iand__\", \"Scalar\"},\n", "    {\"aten::__iand__\", \"Tensor\"},\n", "    {\"aten::__or__\", \"Scalar\"},\n", "    {\"aten::__or__\", \"Tensor\"},\n", "    {\"aten::__ior__\", \"Scalar\"},\n", "    {\"aten::__ior__\", \"Tensor\"},\n", "    {\"aten::__xor__\", \"Scalar\"},\n", "    {\"aten::__xor__\", \"Tensor\"},\n", "    {\"aten::__ixor__\", \"Scalar\"},\n", "    {\"aten::__ixor__\", \"Tensor\"},\n", "    {\"aten::__lshift__\", \"Scalar\"},\n", "    {\"aten::__lshift__\", \"Tensor\"},\n", "    {\"aten::__ilshift__\", \"Scalar\"},\n", "    {\"aten::__ilshift__\", \"Tensor\"},\n", "    {\"aten::__rshift__\", \"Scalar\"},\n", "    {\"aten::__rshift__\", \"Tensor\"},\n", "    {\"aten::__irshift__\", \"Scalar\"},\n", "    {\"aten::__irshift__\", \"Tensor\"},\n", "    {\"aten::lgamma_\", \"\"},\n", "    {\"aten::atan2_\", \"\"},\n", "    {\"aten::tril_\", \"\"},\n", "    {\"aten::triu_\", \"\"},\n", "    {\"aten::digamma_\", \"\"},\n", "    {\"aten::polygamma_\", \"\"},\n", "    {\"aten::renorm_\", \"\"},\n", "    {\"aten::pow_\", \"Scalar\"},\n", "    {\"aten::pow_\", \"Tensor\"},\n", "    {\"aten::lerp_\", \"Scalar\"},\n", "    {\"aten::lerp_\", \"Tensor\"},\n", "    {\"aten::fmod_\", \"Scalar\"},\n", "    {\"aten::fmod_\", \"Tensor\"},\n", "    {\"aten::remainder_\", \"Scalar\"},\n", "    {\"aten::remainder_\", \"Tensor\"},\n", "    {\"aten::addbmm_\", \"\"},\n", "    {\"aten::addbmm\", \"\"},\n", "    {\"aten::addcdiv_\", \"\"},\n", "    {\"aten::random_\", \"from\"},\n", "    {\"aten::random_\", \"to\"},\n", "    {\"aten::random_\", \"\"},\n", "    {\"aten::uniform_\", \"\"},\n", "    {\"aten::normal_\", \"\"},\n", "    {\"aten::cauchy_\", \"\"},\n", "    {\"aten::log_normal_\", \"\"},\n", "    {\"aten::exponential_\", \"\"},\n", "    {\"aten::geometric_\", \"\"},\n", "    {\"aten::diag\", \"\"},\n", "    {\"aten::cross\", \"\"},\n", "    {\"aten::triu\", \"\"},\n", "    {\"aten::tril\", \"\"},\n", "    {\"aten::trace\", \"\"},\n", "    {\"aten::ne\", \"Scalar\"},\n", "    {\"aten::ne\", \"Tensor\"},\n", "    {\"aten::eq\", \"Scalar\"},\n", "    {\"aten::eq\", \"Tensor\"},\n", "    {\"aten::ge\", \"Scalar\"},\n", "    {\"aten::ge\", \"Tensor\"},\n", "    {\"aten::le\", \"Scalar\"},\n", "    {\"aten::le\", \"Tensor\"},\n", "    {\"aten::gt\", \"Scalar\"},\n", "    {\"aten::gt\", \"Tensor\"},\n", "    {\"aten::lt\", \"Scalar\"},\n", "    {\"aten::lt\", \"Tensor\"},\n", "    {\"aten::take\", \"\"},\n", "    {\"aten::index_select\", \"\"},\n", "    {\"aten::masked_select\", \"\"},\n", "    {\"aten::nonzero\", \"\"},\n", "    {\"aten::nonzero_numpy\", \"\"},\n", "    {\"aten::gather\", \"\"},\n", "    {\"aten::_gather_sparse_backward\", \"\"},\n", "    {\"aten::addcmul\", \"\"},\n", "    {\"aten::addcmul_\", \"\"},\n", "    {\"aten::addcdiv\", \"\"},\n", "    {\"aten::lstsq\", \"\"},\n", "    {\"aten::triangular_solve\", \"\"},\n", "    {\"aten::_triangular_solve_helper\", \"\"},\n", "    {\"aten::symeig\", \"\"},\n", "    {\"aten::_symeig_helper\", \"\"},\n", "    {\"aten::eig\", \"\"},\n", "    {\"aten::svd\", \"\"},\n", "    {\"aten::_svd_helper\", \"\"},\n", "    {\"aten::cholesky\", \"\"},\n", "    {\"aten::_cholesky_helper\", \"\"},\n", "    {\"aten::cholesky_solve\", \"\"},\n", "    {\"aten::_cholesky_solve_helper\", \"\"},\n", "    {\"aten::solve\", \"\"},\n", "    {\"aten::_solve_helper\", \"\"},\n", "    {\"aten::cholesky_inverse\", \"\"},\n", "    {\"aten::qr\", \"\"},\n", "    {\"aten::_qr_helper\", \"\"},\n", "    {\"aten::geqrf\", \"\"},\n", "    {\"aten::orgqr\", \"\"},\n", "    {\"aten::ormqr\", \"\"},\n", "    {\"aten::_lu_with_info\", \"\"},\n", "    {\"aten::lu_solve\", \"\"},\n", "    {\"aten::_lu_solve_helper\", \"\"},\n", "    {\"aten::multinomial\", \"\"},\n", "    {\"aten::_multinomial_alias_setup\", \"\"},\n", "    {\"aten::_multinomial_alias_draw\", \"\"},\n", "    {\"aten::lgamma\", \"\"},\n", "    {\"aten::digamma\", \"\"},\n", "    {\"aten::polygamma\", \"\"},\n", "    {\"aten::erfinv\", \"\"},\n", "    {\"aten::erfinv_\", \"\"},\n", "    {\"aten::sign\", \"\"},\n", "    {\"aten::sign_\", \"\"},\n", "    {\"aten::dist\", \"\"},\n", "    {\"aten::atan2\", \"\"},\n", "    {\"aten::lerp\", \"Scalar\"},\n", "    {\"aten::lerp\", \"Tensor\"},\n", "    {\"aten::histc\", \"\"},\n", "    {\"aten::fmod\", \"Scalar\"},\n", "    {\"aten::fmod\", \"Tensor\"},\n", "    {\"aten::remainder\", \"Scalar\"},\n", "    {\"aten::remainder\", \"Tensor\"},\n", "    {\"aten::min\", \"other\"},\n", "    {\"aten::min\", \"\"},\n", "    {\"aten::max\", \"other\"},\n", "    {\"aten::max\", \"\"},\n", "    {\"aten::median\", \"\"},\n", "    {\"aten::sort\", \"\"},\n", "    {\"aten::argsort\", \"\"},\n", "    {\"aten::topk\", \"\"},\n", "    {\"aten::all\", \"\"},\n", "    {\"aten::any\", \"\"},\n", "    {\"aten::renorm\", \"\"},\n", "    {\"aten::unfold\", \"\"},\n", "    {\"aten::equal\", \"\"},\n", "    {\"aten::pow\", \"Tensor_Tensor\"},\n", "    {\"aten::pow\", \"Scalar\"},\n", "    {\"aten::normal\", \"Tensor_float\"},\n", "    {\"aten::normal\", \"float_Tensor\"},\n", "    {\"aten::normal\", \"Tensor_Tensor\"},\n", "    {\"aten::alias\", \"\"},\n", "    {\"aten::_addr\", \"\"},\n", "    {\"aten::_addr_\", \"\"},\n", "    {\"aten::_index_copy_\", \"\"},\n", "    {\"aten::_cumsum\", \"\"},\n", "    {\"aten::_cumprod\", \"\"},\n", "    {\"aten::_var\", \"\"},\n", "    {\"aten::_std\", \"\"},\n", "    {\"aten::_cat\", \"\"},\n", "    {\"aten::_mode\", \"\"},\n", "    {\"aten::_max\", \"\"},\n", "    {\"aten::_min\", \"\"},\n", "    {\"aten::mse_loss\", \"\"},\n", "    {\"aten::mse_loss_backward\", \"\"},\n", "    {\"aten::l1_loss\", \"\"},\n", "    {\"aten::l1_loss_backward\", \"\"},\n", "    {\"aten::multilabel_margin_loss\", \"\"},\n", "    {\"aten::multilabel_margin_loss_forward\", \"\"},\n", "    {\"aten::multilabel_margin_loss_backward\", \"\"},\n", "    {\"aten::smooth_l1_loss\", \"\"},\n", "    {\"aten::smooth_l1_loss_backward\", \"\"},\n", "    {\"aten::soft_margin_loss\", \"\"},\n", "    {\"aten::soft_margin_loss_backward\", \"\"},\n", "    {\"aten::elu\", \"\"},\n", "    {\"aten::elu_backward\", \"\"},\n", "    {\"aten::elu_\", \"\"},\n", "    {\"aten::glu\", \"\"},\n", "    {\"aten::glu_backward\", \"\"},\n", "    {\"aten::hardtanh\", \"\"},\n", "    {\"aten::hardtanh_backward\", \"\"},\n", "    {\"aten::hardtanh_\", \"\"},\n", "    {\"aten::leaky_relu\", \"\"},\n", "    {\"aten::leaky_relu_backward\", \"\"},\n", "    {\"aten::leaky_relu_\", \"\"},\n", "    {\"aten::log_sigmoid\", \"\"},\n", "    {\"aten::log_sigmoid_forward\", \"\"},\n", "    {\"aten::log_sigmoid_backward\", \"\"},\n", "    {\"aten::rrelu_with_noise\", \"\"},\n", "    {\"aten::rrelu_with_noise_backward\", \"\"},\n", "    {\"aten::rrelu_with_noise_\", \"\"},\n", "    {\"aten::softplus\", \"\"},\n", "    {\"aten::softplus_backward\", \"\"},\n", "    {\"aten::softshrink\", \"\"},\n", "    {\"aten::softshrink_backward\", \"\"},\n", "    {\"aten::adaptive_avg_pool2d\", \"\"},\n", "    {\"aten::mkldnn_adaptive_avg_pool2d\", \"\"},\n", "    {\"aten::_adaptive_avg_pool2d\", \"\"},\n", "    {\"aten::_adaptive_avg_pool2d_backward\", \"\"},\n", "    {\"aten::adaptive_avg_pool3d\", \"\"},\n", "    {\"aten::adaptive_avg_pool3d_backward\", \"\"},\n", "    {\"aten::adaptive_max_pool2d\", \"\"},\n", "    {\"aten::adaptive_max_pool2d_backward\", \"\"},\n", "    {\"aten::adaptive_max_pool3d\", \"\"},\n", "    {\"aten::adaptive_max_pool3d_backward\", \"\"},\n", "    {\"aten::avg_pool2d\", \"\"},\n", "    {\"aten::avg_pool2d_backward\", \"\"},\n", "    {\"aten::avg_pool3d\", \"\"},\n", "    {\"aten::avg_pool3d_backward\", \"\"},\n", "    {\"aten::fractional_max_pool2d\", \"\"},\n", "    {\"aten::fractional_max_pool2d_backward\", \"\"},\n", "    {\"aten::fractional_max_pool3d\", \"\"},\n", "    {\"aten::fractional_max_pool3d_backward\", \"\"},\n", "    {\"aten::max_pool2d_with_indices\", \"\"},\n", "    {\"aten::max_pool2d_with_indices_backward\", \"\"},\n", "    {\"aten::max_pool3d_with_indices\", \"\"},\n", "    {\"aten::max_pool3d_with_indices_backward\", \"\"},\n", "    {\"aten::max_unpool2d\", \"\"},\n", "    {\"aten::max_unpool2d_backward\", \"\"},\n", "    {\"aten::max_unpool3d\", \"\"},\n", "    {\"aten::max_unpool3d_backward\", \"\"},\n", "    {\"aten::reflection_pad1d\", \"\"},\n", "    {\"aten::reflection_pad1d_backward\", \"\"},\n", "    {\"aten::reflection_pad2d\", \"\"},\n", "    {\"aten::reflection_pad2d_backward\", \"\"},\n", "    {\"aten::replication_pad1d\", \"\"},\n", "    {\"aten::replication_pad1d_backward\", \"\"},\n", "    {\"aten::replication_pad2d\", \"\"},\n", "    {\"aten::replication_pad2d_backward\", \"\"},\n", "    {\"aten::replication_pad3d\", \"\"},\n", "    {\"aten::replication_pad3d_backward\", \"\"},\n", "    {\"aten::upsample_linear1d\", \"\"},\n", "    {\"aten::upsample_linear1d_backward\", \"\"},\n", "    {\"aten::upsample_bilinear2d\", \"\"},\n", "    {\"aten::upsample_bilinear2d_backward\", \"\"},\n", "    {\"aten::upsample_bicubic2d\", \"\"},\n", "    {\"aten::upsample_bicubic2d_backward\", \"\"},\n", "    {\"aten::upsample_trilinear3d\", \"\"},\n", "    {\"aten::upsample_trilinear3d_backward\", \"\"},\n", "    {\"aten::upsample_nearest1d\", \"\"},\n", "    {\"aten::upsample_nearest1d_backward\", \"\"},\n", "    {\"aten::upsample_nearest2d\", \"\"},\n", "    {\"aten::upsample_nearest2d_backward\", \"\"},\n", "    {\"aten::upsample_nearest3d\", \"\"},\n", "    {\"aten::upsample_nearest3d_backward\", \"\"},\n", "    {\"aten::sigmoid_backward\", \"\"},\n", "    {\"aten::tanh_backward\", \"\"},\n", "    {\"aten::slow_conv_transpose2d_backward\", \"output_mask\"},\n", "    {\"aten::slow_conv_transpose3d_backward\", \"output_mask\"},\n", "    {\"aten::thnn_conv2d_backward\", \"output_mask\"},\n", "    {\"aten::thnn_conv_depthwise2d_backward\", \"output_mask\"},\n", "    {\"aten::thnn_conv3d_backward\", \"output_mask\"},\n", "    {\"aten::slow_conv_dilated2d_backward\", \"\"},\n", "    {\"aten::slow_conv_dilated3d_backward\", \"\"},\n", "    {\"aten::col2im\", \"\"},\n", "    {\"aten::col2im_backward\", \"\"},\n", "    {\"aten::im2col\", \"\"},\n", "    {\"aten::im2col_backward\", \"\"},\n"], "c10_ops_not_moved_from_aten_to_c10_yet": ["    {\"aten::backward\", \"\"},\n", "    {\"aten::set_data\", \"\"},\n", "    {\"aten::is_leaf\", \"\"},\n", "    {\"aten::output_nr\", \"\"},\n", "    {\"aten::_version\", \"\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::rename_\", \"\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::rename\", \"\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::align_to\", \"\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::refine_names\", \"\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::unflatten\", \"\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::unflatten\", \"\"},\n#endif", "    {\"aten::_cudnn_rnn\", \"\"},\n", "    {\"aten::_cudnn_rnn_backward\", \"\"},\n", "    {\"aten::_cudnn_init_dropout_state\", \"\"},\n", "    {\"aten::_sobol_engine_draw\", \"\"},\n", "    {\"aten::abs\", \"out\"},\n", "    {\"aten::acos\", \"out\"},\n", "    {\"aten::add\", \"out\"},\n", "    {\"aten::addmv\", \"out\"},\n", "    {\"aten::addr\", \"out\"},\n", "    {\"aten::all\", \"out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::all\", \"dimname\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::all\", \"dimname_out\"},\n#endif", "    {\"aten::any\", \"out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::any\", \"dimname\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::any\", \"dimname_out\"},\n#endif", "    {\"aten::arange\", \"\"},\n", "    {\"aten::arange\", \"start\"},\n", "    {\"aten::arange\", \"start_step\"},\n", "    {\"aten::arange\", \"out\"},\n", "    {\"aten::arange\", \"start_out\"},\n", "    {\"aten::asin\", \"out\"},\n", "    {\"aten::atan\", \"out\"},\n", "    {\"aten::baddbmm\", \"out\"},\n", "    {\"aten::bartlett_window\", \"\"},\n", "    {\"aten::bartlett_window\", \"periodic\"},\n", "    {\"aten::batch_norm\", \"\"},\n", "    {\"aten::_batch_norm_impl_index\", \"\"},\n", "    {\"aten::_batch_norm_impl_index_backward\", \"\"},\n", "    {\"aten::bernoulli\", \"out\"},\n", "    {\"aten::bilinear\", \"\"},\n", "    {\"aten::binary_cross_entropy_with_logits\", \"\"},\n", "    {\"aten::binary_cross_entropy_with_logits_backward\", \"\"},\n", "    {\"aten::bincount\", \"\"},\n", "    {\"aten::bitwise_not\", \"out\"},\n", "    {\"aten::logical_not\", \"out\"},\n", "    {\"aten::logical_xor\", \"out\"},\n", "    {\"aten::blackman_window\", \"\"},\n", "    {\"aten::blackman_window\", \"periodic\"},\n", "    {\"aten::bmm\", \"out\"},\n", "    {\"aten::cat\", \"out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::cat\", \"names\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::cat\", \"names_out\"},\n#endif", "    {\"aten::ceil\", \"out\"},\n", "    {\"aten::clamp\", \"out\"},\n", "    {\"aten::clamp_max\", \"out\"},\n", "    {\"aten::clamp_min\", \"out\"},\n", "    {\"aten::contiguous\", \"\"},\n", "    {\"aten::convolution\", \"\"},\n", "    {\"aten::convolution_overrideable\", \"\"},\n", "    {\"aten::convolution_backward_overrideable\", \"\"},\n", "    {\"aten::_convolution\", \"\"},\n", "    {\"aten::_convolution_nogroup\", \"\"},\n", "    {\"aten::_convolution_double_backward\", \"\"},\n", "    {\"aten::conv1d\", \"\"},\n", "    {\"aten::conv2d\", \"\"},\n", "    {\"aten::conv3d\", \"\"},\n", "    {\"aten::conv_transpose1d\", \"\"},\n", "    {\"aten::conv_transpose2d\", \"input\"},\n", "    {\"aten::conv_transpose3d\", \"input\"},\n", "    {\"aten::cos\", \"out\"},\n", "    {\"aten::cosh\", \"out\"},\n", "    {\"aten::cudnn_batch_norm\", \"\"},\n", "    {\"aten::cudnn_batch_norm_backward\", \"\"},\n", "    {\"aten::cudnn_convolution\", \"\"},\n", "    {\"aten::cudnn_convolution_transpose\", \"\"},\n", "    {\"aten::cumsum\", \"\"},\n", "    {\"aten::cumsum\", \"out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::cumsum\", \"dimname\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::cumsum\", \"dimname_out\"},\n#endif", "    {\"aten::cumprod\", \"\"},\n", "    {\"aten::cumprod\", \"out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::cumprod\", \"dimname\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::cumprod\", \"dimname_out\"},\n#endif", "    {\"aten::div\", \"out\"},\n", "    {\"aten::dot\", \"out\"},\n", "    {\"aten::embedding_bag\", \"\"},\n", "    {\"aten::_embedding_bag\", \"\"},\n", "    {\"aten::_embedding_bag_backward\", \"\"},\n", "    {\"aten::_embedding_bag_sparse_backward\", \"\"},\n", "    {\"aten::_embedding_bag_dense_backward\", \"\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::empty\", \"names\"},\n#endif", "    {\"aten::empty\", \"memory_format\"},\n", "    {\"aten::new_empty\", \"\"},\n", "    {\"aten::new_full\", \"\"},\n", "    {\"aten::_empty_affine_quantized\", \"\"},\n", "    {\"aten::_empty_per_channel_affine_quantized\", \"\"},\n", "    {\"aten::empty\", \"out\"},\n", "    {\"aten::empty_like\", \"dtype\"},\n", "    {\"aten::empty_strided\", \"\"},\n", "    {\"aten::erf\", \"out\"},\n", "    {\"aten::erfc\", \"out\"},\n", "    {\"aten::exp\", \"out\"},\n", "    {\"aten::expm1\", \"out\"},\n", "    {\"aten::eye\", \"\"},\n", "    {\"aten::eye\", \"m\"},\n", "    {\"aten::eye\", \"out\"},\n", "    {\"aten::eye\", \"m_out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::flatten\", \"named_out_dim\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::flatten\", \"using_names\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::flatten\", \"DimnameList\"},\n#endif", "    {\"aten::floor\", \"out\"},\n", "    {\"aten::frac\", \"out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::full\", \"names\"},\n#endif", "    {\"aten::full\", \"\"},\n", "    {\"aten::full\", \"out\"},\n", "    {\"aten::full_like\", \"dtype\"},\n", "    {\"aten::from_file\", \"\"},\n", "    {\"aten::hann_window\", \"\"},\n", "    {\"aten::hann_window\", \"periodic\"},\n", "    {\"aten::hamming_window\", \"\"},\n", "    {\"aten::hamming_window\", \"periodic\"},\n", "    {\"aten::hamming_window\", \"periodic_alpha\"},\n", "    {\"aten::hamming_window\", \"periodic_alpha_beta\"},\n", "    {\"aten::ger\", \"out\"},\n", "    {\"aten::group_norm\", \"\"},\n", "    {\"aten::_cufft_set_plan_cache_max_size\", \"\"},\n", "    {\"aten::_cufft_clear_plan_cache\", \"\"},\n", "    {\"aten::index\", \"Tensor\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::index_copy_\", \"dimname\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::index_copy\", \"dimname\"},\n#endif", "    {\"aten::index_put_\", \"\"},\n", "    {\"aten::index_put\", \"\"},\n", "    {\"aten::_index_put_impl_\", \"\"},\n", "    {\"aten::instance_norm\", \"\"},\n", "    {\"aten::inverse\", \"out\"},\n", "    {\"aten::kthvalue\", \"values\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::kthvalue\", \"dimname\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::kthvalue\", \"dimname_out\"},\n#endif", "    {\"aten::layer_norm\", \"\"},\n", "    {\"aten::native_layer_norm\", \"\"},\n", "    {\"aten::native_layer_norm_backward\", \"\"},\n", "    {\"aten::native_layer_norm_double_backward\", \"\"},\n", "    {\"aten::linear\", \"\"},\n", "    {\"aten::mkldnn_linear\", \"\"},\n", "    {\"aten::linspace\", \"\"},\n", "    {\"aten::linspace\", \"out\"},\n", "    {\"aten::log\", \"out\"},\n", "    {\"aten::log10\", \"out\"},\n", "    {\"aten::log1p\", \"out\"},\n", "    {\"aten::log2\", \"out\"},\n", "    {\"aten::logspace\", \"\"},\n", "    {\"aten::logspace\", \"out\"},\n", "    {\"aten::log_softmax\", \"\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::log_softmax\", \"\"},\n#endif", "    {\"aten::logsumexp\", \"out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::logsumexp\", \"names\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::logsumexp\", \"names_out\"},\n#endif", "    {\"aten::matmul\", \"out\"},\n", "    {\"aten::max\", \"dim_max\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::max\", \"names_dim\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::max\", \"names_dim_max\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::max_values\", \"names\"},\n#endif", "    {\"aten::mean\", \"\"},\n", "    {\"aten::mean\", \"dim\"},\n", "    {\"aten::mean\", \"out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::mean\", \"names_dim\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::mean\", \"names_out\"},\n#endif", "    {\"aten::median\", \"dim_values\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::median\", \"names_dim\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::median\", \"names_dim_values\"},\n#endif", "    {\"aten::min\", \"dim_min\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::min\", \"names_dim\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::min\", \"names_dim_min\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::min_values\", \"names\"},\n#endif", "    {\"aten::mkldnn_convolution\", \"\"},\n", "    {\"aten::miopen_batch_norm\", \"\"},\n", "    {\"aten::miopen_batch_norm_backward\", \"\"},\n", "    {\"aten::miopen_convolution\", \"\"},\n", "    {\"aten::miopen_convolution_transpose\", \"\"},\n", "    {\"aten::miopen_depthwise_convolution\", \"\"},\n", "    {\"aten::miopen_rnn\", \"\"},\n", "    {\"aten::miopen_rnn_backward\", \"\"},\n", "    {\"aten::mm\", \"out\"},\n", "    {\"aten::mode\", \"values\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::mode\", \"dimname\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::mode\", \"dimname_out\"},\n#endif", "    {\"aten::mul\", \"out\"},\n", "    {\"aten::mv\", \"out\"},\n", "    {\"aten::native_batch_norm\", \"\"},\n", "    {\"aten::batch_norm_elemt\", \"\"},\n", "    {\"aten::batch_norm_gather_stats\", \"\"},\n", "    {\"aten::batch_norm_gather_stats_with_counts\", \"\"},\n", "    {\"aten::native_batch_norm_backward\", \"\"},\n", "    {\"aten::batch_norm_backward_reduce\", \"\"},\n", "    {\"aten::batch_norm_backward_elemt\", \"\"},\n", "    {\"aten::batch_norm_update_stats\", \"\"},\n", "    {\"aten::_nnpack_spatial_convolution\", \"\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::ones\", \"names\"},\n#endif", "    {\"aten::ones\", \"\"},\n", "    {\"aten::ones\", \"out\"},\n", "    {\"aten::ones_like\", \"dtype\"},\n", "    {\"aten::scalar_tensor\", \"\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::rand\", \"names\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::rand\", \"generator_with_names\"},\n#endif", "    {\"aten::rand\", \"\"},\n", "    {\"aten::rand\", \"generator\"},\n", "    {\"aten::rand\", \"out\"},\n", "    {\"aten::rand\", \"generator_out\"},\n", "    {\"aten::rand_like\", \"dtype\"},\n", "    {\"aten::randint\", \"\"},\n", "    {\"aten::randint\", \"generator\"},\n", "    {\"aten::randint\", \"low\"},\n", "    {\"aten::randint\", \"low_generator\"},\n", "    {\"aten::randint\", \"out\"},\n", "    {\"aten::randint\", \"generator_out\"},\n", "    {\"aten::randint\", \"low_out\"},\n", "    {\"aten::randint\", \"low_generator_out\"},\n", "    {\"aten::randint_like\", \"dtype\"},\n", "    {\"aten::randint_like\", \"low_dtype\"},\n", "    {\"aten::randn\", \"\"},\n", "    {\"aten::randn\", \"generator\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::randn\", \"names\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::randn\", \"generator_with_names\"},\n#endif", "    {\"aten::randn\", \"out\"},\n", "    {\"aten::randn\", \"generator_out\"},\n", "    {\"aten::randn_like\", \"dtype\"},\n", "    {\"aten::randperm\", \"\"},\n", "    {\"aten::randperm\", \"generator\"},\n", "    {\"aten::randperm\", \"out\"},\n", "    {\"aten::randperm\", \"generator_out\"},\n", "    {\"aten::range\", \"step\"},\n", "    {\"aten::range\", \"\"},\n", "    {\"aten::range\", \"out\"},\n", "    {\"aten::reciprocal\", \"out\"},\n", "    {\"aten::neg\", \"out\"},\n", "    {\"aten::round\", \"out\"},\n", "    {\"aten::rsqrt\", \"out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::select\", \"Dimname\"},\n#endif", "    {\"aten::sigmoid\", \"out\"},\n", "    {\"aten::sin\", \"out\"},\n", "    {\"aten::sinh\", \"out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::size\", \"Dimname\"},\n#endif", "    {\"aten::softmax\", \"\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::softmax\", \"\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::squeeze\", \"dimname\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::squeeze_\", \"dimname\"},\n#endif", "    {\"aten::sspaddmm\", \"out\"},\n", "    {\"aten::stack\", \"out\"},\n", "    {\"aten::stft\", \"\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::stride\", \"Dimname\"},\n#endif", "    {\"aten::sum\", \"\"},\n", "    {\"aten::sum\", \"dim_IntList\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::sum\", \"dim_DimnameList\"},\n#endif", "    {\"aten::sum\", \"IntList_out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::sum\", \"DimnameList_out\"},\n#endif", "    {\"aten::sqrt\", \"out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::std_mean\", \"names_dim\"},\n#endif", "    {\"aten::std\", \"out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::std\", \"names_dim\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::std\", \"names_out\"},\n#endif", "    {\"aten::prod\", \"\"},\n", "    {\"aten::prod\", \"dim_int\"},\n", "    {\"aten::prod\", \"int_out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::prod\", \"dim_Dimname\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::prod\", \"Dimname_out\"},\n#endif", "    {\"aten::tan\", \"out\"},\n", "    {\"aten::tanh\", \"out\"},\n", "    {\"aten::threshold\", \"out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::transpose\", \"Dimname\"},\n#endif", "    {\"aten::trunc\", \"out\"},\n", "    {\"aten::var\", \"out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::var\", \"names_dim\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::var\", \"names_out\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::var_mean\", \"names_dim\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::zeros\", \"names\"},\n#endif", "    {\"aten::zeros\", \"\"},\n", "    {\"aten::zeros\", \"out\"},\n", "    {\"aten::zeros_like\", \"dtype\"},\n", "    {\"aten::_sparse_sum\", \"dtype\"},\n", "    {\"aten::_sparse_sum\", \"dim_dtype\"},\n", "    {\"aten::norm\", \"ScalarOpt_dtype\"},\n", "    {\"aten::norm\", \"ScalarOpt_dim_dtype\"},\n", "    {\"aten::norm\", \"dtype_out\"},\n", "    {\"aten::norm\", \"out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::norm\", \"names_ScalarOpt_dim_dtype\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::norm\", \"names_ScalarOpt_dim\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::norm\", \"names_dtype_out\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::norm\", \"names_out\"},\n#endif", "    {\"aten::frobenius_norm\", \"out\"},\n", "    {\"aten::nuclear_norm\", \"out\"},\n", "    {\"aten::nuclear_norm\", \"dim_out\"},\n", "    {\"aten::pow\", \"Tensor_Scalar_out\"},\n", "    {\"aten::sub\", \"out\"},\n", "    {\"aten::addmm\", \"out\"},\n", "    {\"aten::sparse_coo_tensor\", \"size\"},\n", "    {\"aten::sparse_coo_tensor\", \"indices\"},\n", "    {\"aten::sparse_coo_tensor\", \"indices_size\"},\n", "    {\"aten::_sparse_coo_tensor_unsafe\", \"\"},\n", "    {\"aten::_sparse_coo_tensor_with_dims\", \"\"},\n", "    {\"aten::_sparse_coo_tensor_with_dims_and_tensors\", \"\"},\n", "    {\"aten::hspmm\", \"out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::unbind\", \"Dimname\"},\n#endif", "    {\"aten::quantize_per_tensor\", \"\"},\n", "    {\"aten::quantize_per_channel\", \"\"},\n", "    {\"aten::q_per_channel_axis\", \"\"},\n", "    {\"aten::qscheme\", \"\"},\n", "    {\"aten::fake_quantize_per_channel_affine\", \"\"},\n", "    {\"aten::fake_quantize_per_channel_affine_backward\", \"\"},\n", "    {\"aten::to\", \"dtype_layout\"},\n", "    {\"aten::to\", \"device\"},\n", "    {\"aten::to\", \"dtype\"},\n", "    {\"aten::result_type\", \"Tensor\"},\n", "    {\"aten::result_type\", \"Scalar\"},\n", "    {\"aten::result_type\", \"Scalar_Tensor\"},\n", "    {\"aten::result_type\", \"Scalar_Scalar\"},\n", "    {\"aten::can_cast\", \"\"},\n", "    {\"aten::promote_types\", \"\"},\n", "    {\"aten::_thnn_fused_lstm_cell\", \"\"},\n", "    {\"aten::_thnn_fused_lstm_cell_backward\", \"\"},\n", "    {\"aten::_thnn_differentiable_lstm_cell_backward\", \"\"},\n", "    {\"aten::_thnn_fused_gru_cell\", \"\"},\n", "    {\"aten::_thnn_differentiable_gru_cell_backward\", \"\"},\n", "    {\"aten::lstm_cell\", \"\"},\n", "    {\"aten::gru_cell\", \"\"},\n", "    {\"aten::rnn_tanh_cell\", \"\"},\n", "    {\"aten::rnn_relu_cell\", \"\"},\n", "    {\"aten::quantized_lstm\", \"\"},\n", "    {\"aten::set_\", \"source_Storage\"},\n", "    {\"aten::set_\", \"source_Storage_storage_offset\"},\n", "    {\"aten::set_quantizer_\", \"\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::index_add\", \"dimname\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::index_fill_\", \"dimname_Scalar\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::index_fill_\", \"dimname_Scalar\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::index_fill\", \"dimname_Scalar\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::index_fill\", \"dimname_Tensor\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::scatter\", \"dimname_src\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::scatter\", \"dimname_value\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::scatter_add\", \"dimname\"},\n#endif", "    {\"aten::addbmm\", \"out\"},\n", "    {\"aten::diag\", \"out\"},\n", "    {\"aten::cross\", \"out\"},\n", "    {\"aten::triu\", \"out\"},\n", "    {\"aten::tril\", \"out\"},\n", "    {\"aten::tril_indices\", \"\"},\n", "    {\"aten::triu_indices\", \"\"},\n", "    {\"aten::ne\", \"Scalar_out\"},\n", "    {\"aten::ne\", \"Tensor_out\"},\n", "    {\"aten::eq\", \"Scalar_out\"},\n", "    {\"aten::eq\", \"Tensor_out\"},\n", "    {\"aten::ge\", \"Scalar_out\"},\n", "    {\"aten::ge\", \"Tensor_out\"},\n", "    {\"aten::le\", \"Scalar_out\"},\n", "    {\"aten::le\", \"Tensor_out\"},\n", "    {\"aten::gt\", \"Scalar_out\"},\n", "    {\"aten::gt\", \"Tensor_out\"},\n", "    {\"aten::lt\", \"Scalar_out\"},\n", "    {\"aten::lt\", \"Tensor_out\"},\n", "    {\"aten::take\", \"out\"},\n", "    {\"aten::index_select\", \"out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::index_select\", \"dimname_out\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::index_select\", \"dimname\"},\n#endif", "    {\"aten::masked_select\", \"out\"},\n", "    {\"aten::nonzero\", \"out\"},\n", "    {\"aten::gather\", \"out\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::gather\", \"dimname_out\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::gather\", \"dimname\"},\n#endif", "    {\"aten::addcmul\", \"out\"},\n", "    {\"aten::addcdiv\", \"out\"},\n", "    {\"aten::lstsq\", \"X\"},\n", "    {\"aten::triangular_solve\", \"X\"},\n", "    {\"aten::symeig\", \"e\"},\n", "    {\"aten::eig\", \"e\"},\n", "    {\"aten::svd\", \"U\"},\n", "    {\"aten::cholesky\", \"out\"},\n", "    {\"aten::cholesky_solve\", \"out\"},\n", "    {\"aten::solve\", \"solution\"},\n", "    {\"aten::cholesky_inverse\", \"out\"},\n", "    {\"aten::qr\", \"Q\"},\n", "    {\"aten::geqrf\", \"a\"},\n", "    {\"aten::orgqr\", \"out\"},\n", "    {\"aten::ormqr\", \"out\"},\n", "    {\"aten::lu_solve\", \"out\"},\n", "    {\"aten::multinomial\", \"out\"},\n", "    {\"aten::lgamma\", \"out\"},\n", "    {\"aten::digamma\", \"out\"},\n", "    {\"aten::polygamma\", \"out\"},\n", "    {\"aten::erfinv\", \"out\"},\n", "    {\"aten::sign\", \"out\"},\n", "    {\"aten::atan2\", \"out\"},\n", "    {\"aten::lerp\", \"Scalar_out\"},\n", "    {\"aten::lerp\", \"Tensor_out\"},\n", "    {\"aten::histc\", \"out\"},\n", "    {\"aten::fmod\", \"Scalar_out\"},\n", "    {\"aten::fmod\", \"Tensor_out\"},\n", "    {\"aten::remainder\", \"Scalar_out\"},\n", "    {\"aten::remainder\", \"Tensor_out\"},\n", "    {\"aten::min\", \"out\"},\n", "    {\"aten::max\", \"out\"},\n", "    {\"aten::sort\", \"values\"},\n", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::sort\", \"dimname_values\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::sort\", \"dimname\"},\n#endif", "#ifdef BUILD_NAMEDTENSOR\n    {\"aten::argsort\", \"dimname\"},\n#endif", "    {\"aten::topk\", \"values\"},\n", "    {\"aten::renorm\", \"out\"},\n", "    {\"aten::pow\", \"Tensor_Tensor_out\"},\n", "    {\"aten::pow\", \"Scalar_out\"},\n", "    {\"aten::normal\", \"Tensor_float_out\"},\n", "    {\"aten::normal\", \"float_Tensor_out\"},\n", "    {\"aten::normal\", \"Tensor_Tensor_out\"},\n", "    {\"aten::normal\", \"float_float\"},\n", "    {\"aten::normal\", \"float_float_out\"},\n", "    {\"aten::_addr\", \"out\"},\n", "    {\"aten::_cumsum\", \"out\"},\n", "    {\"aten::_cumprod\", \"out\"},\n", "    {\"aten::_cat\", \"out\"},\n", "    {\"aten::_mode\", \"values\"},\n", "    {\"aten::_max\", \"max\"},\n", "    {\"aten::_min\", \"min\"},\n", "    {\"aten::binary_cross_entropy\", \"out\"},\n", "    {\"aten::binary_cross_entropy\", \"\"},\n", "    {\"aten::binary_cross_entropy_backward\", \"grad_input\"},\n", "    {\"aten::binary_cross_entropy_backward\", \"\"},\n", "    {\"aten::mse_loss\", \"out\"},\n", "    {\"aten::mse_loss_backward\", \"grad_input\"},\n", "    {\"aten::l1_loss\", \"out\"},\n", "    {\"aten::l1_loss_backward\", \"grad_input\"},\n", "    {\"aten::multi_margin_loss\", \"out\"},\n", "    {\"aten::multi_margin_loss\", \"\"},\n", "    {\"aten::multi_margin_loss_backward\", \"grad_input\"},\n", "    {\"aten::multi_margin_loss_backward\", \"\"},\n", "    {\"aten::multilabel_margin_loss\", \"out\"},\n", "    {\"aten::multilabel_margin_loss_forward\", \"output\"},\n", "    {\"aten::multilabel_margin_loss_backward\", \"grad_input\"},\n", "    {\"aten::nll_loss\", \"out\"},\n", "    {\"aten::nll_loss\", \"\"},\n", "    {\"aten::nll_loss_forward\", \"output\"},\n", "    {\"aten::nll_loss_forward\", \"\"},\n", "    {\"aten::nll_loss_backward\", \"grad_input\"},\n", "    {\"aten::nll_loss_backward\", \"\"},\n", "    {\"aten::nll_loss2d\", \"out\"},\n", "    {\"aten::nll_loss2d\", \"\"},\n", "    {\"aten::nll_loss2d_forward\", \"output\"},\n", "    {\"aten::nll_loss2d_forward\", \"\"},\n", "    {\"aten::nll_loss2d_backward\", \"grad_input\"},\n", "    {\"aten::nll_loss2d_backward\", \"\"},\n", "    {\"aten::smooth_l1_loss\", \"out\"},\n", "    {\"aten::smooth_l1_loss_backward\", \"grad_input\"},\n", "    {\"aten::soft_margin_loss\", \"out\"},\n", "    {\"aten::soft_margin_loss_backward\", \"grad_input\"},\n", "    {\"aten::elu\", \"out\"},\n", "    {\"aten::elu_backward\", \"grad_input\"},\n", "    {\"aten::glu\", \"out\"},\n", "    {\"aten::glu_backward\", \"grad_input\"},\n", "    {\"aten::hardtanh\", \"out\"},\n", "    {\"aten::hardtanh_backward\", \"grad_input\"},\n", "    {\"aten::leaky_relu\", \"out\"},\n", "    {\"aten::leaky_relu_backward\", \"grad_input\"},\n", "    {\"aten::log_sigmoid\", \"out\"},\n", "    {\"aten::log_sigmoid_forward\", \"output\"},\n", "    {\"aten::log_sigmoid_backward\", \"grad_input\"},\n", "    {\"aten::rrelu_with_noise\", \"out\"},\n", "    {\"aten::rrelu_with_noise_backward\", \"grad_input\"},\n", "    {\"aten::softplus\", \"out\"},\n", "    {\"aten::softplus_backward\", \"grad_input\"},\n", "    {\"aten::softshrink\", \"out\"},\n", "    {\"aten::softshrink_backward\", \"grad_input\"},\n", "    {\"aten::adaptive_avg_pool2d\", \"out\"},\n", "    {\"aten::adaptive_avg_pool3d\", \"out\"},\n", "    {\"aten::adaptive_avg_pool3d_backward\", \"grad_input\"},\n", "    {\"aten::adaptive_max_pool2d\", \"out\"},\n", "    {\"aten::adaptive_max_pool2d_backward\", \"grad_input\"},\n", "    {\"aten::adaptive_max_pool3d\", \"out\"},\n", "    {\"aten::adaptive_max_pool3d_backward\", \"grad_input\"},\n", "    {\"aten::avg_pool2d\", \"out\"},\n", "    {\"aten::avg_pool2d_backward\", \"grad_input\"},\n", "    {\"aten::avg_pool3d\", \"out\"},\n", "    {\"aten::avg_pool3d_backward\", \"grad_input\"},\n", "    {\"aten::fractional_max_pool2d\", \"output\"},\n", "    {\"aten::fractional_max_pool2d_backward\", \"grad_input\"},\n", "    {\"aten::fractional_max_pool3d\", \"output\"},\n", "    {\"aten::fractional_max_pool3d_backward\", \"grad_input\"},\n", "    {\"aten::max_pool2d_with_indices\", \"out\"},\n", "    {\"aten::max_pool2d_with_indices_backward\", \"grad_input\"},\n", "    {\"aten::max_pool3d_with_indices\", \"out\"},\n", "    {\"aten::max_pool3d_with_indices_backward\", \"grad_input\"},\n", "    {\"aten::max_unpool2d\", \"out\"},\n", "    {\"aten::max_unpool2d_backward\", \"grad_input\"},\n", "    {\"aten::max_unpool3d\", \"out\"},\n", "    {\"aten::max_unpool3d_backward\", \"grad_input\"},\n", "    {\"aten::reflection_pad1d\", \"out\"},\n", "    {\"aten::reflection_pad1d_backward\", \"grad_input\"},\n", "    {\"aten::reflection_pad2d\", \"out\"},\n", "    {\"aten::reflection_pad2d_backward\", \"grad_input\"},\n", "    {\"aten::replication_pad1d\", \"out\"},\n", "    {\"aten::replication_pad1d_backward\", \"grad_input\"},\n", "    {\"aten::replication_pad2d\", \"out\"},\n", "    {\"aten::replication_pad2d_backward\", \"grad_input\"},\n", "    {\"aten::replication_pad3d\", \"out\"},\n", "    {\"aten::replication_pad3d_backward\", \"grad_input\"},\n", "    {\"aten::upsample_linear1d\", \"out\"},\n", "    {\"aten::upsample_linear1d_backward\", \"grad_input\"},\n", "    {\"aten::upsample_bilinear2d\", \"out\"},\n", "    {\"aten::upsample_bilinear2d_backward\", \"grad_input\"},\n", "    {\"aten::upsample_bicubic2d\", \"out\"},\n", "    {\"aten::upsample_bicubic2d_backward\", \"grad_input\"},\n", "    {\"aten::upsample_trilinear3d\", \"out\"},\n", "    {\"aten::upsample_trilinear3d_backward\", \"grad_input\"},\n", "    {\"aten::upsample_nearest1d\", \"out\"},\n", "    {\"aten::upsample_nearest1d_backward\", \"grad_input\"},\n", "    {\"aten::upsample_nearest2d\", \"out\"},\n", "    {\"aten::upsample_nearest2d_backward\", \"grad_input\"},\n", "    {\"aten::upsample_nearest3d\", \"out\"},\n", "    {\"aten::upsample_nearest3d_backward\", \"grad_input\"},\n", "    {\"aten::sigmoid_backward\", \"grad_input\"},\n", "    {\"aten::tanh_backward\", \"grad_input\"},\n", "    {\"aten::slow_conv_transpose2d\", \"out\"},\n", "    {\"aten::slow_conv_transpose2d\", \"\"},\n", "    {\"aten::slow_conv_transpose2d_backward\", \"grad_output\"},\n", "    {\"aten::slow_conv_transpose3d\", \"out\"},\n", "    {\"aten::slow_conv_transpose3d\", \"\"},\n", "    {\"aten::slow_conv_transpose3d_backward\", \"grad_output\"},\n", "    {\"aten::thnn_conv2d\", \"out\"},\n", "    {\"aten::thnn_conv2d\", \"\"},\n", "    {\"aten::thnn_conv2d_forward\", \"output\"},\n", "    {\"aten::thnn_conv2d_forward\", \"\"},\n", "    {\"aten::thnn_conv2d_backward\", \"grad_input\"},\n", "    {\"aten::thnn_conv_depthwise2d\", \"out\"},\n", "    {\"aten::thnn_conv_depthwise2d\", \"\"},\n", "    {\"aten::thnn_conv_depthwise2d_forward\", \"out\"},\n", "    {\"aten::thnn_conv_depthwise2d_forward\", \"\"},\n", "    {\"aten::thnn_conv_depthwise2d_backward\", \"grad_input\"},\n", "    {\"aten::thnn_conv3d\", \"out\"},\n", "    {\"aten::thnn_conv3d\", \"\"},\n", "    {\"aten::thnn_conv3d_forward\", \"output\"},\n", "    {\"aten::thnn_conv3d_forward\", \"\"},\n", "    {\"aten::thnn_conv3d_backward\", \"grad_input\"},\n", "    {\"aten::slow_conv_dilated2d\", \"\"},\n", "    {\"aten::slow_conv_dilated3d\", \"\"},\n", "    {\"aten::col2im\", \"out\"},\n", "    {\"aten::col2im_backward\", \"grad_input\"},\n", "    {\"aten::im2col\", \"out\"},\n", "    {\"aten::im2col_backward\", \"grad_input\"},\n", "    {\"aten::rivergold_test\", \"\"},\n", "    {\"aten::rivergold_test\", \"raw\"},\n"], "type_method_declarations": ["Tensor _cast_Byte(const Tensor & self, bool non_blocking);\n", "Tensor _cast_Char(const Tensor & self, bool non_blocking);\n", "Tensor _cast_Double(const Tensor & self, bool non_blocking);\n", "Tensor _cast_Float(const Tensor & self, bool non_blocking);\n", "Tensor _cast_Int(const Tensor & self, bool non_blocking);\n", "Tensor _cast_Long(const Tensor & self, bool non_blocking);\n", "Tensor _cast_Short(const Tensor & self, bool non_blocking);\n", "Tensor _cast_Half(const Tensor & self, bool non_blocking);\n", "void backward(const Tensor & self, const Tensor & gradient, bool keep_graph, bool create_graph);\n", "void set_data(const Tensor & self, const Tensor & new_data);\n", "Tensor data(const Tensor & self);\n", "bool is_leaf(const Tensor & self);\n", "int64_t output_nr(const Tensor & self);\n", "int64_t _version(const Tensor & self);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor & rename_(Tensor & self, c10::optional<DimnameList> names);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor rename(const Tensor & self, c10::optional<DimnameList> names);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor align_to(const Tensor & self, DimnameList names);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor align_as(const Tensor & self, const Tensor & other);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstd::vector<Tensor> align_tensors(TensorList tensors);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor refine_names(const Tensor & self, DimnameList names);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor unflatten(const Tensor & self, Dimname dim, IntArrayRef sizes, DimnameList names);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor unflatten(const Tensor & self, int64_t dim, IntArrayRef sizes, DimnameList names);\n#endif", "int64_t _debug_has_internal_overlap(const Tensor & self);\n", "std::tuple<Tensor,Tensor> _sobol_engine_draw(const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype);\n", "Tensor & _sobol_engine_ff_(Tensor & self, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated);\n", "Tensor & _sobol_engine_scramble_(Tensor & self, const Tensor & ltm, int64_t dimension);\n", "Tensor & _sobol_engine_initialize_state_(Tensor & self, int64_t dimension);\n", "Tensor _reshape_from_tensor(const Tensor & self, const Tensor & shape);\n", "Tensor _shape_as_tensor(const Tensor & self);\n", "Tensor dropout(const Tensor & input, double p, bool train);\n", "Tensor & dropout_(Tensor & self, double p, bool train);\n", "Tensor feature_dropout(const Tensor & input, double p, bool train);\n", "Tensor & feature_dropout_(Tensor & self, double p, bool train);\n", "Tensor alpha_dropout(const Tensor & input, double p, bool train);\n", "Tensor & alpha_dropout_(Tensor & self, double p, bool train);\n", "Tensor feature_alpha_dropout(const Tensor & input, double p, bool train);\n", "Tensor & feature_alpha_dropout_(Tensor & self, double p, bool train);\n", "Tensor abs(const Tensor & self);\n", "Tensor acos(const Tensor & self);\n", "Tensor avg_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad);\n", "Tensor adaptive_avg_pool1d(const Tensor & self, IntArrayRef output_size);\n", "std::tuple<Tensor,Tensor> adaptive_max_pool1d(const Tensor & self, IntArrayRef output_size);\n", "Tensor add(const Tensor & self, Scalar other, Scalar alpha);\n", "Tensor & add_(Tensor & self, Scalar other, Scalar alpha);\n", "Tensor addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha);\n", "Tensor & addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha);\n", "Tensor & addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha);\n", "Tensor affine_grid_generator(const Tensor & theta, IntArrayRef size, bool align_corners);\n", "Tensor affine_grid_generator_backward(const Tensor & grad, IntArrayRef size, bool align_corners);\n", "Tensor all(const Tensor & self, int64_t dim, bool keepdim);\n", "Tensor & all_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor all(const Tensor & self, Dimname dim, bool keepdim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & all_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim);\n#endif", "bool allclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan);\n", "Tensor any(const Tensor & self, int64_t dim, bool keepdim);\n", "Tensor & any_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor any(const Tensor & self, Dimname dim, bool keepdim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & any_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim);\n#endif", "Tensor arange(Scalar end, const TensorOptions & options);\n", "Tensor arange(Scalar start, Scalar end, const TensorOptions & options);\n", "Tensor arange(Scalar start, Scalar end, Scalar step, const TensorOptions & options);\n", "Tensor & arange_out(Tensor & out, Scalar end);\n", "Tensor _dim_arange(const Tensor & like, int64_t dim);\n", "Tensor argmax(const Tensor & self, c10::optional<int64_t> dim, bool keepdim);\n", "Tensor argmin(const Tensor & self, c10::optional<int64_t> dim, bool keepdim);\n", "Tensor & as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset);\n", "Tensor asin(const Tensor & self);\n", "Tensor atan(const Tensor & self);\n", "Tensor & _baddbmm_mkl_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha);\n", "Tensor bartlett_window(int64_t window_length, const TensorOptions & options);\n", "Tensor bartlett_window(int64_t window_length, bool periodic, const TensorOptions & options);\n", "Tensor batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled);\n", "std::tuple<Tensor,Tensor,Tensor,int64_t> _batch_norm_impl_index(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled);\n", "std::tuple<Tensor,Tensor,Tensor> _batch_norm_impl_index_backward(int64_t impl_index, const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var_transform, bool train, double eps, std::array<bool,3> output_mask);\n", "Tensor bernoulli(const Tensor & self, Generator * generator);\n", "Tensor & bernoulli_out(Tensor & out, const Tensor & self, Generator * generator);\n", "Tensor bernoulli(const Tensor & self, double p, Generator * generator);\n", "Tensor bilinear(const Tensor & input1, const Tensor & input2, const Tensor & weight, const Tensor & bias);\n", "Tensor binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction);\n", "Tensor binary_cross_entropy_with_logits_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction);\n", "Tensor bitwise_not(const Tensor & self);\n", "Tensor & bitwise_not_(Tensor & self);\n", "Tensor logical_not(const Tensor & self);\n", "Tensor & logical_not_(Tensor & self);\n", "Tensor logical_xor(const Tensor & self, const Tensor & other);\n", "Tensor & logical_xor_(Tensor & self, const Tensor & other);\n", "Tensor blackman_window(int64_t window_length, const TensorOptions & options);\n", "Tensor blackman_window(int64_t window_length, bool periodic, const TensorOptions & options);\n", "std::vector<Tensor> broadcast_tensors(TensorList tensors);\n", "Tensor cat(TensorList tensors, int64_t dim);\n", "Tensor & cat_out(Tensor & out, TensorList tensors, int64_t dim);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor cat(TensorList tensors, Dimname dim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & cat_out(Tensor & out, TensorList tensors, Dimname dim);\n#endif", "Tensor ceil(const Tensor & self);\n", "Tensor & ceil_(Tensor & self);\n", "Tensor chain_matmul(TensorList matrices);\n", "std::vector<Tensor> chunk(const Tensor & self, int64_t chunks, int64_t dim);\n", "Tensor clamp(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max);\n", "Tensor clamp_max(const Tensor & self, Scalar max);\n", "Tensor clamp_min(const Tensor & self, Scalar min);\n", "bool cudnn_is_acceptable(const Tensor & self);\n", "Tensor constant_pad_nd(const Tensor & self, IntArrayRef pad, Scalar value);\n", "Tensor contiguous(const Tensor & self, MemoryFormat memory_format);\n", "Tensor convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups);\n", "Tensor convolution_overrideable(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups);\n", "std::tuple<Tensor,Tensor,Tensor> convolution_backward_overrideable(const Tensor & grad_output, const Tensor & input, const Tensor & weight, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, std::array<bool,3> output_mask);\n", "Tensor _convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled);\n", "Tensor _convolution_nogroup(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding);\n", "std::tuple<Tensor,Tensor,Tensor> _convolution_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask);\n", "Tensor conv1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups);\n", "Tensor conv2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups);\n", "Tensor conv3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups);\n", "Tensor conv_tbc(const Tensor & self, const Tensor & weight, const Tensor & bias, int64_t pad);\n", "std::tuple<Tensor,Tensor,Tensor> conv_tbc_backward(const Tensor & self, const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t pad);\n", "Tensor conv_transpose1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation);\n", "Tensor conv_transpose2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation);\n", "Tensor conv_transpose3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation);\n", "Tensor & copy_(Tensor & self, const Tensor & src, bool non_blocking);\n", "Tensor cos(const Tensor & self);\n", "Tensor cosh(const Tensor & self);\n", "Tensor cosine_embedding_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction);\n", "Tensor cumsum(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype);\n", "Tensor & cumsum_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor cumsum(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & cumsum_out(Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype);\n#endif", "Tensor cumprod(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype);\n", "Tensor & cumprod_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor cumprod(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & cumprod_out(Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype);\n#endif", "Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, int64_t reduction, bool zero_infinity);\n", "Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, const Tensor & input_lengths, const Tensor & target_lengths, int64_t blank, int64_t reduction, bool zero_infinity);\n", "Tensor det(const Tensor & self);\n", "Tensor diag_embed(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2);\n", "Tensor diagflat(const Tensor & self, int64_t offset);\n", "Tensor diagonal(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2);\n", "Tensor & fill_diagonal_(Tensor & self, Scalar fill_value, bool wrap);\n", "Tensor div(const Tensor & self, Scalar other);\n", "Tensor & div_(Tensor & self, Scalar other);\n", "Tensor & dot_out(Tensor & out, const Tensor & self, const Tensor & tensor);\n", "Tensor einsum(std::string equation, TensorList tensors);\n", "Tensor embedding(const Tensor & weight, const Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse);\n", "Tensor embedding_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse);\n", "Tensor embedding_sparse_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq);\n", "std::tuple<Tensor,Tensor,Tensor,Tensor> embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights);\n", "Tensor _embedding_bag_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights);\n", "Tensor _embedding_bag_sparse_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor empty(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options, c10::optional<MemoryFormat> memory_format);\n#endif", "Tensor new_empty(const Tensor & self, IntArrayRef size, const TensorOptions & options);\n", "Tensor new_full(const Tensor & self, IntArrayRef size, Scalar fill_value, const TensorOptions & options);\n", "Tensor & empty_out(Tensor & out, IntArrayRef size, c10::optional<MemoryFormat> memory_format);\n", "Tensor empty_like(const Tensor & self);\n", "Tensor empty_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format);\n", "Tensor erf(const Tensor & self);\n", "Tensor erfc(const Tensor & self);\n", "Tensor exp(const Tensor & self);\n", "Tensor expm1(const Tensor & self);\n", "Tensor & expm1_(Tensor & self);\n", "Tensor expand(const Tensor & self, IntArrayRef size, bool implicit);\n", "Tensor expand_as(const Tensor & self, const Tensor & other);\n", "Tensor eye(int64_t n, const TensorOptions & options);\n", "Tensor eye(int64_t n, int64_t m, const TensorOptions & options);\n", "Tensor flatten(const Tensor & self, int64_t start_dim, int64_t end_dim);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor flatten(const Tensor & self, int64_t start_dim, int64_t end_dim, Dimname out_dim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor flatten(const Tensor & self, Dimname start_dim, Dimname end_dim, Dimname out_dim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor flatten(const Tensor & self, DimnameList dims, Dimname out_dim);\n#endif", "Tensor & fill_(Tensor & self, Scalar value);\n", "Tensor & fill_(Tensor & self, const Tensor & value);\n", "Tensor floor(const Tensor & self);\n", "Tensor & floor_(Tensor & self);\n", "Tensor frac(const Tensor & self);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor full(IntArrayRef size, Scalar fill_value, c10::optional<DimnameList> names, const TensorOptions & options);\n#endif", "Tensor full(IntArrayRef size, Scalar fill_value, const TensorOptions & options);\n", "Tensor & full_out(Tensor & out, IntArrayRef size, Scalar fill_value);\n", "Tensor full_like(const Tensor & self, Scalar fill_value);\n", "Tensor full_like(const Tensor & self, Scalar fill_value, const TensorOptions & options);\n", "Tensor grid_sampler(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);\n", "Tensor hann_window(int64_t window_length, const TensorOptions & options);\n", "Tensor hann_window(int64_t window_length, bool periodic, const TensorOptions & options);\n", "Tensor hamming_window(int64_t window_length, const TensorOptions & options);\n", "Tensor hamming_window(int64_t window_length, bool periodic, const TensorOptions & options);\n", "Tensor hamming_window(int64_t window_length, bool periodic, double alpha, const TensorOptions & options);\n", "Tensor hamming_window(int64_t window_length, bool periodic, double alpha, double beta, const TensorOptions & options);\n", "Tensor hinge_embedding_loss(const Tensor & self, const Tensor & target, double margin, int64_t reduction);\n", "Tensor group_norm(const Tensor & input, int64_t num_groups, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enabled);\n", "Tensor fft(const Tensor & self, int64_t signal_ndim, bool normalized);\n", "Tensor ifft(const Tensor & self, int64_t signal_ndim, bool normalized);\n", "Tensor rfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided);\n", "Tensor irfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided, IntArrayRef signal_sizes);\n", "int64_t _cufft_get_plan_cache_size(int64_t device_index);\n", "int64_t _cufft_get_plan_cache_max_size(int64_t device_index);\n", "void _cufft_set_plan_cache_max_size(int64_t device_index, int64_t max_size);\n", "void _cufft_clear_plan_cache(int64_t device_index);\n", "Tensor index(const Tensor & self, TensorList indices);\n", "Tensor & index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);\n", "Tensor index_copy(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor & index_copy_(Tensor & self, Dimname dim, const Tensor & index, const Tensor & source);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor index_copy(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source);\n#endif", "Tensor & index_put_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate);\n", "Tensor index_put(const Tensor & self, TensorList indices, const Tensor & values, bool accumulate);\n", "Tensor & _index_put_impl_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate, bool unsafe);\n", "Tensor instance_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled);\n", "Tensor inverse(const Tensor & self);\n", "Tensor & inverse_out(Tensor & out, const Tensor & self);\n", "Tensor isclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan);\n", "Tensor isnan(const Tensor & self);\n", "bool is_distributed(const Tensor & self);\n", "bool is_floating_point(const Tensor & self);\n", "bool is_complex(const Tensor & self);\n", "bool is_nonzero(const Tensor & self);\n", "bool is_same_size(const Tensor & self, const Tensor & other);\n", "bool is_signed(const Tensor & self);\n", "Tensor kl_div(const Tensor & self, const Tensor & target, int64_t reduction);\n", "std::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, int64_t dim, bool keepdim);\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, Dimname dim, bool keepdim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor &,Tensor &> kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, Dimname dim, bool keepdim);\n#endif", "Tensor layer_norm(const Tensor & input, IntArrayRef normalized_shape, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enable);\n", "Tensor linear(const Tensor & input, const Tensor & weight, const Tensor & bias);\n", "Tensor fbgemm_linear_int8_weight_fp32_activation(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias);\n", "Tensor fbgemm_linear_int8_weight(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias);\n", "std::tuple<Tensor,Tensor,double,int64_t> fbgemm_linear_quantize_weight(const Tensor & input);\n", "Tensor fbgemm_pack_gemm_matrix_fp16(const Tensor & input);\n", "Tensor fbgemm_linear_fp16_weight_fp32_activation(const Tensor & input, const Tensor & packed_weight, const Tensor & bias);\n", "Tensor fbgemm_linear_fp16_weight(const Tensor & input, const Tensor & packed_weight, const Tensor & bias);\n", "Tensor fbgemm_pack_quantized_matrix(const Tensor & input);\n", "Tensor fbgemm_pack_quantized_matrix(const Tensor & input, int64_t K, int64_t N);\n", "Tensor linspace(Scalar start, Scalar end, int64_t steps, const TensorOptions & options);\n", "Tensor log(const Tensor & self);\n", "Tensor & log_(Tensor & self);\n", "Tensor log10(const Tensor & self);\n", "Tensor log1p(const Tensor & self);\n", "Tensor log2(const Tensor & self);\n", "Tensor logdet(const Tensor & self);\n", "Tensor logspace(Scalar start, Scalar end, int64_t steps, double base, const TensorOptions & options);\n", "Tensor log_softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor log_softmax(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype);\n#endif", "Tensor logsumexp(const Tensor & self, IntArrayRef dim, bool keepdim);\n", "Tensor & logsumexp_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor logsumexp(const Tensor & self, DimnameList dim, bool keepdim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & logsumexp_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim);\n#endif", "Tensor margin_ranking_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction);\n", "Tensor matmul(const Tensor & self, const Tensor & other);\n", "Tensor & matmul_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "Tensor matrix_rank(const Tensor & self, double tol, bool symmetric);\n", "Tensor matrix_rank(const Tensor & self, bool symmetric);\n", "Tensor matrix_power(const Tensor & self, int64_t n);\n", "std::tuple<Tensor,Tensor> max(const Tensor & self, int64_t dim, bool keepdim);\n", "std::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, int64_t dim, bool keepdim);\n", "Tensor max_values(const Tensor & self, IntArrayRef dim, bool keepdim);\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> max(const Tensor & self, Dimname dim, bool keepdim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, Dimname dim, bool keepdim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor max_values(const Tensor & self, DimnameList dim, bool keepdim);\n#endif", "std::tuple<Tensor,Tensor> max_pool1d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode);\n", "Tensor max_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode);\n", "Tensor max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode);\n", "Tensor max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode);\n", "std::tuple<Tensor,Tensor> median(const Tensor & self, int64_t dim, bool keepdim);\n", "std::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim);\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> median(const Tensor & self, Dimname dim, bool keepdim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim);\n#endif", "std::tuple<Tensor,Tensor> min(const Tensor & self, int64_t dim, bool keepdim);\n", "std::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim);\n", "Tensor min_values(const Tensor & self, IntArrayRef dim, bool keepdim);\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> min(const Tensor & self, Dimname dim, bool keepdim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, Dimname dim, bool keepdim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor min_values(const Tensor & self, DimnameList dim, bool keepdim);\n#endif", "Tensor mkldnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups);\n", "Tensor mkldnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined);\n", "std::tuple<Tensor,Tensor> mkldnn_convolution_backward_weights(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined);\n", "std::tuple<Tensor,Tensor,Tensor> mkldnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, std::array<bool,3> output_mask);\n", "Tensor _sparse_mm(const Tensor & sparse, const Tensor & dense);\n", "std::tuple<Tensor,Tensor> mode(const Tensor & self, int64_t dim, bool keepdim);\n", "std::tuple<Tensor &,Tensor &> mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim);\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> mode(const Tensor & self, Dimname dim, bool keepdim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor &,Tensor &> mode_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim);\n#endif", "Tensor mul(const Tensor & self, Scalar other);\n", "Tensor & mul_(Tensor & self, Scalar other);\n", "Tensor mvlgamma(const Tensor & self, int64_t p);\n", "Tensor & mvlgamma_(Tensor & self, int64_t p);\n", "Tensor narrow(const Tensor & self, int64_t dim, int64_t start, int64_t length);\n", "bool _nnpack_available();\n", "Tensor _nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef padding);\n", "std::tuple<Tensor,Tensor,Tensor> _nnpack_spatial_convolution_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, std::array<bool,3> output_mask);\n", "Tensor _nnpack_spatial_convolution_backward_input(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding);\n", "Tensor _nnpack_spatial_convolution_backward_weight(const Tensor & input, IntArrayRef weightsize, const Tensor & grad_output, IntArrayRef padding);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor ones(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options);\n#endif", "Tensor ones(IntArrayRef size, const TensorOptions & options);\n", "Tensor & ones_out(Tensor & out, IntArrayRef size);\n", "Tensor ones_like(const Tensor & self);\n", "Tensor ones_like(const Tensor & self, const TensorOptions & options);\n", "Tensor pairwise_distance(const Tensor & x1, const Tensor & x2, double p, double eps, bool keepdim);\n", "Tensor cdist(const Tensor & x1, const Tensor & x2, double p);\n", "Tensor _cdist_backward(const Tensor & grad, const Tensor & x1, const Tensor & x2, double p, const Tensor & cdist);\n", "Tensor pdist(const Tensor & self, double p);\n", "Tensor _pdist_forward(const Tensor & self, double p);\n", "Tensor _pdist_backward(const Tensor & grad, const Tensor & self, double p, const Tensor & pdist);\n", "Tensor cosine_similarity(const Tensor & x1, const Tensor & x2, int64_t dim, double eps);\n", "Tensor permute(const Tensor & self, IntArrayRef dims);\n", "Tensor numpy_T(const Tensor & self);\n", "Tensor pixel_shuffle(const Tensor & self, int64_t upscale_factor);\n", "bool is_pinned(const Tensor & self);\n", "Tensor pin_memory(const Tensor & self);\n", "Tensor pinverse(const Tensor & self, double rcond);\n", "Tensor poisson_nll_loss(const Tensor & input, const Tensor & target, bool log_input, bool full, double eps, int64_t reduction);\n", "Tensor scalar_tensor(Scalar s, const TensorOptions & options);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor rand(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor rand(IntArrayRef size, Generator * generator, c10::optional<DimnameList> names, const TensorOptions & options);\n#endif", "Tensor rand(IntArrayRef size, const TensorOptions & options);\n", "Tensor rand(IntArrayRef size, Generator * generator, const TensorOptions & options);\n", "Tensor & rand_out(Tensor & out, IntArrayRef size);\n", "Tensor & rand_out(Tensor & out, IntArrayRef size, Generator * generator);\n", "Tensor rand_like(const Tensor & self);\n", "Tensor rand_like(const Tensor & self, const TensorOptions & options);\n", "Tensor randint(int64_t high, IntArrayRef size, const TensorOptions & options);\n", "Tensor randint(int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options);\n", "Tensor randint(int64_t low, int64_t high, IntArrayRef size, const TensorOptions & options);\n", "Tensor randint(int64_t low, int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options);\n", "Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size);\n", "Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size, Generator * generator);\n", "Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size);\n", "Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size, Generator * generator);\n", "Tensor randint_like(const Tensor & self, int64_t high);\n", "Tensor randint_like(const Tensor & self, int64_t low, int64_t high);\n", "Tensor randint_like(const Tensor & self, int64_t high, const TensorOptions & options);\n", "Tensor randint_like(const Tensor & self, int64_t low, int64_t high, const TensorOptions & options);\n", "Tensor randn(IntArrayRef size, const TensorOptions & options);\n", "Tensor randn(IntArrayRef size, Generator * generator, const TensorOptions & options);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor randn(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor randn(IntArrayRef size, Generator * generator, c10::optional<DimnameList> names, const TensorOptions & options);\n#endif", "Tensor & randn_out(Tensor & out, IntArrayRef size);\n", "Tensor & randn_out(Tensor & out, IntArrayRef size, Generator * generator);\n", "Tensor randn_like(const Tensor & self);\n", "Tensor randn_like(const Tensor & self, const TensorOptions & options);\n", "Tensor randperm(int64_t n, const TensorOptions & options);\n", "Tensor randperm(int64_t n, Generator * generator, const TensorOptions & options);\n", "Tensor & randperm_out(Tensor & out, int64_t n);\n", "Tensor range(Scalar start, Scalar end, Scalar step, const TensorOptions & options);\n", "Tensor range(Scalar start, Scalar end, const TensorOptions & options);\n", "Tensor reciprocal(const Tensor & self);\n", "Tensor neg(const Tensor & self);\n", "Tensor & neg_(Tensor & self);\n", "Tensor repeat(const Tensor & self, IntArrayRef repeats);\n", "Tensor repeat_interleave(const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim);\n", "Tensor repeat_interleave(const Tensor & self, int64_t repeats, c10::optional<int64_t> dim);\n", "Tensor reshape(const Tensor & self, IntArrayRef shape);\n", "Tensor reshape_as(const Tensor & self, const Tensor & other);\n", "Tensor round(const Tensor & self);\n", "Tensor & round_(Tensor & self);\n", "Tensor rrelu(const Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator);\n", "Tensor & rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator);\n", "Tensor rsqrt(const Tensor & self);\n", "Tensor & rsqrt_(Tensor & self);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor select(const Tensor & self, Dimname dim, int64_t index);\n#endif", "Tensor select(const Tensor & self, int64_t dim, int64_t index);\n", "Tensor selu(const Tensor & self);\n", "Tensor & selu_(Tensor & self);\n", "Tensor celu(const Tensor & self, Scalar alpha);\n", "Tensor & celu_(Tensor & self, Scalar alpha);\n", "Tensor sin(const Tensor & self);\n", "Tensor sinh(const Tensor & self);\n", "Tensor detach(const Tensor & self);\n", "Tensor & detach_(Tensor & self);\n", "int64_t size(const Tensor & self, int64_t dim);\n", "#ifdef BUILD_NAMEDTENSOR\nint64_t size(const Tensor & self, Dimname dim);\n#endif", "Tensor slice(const Tensor & self, int64_t dim, int64_t start, int64_t end, int64_t step);\n", "std::tuple<Tensor,Tensor> slogdet(const Tensor & self);\n", "Tensor smm(const Tensor & self, const Tensor & mat2);\n", "Tensor softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor softmax(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype);\n#endif", "std::vector<Tensor> split(const Tensor & self, int64_t split_size, int64_t dim);\n", "std::vector<Tensor> split_with_sizes(const Tensor & self, IntArrayRef split_sizes, int64_t dim);\n", "Tensor squeeze(const Tensor & self);\n", "Tensor squeeze(const Tensor & self, int64_t dim);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor squeeze(const Tensor & self, Dimname dim);\n#endif", "Tensor & squeeze_(Tensor & self);\n", "Tensor & squeeze_(Tensor & self, int64_t dim);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor & squeeze_(Tensor & self, Dimname dim);\n#endif", "Tensor sspaddmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha);\n", "Tensor stack(TensorList tensors, int64_t dim);\n", "Tensor & stack_out(Tensor & out, TensorList tensors, int64_t dim);\n", "Tensor stft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const Tensor & window, bool normalized, bool onesided);\n", "int64_t stride(const Tensor & self, int64_t dim);\n", "#ifdef BUILD_NAMEDTENSOR\nint64_t stride(const Tensor & self, Dimname dim);\n#endif", "Tensor sum(const Tensor & self, c10::optional<ScalarType> dtype);\n", "Tensor sum(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor sum(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype);\n#endif", "Tensor & sum_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor & sum_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype);\n#endif", "Tensor sum_to_size(const Tensor & self, IntArrayRef size);\n", "Tensor sqrt(const Tensor & self);\n", "Tensor std(const Tensor & self, bool unbiased);\n", "Tensor std(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim);\n", "std::tuple<Tensor,Tensor> std_mean(const Tensor & self, bool unbiased);\n", "std::tuple<Tensor,Tensor> std_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim);\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> std_mean(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim);\n#endif", "Tensor & std_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor std(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & std_out(Tensor & out, const Tensor & self, DimnameList dim, bool unbiased, bool keepdim);\n#endif", "Tensor prod(const Tensor & self, c10::optional<ScalarType> dtype);\n", "Tensor prod(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype);\n", "Tensor & prod_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor prod(const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & prod_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype);\n#endif", "Tensor t(const Tensor & self);\n", "Tensor & t_(Tensor & self);\n", "Tensor tan(const Tensor & self);\n", "Tensor tanh(const Tensor & self);\n", "Tensor tensordot(const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other);\n", "Tensor threshold(const Tensor & self, Scalar threshold, Scalar value);\n", "Tensor & threshold_(Tensor & self, Scalar threshold, Scalar value);\n", "Tensor & threshold_out(Tensor & out, const Tensor & self, Scalar threshold, Scalar value);\n", "Tensor threshold_backward(const Tensor & grad_output, const Tensor & self, Scalar threshold);\n", "Tensor transpose(const Tensor & self, int64_t dim0, int64_t dim1);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor transpose(const Tensor & self, Dimname dim0, Dimname dim1);\n#endif", "Tensor & transpose_(Tensor & self, int64_t dim0, int64_t dim1);\n", "Tensor one_hot(const Tensor & self, int64_t num_classes);\n", "Tensor rot90(const Tensor & self, int64_t k, IntArrayRef dims);\n", "Tensor trapz(const Tensor & y, const Tensor & x, int64_t dim);\n", "Tensor trapz(const Tensor & y, double dx, int64_t dim);\n", "Tensor _trilinear(const Tensor & i1, const Tensor & i2, const Tensor & i3, IntArrayRef expand1, IntArrayRef expand2, IntArrayRef expand3, IntArrayRef sumdim, int64_t unroll_dim);\n", "Tensor triplet_margin_loss(const Tensor & anchor, const Tensor & positive, const Tensor & negative, double margin, double p, double eps, bool swap, int64_t reduction);\n", "Tensor trunc(const Tensor & self);\n", "Tensor & trunc_(Tensor & self);\n", "Tensor type_as(const Tensor & self, const Tensor & other);\n", "bool _has_compatible_shallow_copy_type(const Tensor & self, const Tensor & from);\n", "Tensor _unsafe_view(const Tensor & self, IntArrayRef size);\n", "Tensor unsqueeze(const Tensor & self, int64_t dim);\n", "Tensor & unsqueeze_(Tensor & self, int64_t dim);\n", "Tensor var(const Tensor & self, bool unbiased);\n", "Tensor var(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim);\n", "Tensor & var_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor var(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & var_out(Tensor & out, const Tensor & self, DimnameList dim, bool unbiased, bool keepdim);\n#endif", "std::tuple<Tensor,Tensor> var_mean(const Tensor & self, bool unbiased);\n", "std::tuple<Tensor,Tensor> var_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim);\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> var_mean(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim);\n#endif", "Tensor view_as(const Tensor & self, const Tensor & other);\n", "Tensor where(const Tensor & condition, const Tensor & self, const Tensor & other);\n", "std::vector<Tensor> where(const Tensor & condition);\n", "Tensor norm_except_dim(const Tensor & v, int64_t pow, int64_t dim);\n", "Tensor _weight_norm(const Tensor & v, const Tensor & g, int64_t dim);\n", "std::tuple<Tensor,Tensor> _weight_norm_differentiable_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor zeros(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options);\n#endif", "Tensor zeros(IntArrayRef size, const TensorOptions & options);\n", "Tensor & zeros_out(Tensor & out, IntArrayRef size);\n", "Tensor zeros_like(const Tensor & self);\n", "Tensor zeros_like(const Tensor & self, const TensorOptions & options);\n", "Tensor _sparse_sum(const Tensor & self);\n", "Tensor _sparse_sum(const Tensor & self, ScalarType dtype);\n", "Tensor _sparse_sum(const Tensor & self, IntArrayRef dim);\n", "Tensor _sparse_sum(const Tensor & self, IntArrayRef dim, ScalarType dtype);\n", "Tensor norm(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype);\n", "Tensor norm(const Tensor & self, Scalar p);\n", "Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype);\n", "Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim);\n", "Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype);\n", "Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor norm(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor norm(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim);\n#endif", "Tensor frobenius_norm(const Tensor & self);\n", "Tensor frobenius_norm(const Tensor & self, IntArrayRef dim, bool keepdim);\n", "Tensor & frobenius_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim);\n", "Tensor nuclear_norm(const Tensor & self, bool keepdim);\n", "Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, bool keepdim);\n", "Tensor nuclear_norm(const Tensor & self, IntArrayRef dim, bool keepdim);\n", "Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim);\n", "Tensor & resize_as_(Tensor & self, const Tensor & the_template);\n", "Tensor sub(const Tensor & self, Scalar other, Scalar alpha);\n", "Tensor & sub_(Tensor & self, Scalar other, Scalar alpha);\n", "Tensor rsub(const Tensor & self, const Tensor & other, Scalar alpha);\n", "Tensor rsub(const Tensor & self, Scalar other, Scalar alpha);\n", "Tensor _sparse_addmm(const Tensor & self, const Tensor & sparse, const Tensor & dense, Scalar beta, Scalar alpha);\n", "Tensor sparse_coo_tensor(IntArrayRef size, const TensorOptions & options);\n", "Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, const TensorOptions & options);\n", "Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options);\n", "Tensor _sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options);\n", "Tensor to_dense_backward(const Tensor & grad, const Tensor & input);\n", "int64_t numel(const Tensor & self);\n", "std::vector<Tensor> unbind(const Tensor & self, int64_t dim);\n", "#ifdef BUILD_NAMEDTENSOR\nstd::vector<Tensor> unbind(const Tensor & self, Dimname dim);\n#endif", "Tensor to_mkldnn_backward(const Tensor & grad, const Tensor & input);\n", "Tensor to(const Tensor & self, const TensorOptions & options, bool non_blocking, bool copy);\n", "Tensor to(const Tensor & self, Device device, ScalarType dtype, bool non_blocking, bool copy);\n", "Tensor to(const Tensor & self, ScalarType dtype, bool non_blocking, bool copy);\n", "Tensor to(const Tensor & self, const Tensor & other, bool non_blocking, bool copy);\n", "std::vector<Tensor> meshgrid(TensorList tensors);\n", "Tensor cartesian_prod(TensorList tensors);\n", "Tensor combinations(const Tensor & self, int64_t r, bool with_replacement);\n", "Scalar item(const Tensor & self);\n", "ScalarType result_type(const Tensor & tensor, const Tensor & other);\n", "ScalarType result_type(const Tensor & tensor, Scalar other);\n", "ScalarType result_type(Scalar scalar, const Tensor & tensor);\n", "ScalarType result_type(Scalar scalar1, Scalar scalar2);\n", "bool can_cast(ScalarType from, ScalarType to);\n", "ScalarType promote_types(ScalarType type1, ScalarType type2);\n", "std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & input_bias, const Tensor & hidden_bias, const Tensor & cx, const Tensor & cy);\n", "std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_gru_cell_backward(const Tensor & grad_hy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias);\n", "std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);\n", "std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);\n", "std::tuple<Tensor,Tensor> gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);\n", "std::tuple<Tensor,Tensor> gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);\n", "std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);\n", "std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);\n", "std::tuple<Tensor,Tensor> rnn_relu(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);\n", "std::tuple<Tensor,Tensor> rnn_relu(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);\n", "std::tuple<Tensor,Tensor> lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh);\n", "Tensor gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh);\n", "Tensor rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh);\n", "Tensor rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh);\n", "std::tuple<Tensor,Tensor,Tensor> quantized_lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first, c10::optional<ScalarType> dtype, bool use_dynamic);\n", "std::tuple<Tensor,Tensor> quantized_gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);\n", "std::tuple<Tensor,Tensor> quantized_gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);\n", "std::tuple<Tensor,Tensor> quantized_lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh);\n", "Tensor quantized_gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh);\n", "Tensor quantized_rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh);\n", "Tensor quantized_rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh);\n", "std::tuple<Tensor,Tensor> _pack_padded_sequence(const Tensor & input, const Tensor & lengths, bool batch_first);\n", "Tensor _pack_padded_sequence_backward(const Tensor & grad, IntArrayRef input_size, const Tensor & batch_sizes, bool batch_first);\n", "std::tuple<Tensor,Tensor> _pad_packed_sequence(const Tensor & data, const Tensor & batch_sizes, bool batch_first, Scalar padding_value, int64_t total_length);\n", "Tensor masked_fill(const Tensor & self, const Tensor & mask, Scalar value);\n", "Tensor masked_fill(const Tensor & self, const Tensor & mask, const Tensor & value);\n", "Tensor masked_scatter(const Tensor & self, const Tensor & mask, const Tensor & source);\n", "Tensor index_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor index_add(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source);\n#endif", "Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, Scalar value);\n", "Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & value);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor & index_fill_(Tensor & self, Dimname dim, const Tensor & index, Scalar value);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & index_fill_(Tensor & self, Dimname dim, const Tensor & index, const Tensor & value);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor index_fill(const Tensor & self, Dimname dim, const Tensor & index, Scalar value);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor index_fill(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & value);\n#endif", "Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src);\n", "Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, Scalar value);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor scatter(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor scatter(const Tensor & self, Dimname dim, const Tensor & index, Scalar value);\n#endif", "Tensor scatter_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor scatter_add(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src);\n#endif", "Tensor & lt_(Tensor & self, Scalar other);\n", "Tensor & lt_(Tensor & self, const Tensor & other);\n", "Tensor & gt_(Tensor & self, Scalar other);\n", "Tensor & gt_(Tensor & self, const Tensor & other);\n", "Tensor & le_(Tensor & self, Scalar other);\n", "Tensor & le_(Tensor & self, const Tensor & other);\n", "Tensor & ge_(Tensor & self, Scalar other);\n", "Tensor & ge_(Tensor & self, const Tensor & other);\n", "Tensor & eq_(Tensor & self, Scalar other);\n", "Tensor & eq_(Tensor & self, const Tensor & other);\n", "Tensor & ne_(Tensor & self, Scalar other);\n", "Tensor & ne_(Tensor & self, const Tensor & other);\n", "Tensor & atan2_(Tensor & self, const Tensor & other);\n", "Tensor & digamma_(Tensor & self);\n", "Tensor & polygamma_(Tensor & self, int64_t n);\n", "Tensor & addcdiv_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value);\n", "Tensor & cross_out(Tensor & out, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim);\n", "Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim);\n", "Tensor triu(const Tensor & self, int64_t diagonal);\n", "Tensor tril(const Tensor & self, int64_t diagonal);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor & index_select_out(Tensor & out, const Tensor & self, Dimname dim, const Tensor & index);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor index_select(const Tensor & self, Dimname dim, const Tensor & index);\n#endif", "std::vector<Tensor> nonzero_numpy(const Tensor & self);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor & gather_out(Tensor & out, const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor gather(const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad);\n#endif", "Tensor _gather_sparse_backward(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & grad);\n", "Tensor & addcmul_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value);\n", "Tensor addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value);\n", "Tensor & addcmul_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value);\n", "Tensor & addcdiv_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value);\n", "Tensor addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value);\n", "std::tuple<Tensor &,Tensor &> triangular_solve_out(Tensor & X, Tensor & M, const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular);\n", "std::tuple<Tensor,Tensor> triangular_solve(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular);\n", "std::tuple<Tensor &,Tensor &> symeig_out(Tensor & e, Tensor & V, const Tensor & self, bool eigenvectors, bool upper);\n", "std::tuple<Tensor,Tensor> symeig(const Tensor & self, bool eigenvectors, bool upper);\n", "std::tuple<Tensor &,Tensor &,Tensor &> svd_out(Tensor & U, Tensor & S, Tensor & V, const Tensor & self, bool some, bool compute_uv);\n", "std::tuple<Tensor,Tensor,Tensor> svd(const Tensor & self, bool some, bool compute_uv);\n", "Tensor & cholesky_out(Tensor & out, const Tensor & self, bool upper);\n", "Tensor cholesky(const Tensor & self, bool upper);\n", "Tensor & cholesky_solve_out(Tensor & out, const Tensor & self, const Tensor & input2, bool upper);\n", "Tensor cholesky_solve(const Tensor & self, const Tensor & input2, bool upper);\n", "std::tuple<Tensor,Tensor> solve(const Tensor & self, const Tensor & A);\n", "std::tuple<Tensor &,Tensor &> solve_out(Tensor & solution, Tensor & lu, const Tensor & self, const Tensor & A);\n", "std::tuple<Tensor &,Tensor &> qr_out(Tensor & Q, Tensor & R, const Tensor & self, bool some);\n", "std::tuple<Tensor,Tensor> qr(const Tensor & self, bool some);\n", "Tensor & lu_solve_out(Tensor & out, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots);\n", "Tensor lu_solve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots);\n", "Tensor & digamma_out(Tensor & out, const Tensor & self);\n", "Tensor digamma(const Tensor & self);\n", "Tensor & polygamma_out(Tensor & out, int64_t n, const Tensor & self);\n", "Tensor polygamma(int64_t n, const Tensor & self);\n", "Tensor sign(const Tensor & self);\n", "Tensor & sign_(Tensor & self);\n", "Tensor & atan2_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "Tensor atan2(const Tensor & self, const Tensor & other);\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor &,Tensor &> sort_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool descending);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> sort(const Tensor & self, Dimname dim, bool descending);\n#endif", "Tensor argsort(const Tensor & self, int64_t dim, bool descending);\n", "#ifdef BUILD_NAMEDTENSOR\nTensor argsort(const Tensor & self, Dimname dim, bool descending);\n#endif", "Tensor all(const Tensor & self);\n", "Tensor any(const Tensor & self);\n", "Tensor normal(double mean, double std, IntArrayRef size, Generator * generator, const TensorOptions & options);\n", "Tensor & normal_out(Tensor & out, double mean, double std, IntArrayRef size, Generator * generator);\n", "Tensor alias(const Tensor & self);\n", "Tensor & multilabel_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction);\n", "Tensor multilabel_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction);\n", "Tensor & nll_loss_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index);\n", "Tensor nll_loss(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index);\n", "Tensor & nll_loss2d_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index);\n", "Tensor nll_loss2d(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index);\n", "Tensor & log_sigmoid_out(Tensor & out, const Tensor & self);\n", "Tensor log_sigmoid(const Tensor & self);\n", "Tensor adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size);\n", "Tensor & thnn_conv2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding);\n", "Tensor thnn_conv2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding);\n", "Tensor & thnn_conv_depthwise2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation);\n", "Tensor thnn_conv_depthwise2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation);\n", "Tensor & thnn_conv3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding);\n", "Tensor thnn_conv3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding);\n"], "type_method_definitions": ["Tensor _cast_Byte(const Tensor & self, bool non_blocking) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"_cast_Byte is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_cast_Byte(self, non_blocking);\n}\n", "Tensor _cast_Char(const Tensor & self, bool non_blocking) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"_cast_Char is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_cast_Char(self, non_blocking);\n}\n", "Tensor _cast_Double(const Tensor & self, bool non_blocking) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"_cast_Double is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_cast_Double(self, non_blocking);\n}\n", "Tensor _cast_Float(const Tensor & self, bool non_blocking) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"_cast_Float is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_cast_Float(self, non_blocking);\n}\n", "Tensor _cast_Int(const Tensor & self, bool non_blocking) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"_cast_Int is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_cast_Int(self, non_blocking);\n}\n", "Tensor _cast_Long(const Tensor & self, bool non_blocking) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"_cast_Long is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_cast_Long(self, non_blocking);\n}\n", "Tensor _cast_Short(const Tensor & self, bool non_blocking) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"_cast_Short is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_cast_Short(self, non_blocking);\n}\n", "Tensor _cast_Half(const Tensor & self, bool non_blocking) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"_cast_Half is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_cast_Half(self, non_blocking);\n}\n", "void backward(const Tensor & self, const Tensor & gradient, bool keep_graph, bool create_graph) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || gradient.has_names()) {\n        AT_ERROR(\n            \"backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n at::native::backward(self, gradient, keep_graph, create_graph);\n}\n", "void set_data(const Tensor & self, const Tensor & new_data) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || new_data.has_names()) {\n        AT_ERROR(\n            \"set_data is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n at::native::set_data(self, new_data);\n}\n", "Tensor data(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"data is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::data(self);\n}\n", "bool is_leaf(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"is_leaf is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::is_leaf(self);\n}\n", "int64_t output_nr(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::output_nr(self);\n}\n", "int64_t _version(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"_version is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_version(self);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor & rename_(Tensor & self, c10::optional<DimnameList> names) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::rename_(self, names);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor rename(const Tensor & self, c10::optional<DimnameList> names) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::rename(self, names);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor align_to(const Tensor & self, DimnameList names) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::align_to(self, names);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor align_as(const Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::align_as(self, other);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstd::vector<Tensor> align_tensors(TensorList tensors) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(tensors));\n    return at::native::align_tensors(tensors);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor refine_names(const Tensor & self, DimnameList names) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::refine_names(self, names);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor unflatten(const Tensor & self, Dimname dim, IntArrayRef sizes, DimnameList names) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::unflatten(self, dim, sizes, names);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor unflatten(const Tensor & self, int64_t dim, IntArrayRef sizes, DimnameList names) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::unflatten(self, dim, sizes, names);\n}\n#endif", "int64_t _debug_has_internal_overlap(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"_debug_has_internal_overlap is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_debug_has_internal_overlap(self);\n}\n", "std::tuple<Tensor,Tensor> _sobol_engine_draw(const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n    if (quasi.has_names() || sobolstate.has_names()) {\n        AT_ERROR(\n            \"_sobol_engine_draw is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(quasi));\n    return at::native::_sobol_engine_draw(quasi, n, sobolstate, dimension, num_generated, dtype);\n}\n", "Tensor & _sobol_engine_ff_(Tensor & self, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || sobolstate.has_names()) {\n        AT_ERROR(\n            \"_sobol_engine_ff_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_sobol_engine_ff_(self, n, sobolstate, dimension, num_generated);\n}\n", "Tensor & _sobol_engine_scramble_(Tensor & self, const Tensor & ltm, int64_t dimension) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || ltm.has_names()) {\n        AT_ERROR(\n            \"_sobol_engine_scramble_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_sobol_engine_scramble_(self, ltm, dimension);\n}\n", "Tensor & _sobol_engine_initialize_state_(Tensor & self, int64_t dimension) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"_sobol_engine_initialize_state_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_sobol_engine_initialize_state_(self, dimension);\n}\n", "Tensor _reshape_from_tensor(const Tensor & self, const Tensor & shape) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || shape.has_names()) {\n        AT_ERROR(\n            \"_reshape_from_tensor is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_reshape_from_tensor(self, shape);\n}\n", "Tensor _shape_as_tensor(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"_shape_as_tensor is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_shape_as_tensor(self);\n}\n", "Tensor dropout(const Tensor & input, double p, bool train) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::dropout(input, p, train);\n}\n", "Tensor & dropout_(Tensor & self, double p, bool train) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::dropout_(self, p, train);\n}\n", "Tensor feature_dropout(const Tensor & input, double p, bool train) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names()) {\n        AT_ERROR(\n            \"feature_dropout is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::feature_dropout(input, p, train);\n}\n", "Tensor & feature_dropout_(Tensor & self, double p, bool train) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"feature_dropout_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::feature_dropout_(self, p, train);\n}\n", "Tensor alpha_dropout(const Tensor & input, double p, bool train) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names()) {\n        AT_ERROR(\n            \"alpha_dropout is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::alpha_dropout(input, p, train);\n}\n", "Tensor & alpha_dropout_(Tensor & self, double p, bool train) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"alpha_dropout_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::alpha_dropout_(self, p, train);\n}\n", "Tensor feature_alpha_dropout(const Tensor & input, double p, bool train) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names()) {\n        AT_ERROR(\n            \"feature_alpha_dropout is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::feature_alpha_dropout(input, p, train);\n}\n", "Tensor & feature_alpha_dropout_(Tensor & self, double p, bool train) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"feature_alpha_dropout_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::feature_alpha_dropout_(self, p, train);\n}\n", "Tensor abs(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::abs(self);\n}\n", "Tensor acos(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::acos(self);\n}\n", "Tensor avg_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"avg_pool1d is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::avg_pool1d(self, kernel_size, stride, padding, ceil_mode, count_include_pad);\n}\n", "Tensor adaptive_avg_pool1d(const Tensor & self, IntArrayRef output_size) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"adaptive_avg_pool1d is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::adaptive_avg_pool1d(self, output_size);\n}\n", "std::tuple<Tensor,Tensor> adaptive_max_pool1d(const Tensor & self, IntArrayRef output_size) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"adaptive_max_pool1d is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::adaptive_max_pool1d(self, output_size);\n}\n", "Tensor add(const Tensor & self, Scalar other, Scalar alpha) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::add(self, other, alpha);\n}\n", "Tensor & add_(Tensor & self, Scalar other, Scalar alpha) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::add_(self, other, alpha);\n}\n", "Tensor addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || vec1.has_names() || vec2.has_names()) {\n        AT_ERROR(\n            \"addr is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::addr(self, vec1, vec2, beta, alpha);\n}\n", "Tensor & addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || vec1.has_names() || vec2.has_names()) {\n        AT_ERROR(\n            \"addr_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::addr_(self, vec1, vec2, beta, alpha);\n}\n", "Tensor & addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names() || vec1.has_names() || vec2.has_names()) {\n        AT_ERROR(\n            \"addr_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::addr_out(out, self, vec1, vec2, beta, alpha);\n}\n", "Tensor affine_grid_generator(const Tensor & theta, IntArrayRef size, bool align_corners) {\n#ifdef BUILD_NAMEDTENSOR\n    if (theta.has_names()) {\n        AT_ERROR(\n            \"affine_grid_generator is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(theta));\n    return at::native::affine_grid_generator(theta, size, align_corners);\n}\n", "Tensor affine_grid_generator_backward(const Tensor & grad, IntArrayRef size, bool align_corners) {\n#ifdef BUILD_NAMEDTENSOR\n    if (grad.has_names()) {\n        AT_ERROR(\n            \"affine_grid_generator_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(grad));\n    return at::native::affine_grid_generator_backward(grad, size, align_corners);\n}\n", "Tensor all(const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"all is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::all(self, dim, keepdim);\n}\n", "Tensor & all_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"all_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::all_out(out, self, dim, keepdim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor all(const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"all is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::all(self, dim, keepdim);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & all_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"all_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::all_out(out, self, dim, keepdim);\n}\n#endif", "bool allclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || other.has_names()) {\n        AT_ERROR(\n            \"allclose is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::allclose(self, other, rtol, atol, equal_nan);\n}\n", "Tensor any(const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"any is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::any(self, dim, keepdim);\n}\n", "Tensor & any_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"any_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::any_out(out, self, dim, keepdim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor any(const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"any is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::any(self, dim, keepdim);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & any_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"any_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::any_out(out, self, dim, keepdim);\n}\n#endif", "Tensor arange(Scalar end, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::arange(end, options);\n}\n", "Tensor arange(Scalar start, Scalar end, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::arange(start, end, options);\n}\n", "Tensor arange(Scalar start, Scalar end, Scalar step, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::arange(start, end, step, options);\n}\n", "Tensor & arange_out(Tensor & out, Scalar end) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names()) {\n        AT_ERROR(\n            \"arange_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(out));\n    return at::native::arange_out(out, end);\n}\n", "Tensor _dim_arange(const Tensor & like, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (like.has_names()) {\n        AT_ERROR(\n            \"_dim_arange is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(like));\n    return at::native::_dim_arange(like, dim);\n}\n", "Tensor argmax(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"argmax is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::argmax(self, dim, keepdim);\n}\n", "Tensor argmin(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"argmin is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::argmin(self, dim, keepdim);\n}\n", "Tensor & as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"as_strided_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    // DeviceGuard omitted\n    return at::native::as_strided_(self, size, stride, storage_offset);\n}\n", "Tensor asin(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::asin(self);\n}\n", "Tensor atan(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::atan(self);\n}\n", "Tensor & _baddbmm_mkl_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || batch1.has_names() || batch2.has_names()) {\n        AT_ERROR(\n            \"_baddbmm_mkl_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_baddbmm_mkl_(self, batch1, batch2, beta, alpha);\n}\n", "Tensor bartlett_window(int64_t window_length, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::bartlett_window(window_length, options);\n}\n", "Tensor bartlett_window(int64_t window_length, bool periodic, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::bartlett_window(window_length, periodic, options);\n}\n", "Tensor batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || bias.has_names() || running_mean.has_names() || running_var.has_names()) {\n        AT_ERROR(\n            \"batch_norm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::batch_norm(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);\n}\n", "std::tuple<Tensor,Tensor,Tensor,int64_t> _batch_norm_impl_index(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || bias.has_names() || running_mean.has_names() || running_var.has_names()) {\n        AT_ERROR(\n            \"_batch_norm_impl_index is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::_batch_norm_impl_index(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);\n}\n", "std::tuple<Tensor,Tensor,Tensor> _batch_norm_impl_index_backward(int64_t impl_index, const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var_transform, bool train, double eps, std::array<bool,3> output_mask) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || grad_output.has_names() || weight.has_names() || running_mean.has_names() || running_var.has_names() || save_mean.has_names() || save_var_transform.has_names()) {\n        AT_ERROR(\n            \"_batch_norm_impl_index_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::_batch_norm_impl_index_backward(impl_index, input, grad_output, weight, running_mean, running_var, save_mean, save_var_transform, train, eps, output_mask);\n}\n", "Tensor bernoulli(const Tensor & self, Generator * generator) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::bernoulli(self, generator);\n}\n", "Tensor & bernoulli_out(Tensor & out, const Tensor & self, Generator * generator) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::bernoulli_out(out, self, generator);\n}\n", "Tensor bernoulli(const Tensor & self, double p, Generator * generator) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"bernoulli is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::bernoulli(self, p, generator);\n}\n", "Tensor bilinear(const Tensor & input1, const Tensor & input2, const Tensor & weight, const Tensor & bias) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input1.has_names() || input2.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"bilinear is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input1));\n    return at::native::bilinear(input1, input2, weight, bias);\n}\n", "Tensor binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || target.has_names() || weight.has_names() || pos_weight.has_names()) {\n        AT_ERROR(\n            \"binary_cross_entropy_with_logits is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::binary_cross_entropy_with_logits(self, target, weight, pos_weight, reduction);\n}\n", "Tensor binary_cross_entropy_with_logits_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) {\n#ifdef BUILD_NAMEDTENSOR\n    if (grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names() || pos_weight.has_names()) {\n        AT_ERROR(\n            \"binary_cross_entropy_with_logits_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::binary_cross_entropy_with_logits_backward(grad_output, self, target, weight, pos_weight, reduction);\n}\n", "Tensor bitwise_not(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::bitwise_not(self);\n}\n", "Tensor & bitwise_not_(Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::bitwise_not_(self);\n}\n", "Tensor logical_not(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::logical_not(self);\n}\n", "Tensor & logical_not_(Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::logical_not_(self);\n}\n", "Tensor logical_xor(const Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::logical_xor(self, other);\n}\n", "Tensor & logical_xor_(Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::logical_xor_(self, other);\n}\n", "Tensor blackman_window(int64_t window_length, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::blackman_window(window_length, options);\n}\n", "Tensor blackman_window(int64_t window_length, bool periodic, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::blackman_window(window_length, periodic, options);\n}\n", "std::vector<Tensor> broadcast_tensors(TensorList tensors) {\n#ifdef BUILD_NAMEDTENSOR\n    if (at::has_names(tensors)) {\n        AT_ERROR(\n            \"broadcast_tensors is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    // DeviceGuard omitted\n    return at::native::broadcast_tensors(tensors);\n}\n", "Tensor cat(TensorList tensors, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(tensors));\n    return at::native::cat(tensors, dim);\n}\n", "Tensor & cat_out(Tensor & out, TensorList tensors, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(out));\n    return at::native::cat_out(out, tensors, dim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor cat(TensorList tensors, Dimname dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(tensors));\n    return at::native::cat(tensors, dim);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & cat_out(Tensor & out, TensorList tensors, Dimname dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(out));\n    return at::native::cat_out(out, tensors, dim);\n}\n#endif", "Tensor ceil(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::ceil(self);\n}\n", "Tensor & ceil_(Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::ceil_(self);\n}\n", "Tensor chain_matmul(TensorList matrices) {\n#ifdef BUILD_NAMEDTENSOR\n    if (at::has_names(matrices)) {\n        AT_ERROR(\n            \"chain_matmul is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(matrices));\n    return at::native::chain_matmul(matrices);\n}\n", "std::vector<Tensor> chunk(const Tensor & self, int64_t chunks, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::chunk(self, chunks, dim);\n}\n", "Tensor clamp(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::clamp(self, min, max);\n}\n", "Tensor clamp_max(const Tensor & self, Scalar max) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::clamp_max(self, max);\n}\n", "Tensor clamp_min(const Tensor & self, Scalar min) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::clamp_min(self, min);\n}\n", "bool cudnn_is_acceptable(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"cudnn_is_acceptable is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    // DeviceGuard omitted\n    return at::native::cudnn_is_acceptable(self);\n}\n", "Tensor constant_pad_nd(const Tensor & self, IntArrayRef pad, Scalar value) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"constant_pad_nd is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::constant_pad_nd(self, pad, value);\n}\n", "Tensor contiguous(const Tensor & self, MemoryFormat memory_format) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::contiguous(self, memory_format);\n}\n", "Tensor convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"convolution is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::convolution(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);\n}\n", "Tensor convolution_overrideable(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"convolution_overrideable is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::convolution_overrideable(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);\n}\n", "std::tuple<Tensor,Tensor,Tensor> convolution_backward_overrideable(const Tensor & grad_output, const Tensor & input, const Tensor & weight, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, std::array<bool,3> output_mask) {\n#ifdef BUILD_NAMEDTENSOR\n    if (grad_output.has_names() || input.has_names() || weight.has_names()) {\n        AT_ERROR(\n            \"convolution_backward_overrideable is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(grad_output));\n    return at::native::convolution_backward_overrideable(grad_output, input, weight, stride, padding, dilation, transposed, output_padding, groups, output_mask);\n}\n", "Tensor _convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"_convolution is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::_convolution(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled);\n}\n", "Tensor _convolution_nogroup(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"_convolution_nogroup is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::_convolution_nogroup(input, weight, bias, stride, padding, dilation, transposed, output_padding);\n}\n", "std::tuple<Tensor,Tensor,Tensor> _convolution_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask) {\n#ifdef BUILD_NAMEDTENSOR\n    if (ggI.has_names() || ggW.has_names() || ggb.has_names() || gO.has_names() || weight.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"_convolution_double_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_convolution_double_backward(ggI, ggW, ggb, gO, weight, self, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, output_mask);\n}\n", "Tensor conv1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"conv1d is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::conv1d(input, weight, bias, stride, padding, dilation, groups);\n}\n", "Tensor conv2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"conv2d is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::conv2d(input, weight, bias, stride, padding, dilation, groups);\n}\n", "Tensor conv3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"conv3d is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::conv3d(input, weight, bias, stride, padding, dilation, groups);\n}\n", "Tensor conv_tbc(const Tensor & self, const Tensor & weight, const Tensor & bias, int64_t pad) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"conv_tbc is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::conv_tbc(self, weight, bias, pad);\n}\n", "std::tuple<Tensor,Tensor,Tensor> conv_tbc_backward(const Tensor & self, const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t pad) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || input.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"conv_tbc_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::conv_tbc_backward(self, input, weight, bias, pad);\n}\n", "Tensor conv_transpose1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"conv_transpose1d is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::conv_transpose1d(input, weight, bias, stride, padding, output_padding, groups, dilation);\n}\n", "Tensor conv_transpose2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"conv_transpose2d is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::conv_transpose2d(input, weight, bias, stride, padding, output_padding, groups, dilation);\n}\n", "Tensor conv_transpose3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"conv_transpose3d is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::conv_transpose3d(input, weight, bias, stride, padding, output_padding, groups, dilation);\n}\n", "Tensor & copy_(Tensor & self, const Tensor & src, bool non_blocking) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::copy_(self, src, non_blocking);\n}\n", "Tensor cos(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::cos(self);\n}\n", "Tensor cosh(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::cosh(self);\n}\n", "Tensor cosine_embedding_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input1.has_names() || input2.has_names() || target.has_names()) {\n        AT_ERROR(\n            \"cosine_embedding_loss is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input1));\n    return at::native::cosine_embedding_loss(input1, input2, target, margin, reduction);\n}\n", "Tensor cumsum(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::cumsum(self, dim, dtype);\n}\n", "Tensor & cumsum_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::cumsum_out(out, self, dim, dtype);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor cumsum(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::cumsum(self, dim, dtype);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & cumsum_out(Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::cumsum_out(out, self, dim, dtype);\n}\n#endif", "Tensor cumprod(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::cumprod(self, dim, dtype);\n}\n", "Tensor & cumprod_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::cumprod_out(out, self, dim, dtype);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor cumprod(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::cumprod(self, dim, dtype);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & cumprod_out(Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::cumprod_out(out, self, dim, dtype);\n}\n#endif", "Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {\n#ifdef BUILD_NAMEDTENSOR\n    if (log_probs.has_names() || targets.has_names()) {\n        AT_ERROR(\n            \"ctc_loss is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(log_probs));\n    return at::native::ctc_loss(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);\n}\n", "Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, const Tensor & input_lengths, const Tensor & target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {\n#ifdef BUILD_NAMEDTENSOR\n    if (log_probs.has_names() || targets.has_names() || input_lengths.has_names() || target_lengths.has_names()) {\n        AT_ERROR(\n            \"ctc_loss is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(log_probs));\n    return at::native::ctc_loss(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);\n}\n", "Tensor det(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"det is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::det(self);\n}\n", "Tensor diag_embed(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"diag_embed is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::diag_embed(self, offset, dim1, dim2);\n}\n", "Tensor diagflat(const Tensor & self, int64_t offset) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"diagflat is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::diagflat(self, offset);\n}\n", "Tensor diagonal(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"diagonal is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::diagonal(self, offset, dim1, dim2);\n}\n", "Tensor & fill_diagonal_(Tensor & self, Scalar fill_value, bool wrap) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"fill_diagonal_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::fill_diagonal_(self, fill_value, wrap);\n}\n", "Tensor div(const Tensor & self, Scalar other) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::div(self, other);\n}\n", "Tensor & div_(Tensor & self, Scalar other) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::div_(self, other);\n}\n", "Tensor & dot_out(Tensor & out, const Tensor & self, const Tensor & tensor) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::dot_out(out, self, tensor);\n}\n", "Tensor einsum(std::string equation, TensorList tensors) {\n#ifdef BUILD_NAMEDTENSOR\n    if (at::has_names(tensors)) {\n        AT_ERROR(\n            \"einsum is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(tensors));\n    return at::native::einsum(equation, tensors);\n}\n", "Tensor embedding(const Tensor & weight, const Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {\n#ifdef BUILD_NAMEDTENSOR\n    if (weight.has_names() || indices.has_names()) {\n        AT_ERROR(\n            \"embedding is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(weight));\n    return at::native::embedding(weight, indices, padding_idx, scale_grad_by_freq, sparse);\n}\n", "Tensor embedding_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {\n#ifdef BUILD_NAMEDTENSOR\n    if (grad.has_names() || indices.has_names()) {\n        AT_ERROR(\n            \"embedding_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(grad));\n    return at::native::embedding_backward(grad, indices, num_weights, padding_idx, scale_grad_by_freq, sparse);\n}\n", "Tensor embedding_sparse_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {\n#ifdef BUILD_NAMEDTENSOR\n    if (grad.has_names() || indices.has_names()) {\n        AT_ERROR(\n            \"embedding_sparse_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(grad));\n    return at::native::embedding_sparse_backward(grad, indices, num_weights, padding_idx, scale_grad_by_freq);\n}\n", "std::tuple<Tensor,Tensor,Tensor,Tensor> embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) {\n#ifdef BUILD_NAMEDTENSOR\n    if (weight.has_names() || indices.has_names() || offsets.has_names() || per_sample_weights.has_names()) {\n        AT_ERROR(\n            \"embedding_bag is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(weight));\n    return at::native::embedding_bag(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights);\n}\n", "Tensor _embedding_bag_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) {\n#ifdef BUILD_NAMEDTENSOR\n    if (grad.has_names() || indices.has_names() || offsets.has_names() || offset2bag.has_names() || bag_size.has_names() || maximum_indices.has_names() || per_sample_weights.has_names()) {\n        AT_ERROR(\n            \"_embedding_bag_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(grad));\n    return at::native::_embedding_bag_backward(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, sparse, per_sample_weights);\n}\n", "Tensor _embedding_bag_sparse_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) {\n#ifdef BUILD_NAMEDTENSOR\n    if (grad.has_names() || indices.has_names() || offsets.has_names() || offset2bag.has_names() || bag_size.has_names() || per_sample_weights.has_names()) {\n        AT_ERROR(\n            \"_embedding_bag_sparse_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(grad));\n    return at::native::_embedding_bag_sparse_backward(grad, indices, offsets, offset2bag, bag_size, num_weights, scale_grad_by_freq, mode, per_sample_weights);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor empty(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::empty(size, names, options, memory_format);\n}\n#endif", "Tensor new_empty(const Tensor & self, IntArrayRef size, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"new_empty is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::new_empty(self, size, options);\n}\n", "Tensor new_full(const Tensor & self, IntArrayRef size, Scalar fill_value, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"new_full is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::new_full(self, size, fill_value, options);\n}\n", "Tensor & empty_out(Tensor & out, IntArrayRef size, c10::optional<MemoryFormat> memory_format) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names()) {\n        AT_ERROR(\n            \"empty_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    // DeviceGuard omitted\n    return at::native::empty_out(out, size, memory_format);\n}\n", "Tensor empty_like(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::empty_like(self);\n}\n", "Tensor empty_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::empty_like(self, options, memory_format);\n}\n", "Tensor erf(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::erf(self);\n}\n", "Tensor erfc(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::erfc(self);\n}\n", "Tensor exp(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::exp(self);\n}\n", "Tensor expm1(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::expm1(self);\n}\n", "Tensor & expm1_(Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::expm1_(self);\n}\n", "Tensor expand(const Tensor & self, IntArrayRef size, bool implicit) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::expand(self, size, implicit);\n}\n", "Tensor expand_as(const Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || other.has_names()) {\n        AT_ERROR(\n            \"expand_as is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    // DeviceGuard omitted\n    return at::native::expand_as(self, other);\n}\n", "Tensor eye(int64_t n, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::eye(n, options);\n}\n", "Tensor eye(int64_t n, int64_t m, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::eye(n, m, options);\n}\n", "Tensor flatten(const Tensor & self, int64_t start_dim, int64_t end_dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::flatten(self, start_dim, end_dim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor flatten(const Tensor & self, int64_t start_dim, int64_t end_dim, Dimname out_dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::flatten(self, start_dim, end_dim, out_dim);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor flatten(const Tensor & self, Dimname start_dim, Dimname end_dim, Dimname out_dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::flatten(self, start_dim, end_dim, out_dim);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor flatten(const Tensor & self, DimnameList dims, Dimname out_dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::flatten(self, dims, out_dim);\n}\n#endif", "Tensor & fill_(Tensor & self, Scalar value) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::fill_(self, value);\n}\n", "Tensor & fill_(Tensor & self, const Tensor & value) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::fill_(self, value);\n}\n", "Tensor floor(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::floor(self);\n}\n", "Tensor & floor_(Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::floor_(self);\n}\n", "Tensor frac(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::frac(self);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor full(IntArrayRef size, Scalar fill_value, c10::optional<DimnameList> names, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::full(size, fill_value, names, options);\n}\n#endif", "Tensor full(IntArrayRef size, Scalar fill_value, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::full(size, fill_value, options);\n}\n", "Tensor & full_out(Tensor & out, IntArrayRef size, Scalar fill_value) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names()) {\n        AT_ERROR(\n            \"full_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(out));\n    return at::native::full_out(out, size, fill_value);\n}\n", "Tensor full_like(const Tensor & self, Scalar fill_value) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"full_like is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::full_like(self, fill_value);\n}\n", "Tensor full_like(const Tensor & self, Scalar fill_value, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"full_like is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::full_like(self, fill_value, options);\n}\n", "Tensor grid_sampler(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || grid.has_names()) {\n        AT_ERROR(\n            \"grid_sampler is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::grid_sampler(input, grid, interpolation_mode, padding_mode, align_corners);\n}\n", "Tensor hann_window(int64_t window_length, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::hann_window(window_length, options);\n}\n", "Tensor hann_window(int64_t window_length, bool periodic, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::hann_window(window_length, periodic, options);\n}\n", "Tensor hamming_window(int64_t window_length, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::hamming_window(window_length, options);\n}\n", "Tensor hamming_window(int64_t window_length, bool periodic, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::hamming_window(window_length, periodic, options);\n}\n", "Tensor hamming_window(int64_t window_length, bool periodic, double alpha, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::hamming_window(window_length, periodic, alpha, options);\n}\n", "Tensor hamming_window(int64_t window_length, bool periodic, double alpha, double beta, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::hamming_window(window_length, periodic, alpha, beta, options);\n}\n", "Tensor hinge_embedding_loss(const Tensor & self, const Tensor & target, double margin, int64_t reduction) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || target.has_names()) {\n        AT_ERROR(\n            \"hinge_embedding_loss is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::hinge_embedding_loss(self, target, margin, reduction);\n}\n", "Tensor group_norm(const Tensor & input, int64_t num_groups, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enabled) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"group_norm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::group_norm(input, num_groups, weight, bias, eps, cudnn_enabled);\n}\n", "Tensor fft(const Tensor & self, int64_t signal_ndim, bool normalized) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"fft is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::fft(self, signal_ndim, normalized);\n}\n", "Tensor ifft(const Tensor & self, int64_t signal_ndim, bool normalized) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"ifft is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::ifft(self, signal_ndim, normalized);\n}\n", "Tensor rfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"rfft is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::rfft(self, signal_ndim, normalized, onesided);\n}\n", "Tensor irfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided, IntArrayRef signal_sizes) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"irfft is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::irfft(self, signal_ndim, normalized, onesided, signal_sizes);\n}\n", "int64_t _cufft_get_plan_cache_size(int64_t device_index) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::_cufft_get_plan_cache_size(device_index);\n}\n", "int64_t _cufft_get_plan_cache_max_size(int64_t device_index) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::_cufft_get_plan_cache_max_size(device_index);\n}\n", "void _cufft_set_plan_cache_max_size(int64_t device_index, int64_t max_size) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n at::native::_cufft_set_plan_cache_max_size(device_index, max_size);\n}\n", "void _cufft_clear_plan_cache(int64_t device_index) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n at::native::_cufft_clear_plan_cache(device_index);\n}\n", "Tensor index(const Tensor & self, TensorList indices) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || at::has_names(indices)) {\n        AT_ERROR(\n            \"index is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::index(self, indices);\n}\n", "Tensor & index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || index.has_names() || source.has_names()) {\n        AT_ERROR(\n            \"index_copy_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::index_copy_(self, dim, index, source);\n}\n", "Tensor index_copy(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || index.has_names() || source.has_names()) {\n        AT_ERROR(\n            \"index_copy is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::index_copy(self, dim, index, source);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor & index_copy_(Tensor & self, Dimname dim, const Tensor & index, const Tensor & source) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || index.has_names() || source.has_names()) {\n        AT_ERROR(\n            \"index_copy_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::index_copy_(self, dim, index, source);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor index_copy(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || index.has_names() || source.has_names()) {\n        AT_ERROR(\n            \"index_copy is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::index_copy(self, dim, index, source);\n}\n#endif", "Tensor & index_put_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || values.has_names() || at::has_names(indices)) {\n        AT_ERROR(\n            \"index_put_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::index_put_(self, indices, values, accumulate);\n}\n", "Tensor index_put(const Tensor & self, TensorList indices, const Tensor & values, bool accumulate) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || values.has_names() || at::has_names(indices)) {\n        AT_ERROR(\n            \"index_put is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::index_put(self, indices, values, accumulate);\n}\n", "Tensor & _index_put_impl_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate, bool unsafe) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || values.has_names() || at::has_names(indices)) {\n        AT_ERROR(\n            \"_index_put_impl_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_index_put_impl_(self, indices, values, accumulate, unsafe);\n}\n", "Tensor instance_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || bias.has_names() || running_mean.has_names() || running_var.has_names()) {\n        AT_ERROR(\n            \"instance_norm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::instance_norm(input, weight, bias, running_mean, running_var, use_input_stats, momentum, eps, cudnn_enabled);\n}\n", "Tensor inverse(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"inverse is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::inverse(self);\n}\n", "Tensor & inverse_out(Tensor & out, const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"inverse_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::inverse_out(out, self);\n}\n", "Tensor isclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || other.has_names()) {\n        AT_ERROR(\n            \"isclose is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::isclose(self, other, rtol, atol, equal_nan);\n}\n", "Tensor isnan(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::isnan(self);\n}\n", "bool is_distributed(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"is_distributed is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    // DeviceGuard omitted\n    return at::native::is_distributed(self);\n}\n", "bool is_floating_point(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::is_floating_point(self);\n}\n", "bool is_complex(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::is_complex(self);\n}\n", "bool is_nonzero(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::is_nonzero(self);\n}\n", "bool is_same_size(const Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::is_same_size(self, other);\n}\n", "bool is_signed(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::is_signed(self);\n}\n", "Tensor kl_div(const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || target.has_names()) {\n        AT_ERROR(\n            \"kl_div is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::kl_div(self, target, reduction);\n}\n", "std::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, int64_t dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::kthvalue(self, k, dim, keepdim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, Dimname dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::kthvalue(self, k, dim, keepdim);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor &,Tensor &> kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, Dimname dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::kthvalue_out(values, indices, self, k, dim, keepdim);\n}\n#endif", "Tensor layer_norm(const Tensor & input, IntArrayRef normalized_shape, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enable) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"layer_norm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::layer_norm(input, normalized_shape, weight, bias, eps, cudnn_enable);\n}\n", "Tensor linear(const Tensor & input, const Tensor & weight, const Tensor & bias) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"linear is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::linear(input, weight, bias);\n}\n", "Tensor fbgemm_linear_int8_weight_fp32_activation(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || packed.has_names() || col_offsets.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"fbgemm_linear_int8_weight_fp32_activation is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::fbgemm_linear_int8_weight_fp32_activation(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);\n}\n", "Tensor fbgemm_linear_int8_weight(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || packed.has_names() || col_offsets.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"fbgemm_linear_int8_weight is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::fbgemm_linear_int8_weight(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);\n}\n", "std::tuple<Tensor,Tensor,double,int64_t> fbgemm_linear_quantize_weight(const Tensor & input) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names()) {\n        AT_ERROR(\n            \"fbgemm_linear_quantize_weight is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::fbgemm_linear_quantize_weight(input);\n}\n", "Tensor fbgemm_pack_gemm_matrix_fp16(const Tensor & input) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names()) {\n        AT_ERROR(\n            \"fbgemm_pack_gemm_matrix_fp16 is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::fbgemm_pack_gemm_matrix_fp16(input);\n}\n", "Tensor fbgemm_linear_fp16_weight_fp32_activation(const Tensor & input, const Tensor & packed_weight, const Tensor & bias) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || packed_weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"fbgemm_linear_fp16_weight_fp32_activation is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::fbgemm_linear_fp16_weight_fp32_activation(input, packed_weight, bias);\n}\n", "Tensor fbgemm_linear_fp16_weight(const Tensor & input, const Tensor & packed_weight, const Tensor & bias) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || packed_weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"fbgemm_linear_fp16_weight is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::fbgemm_linear_fp16_weight(input, packed_weight, bias);\n}\n", "Tensor fbgemm_pack_quantized_matrix(const Tensor & input) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names()) {\n        AT_ERROR(\n            \"fbgemm_pack_quantized_matrix is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::fbgemm_pack_quantized_matrix(input);\n}\n", "Tensor fbgemm_pack_quantized_matrix(const Tensor & input, int64_t K, int64_t N) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names()) {\n        AT_ERROR(\n            \"fbgemm_pack_quantized_matrix is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::fbgemm_pack_quantized_matrix(input, K, N);\n}\n", "Tensor linspace(Scalar start, Scalar end, int64_t steps, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::linspace(start, end, steps, options);\n}\n", "Tensor log(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::log(self);\n}\n", "Tensor & log_(Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::log_(self);\n}\n", "Tensor log10(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::log10(self);\n}\n", "Tensor log1p(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::log1p(self);\n}\n", "Tensor log2(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::log2(self);\n}\n", "Tensor logdet(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"logdet is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::logdet(self);\n}\n", "Tensor logspace(Scalar start, Scalar end, int64_t steps, double base, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::logspace(start, end, steps, base, options);\n}\n", "Tensor log_softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::log_softmax(self, dim, dtype);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor log_softmax(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::log_softmax(self, dim, dtype);\n}\n#endif", "Tensor logsumexp(const Tensor & self, IntArrayRef dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::logsumexp(self, dim, keepdim);\n}\n", "Tensor & logsumexp_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::logsumexp_out(out, self, dim, keepdim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor logsumexp(const Tensor & self, DimnameList dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::logsumexp(self, dim, keepdim);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & logsumexp_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::logsumexp_out(out, self, dim, keepdim);\n}\n#endif", "Tensor margin_ranking_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input1.has_names() || input2.has_names() || target.has_names()) {\n        AT_ERROR(\n            \"margin_ranking_loss is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input1));\n    return at::native::margin_ranking_loss(input1, input2, target, margin, reduction);\n}\n", "Tensor matmul(const Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::matmul(self, other);\n}\n", "Tensor & matmul_out(Tensor & out, const Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::matmul_out(out, self, other);\n}\n", "Tensor matrix_rank(const Tensor & self, double tol, bool symmetric) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"matrix_rank is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::matrix_rank(self, tol, symmetric);\n}\n", "Tensor matrix_rank(const Tensor & self, bool symmetric) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"matrix_rank is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::matrix_rank(self, symmetric);\n}\n", "Tensor matrix_power(const Tensor & self, int64_t n) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"matrix_power is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::matrix_power(self, n);\n}\n", "std::tuple<Tensor,Tensor> max(const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::max(self, dim, keepdim);\n}\n", "std::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::max_out(max, max_values, self, dim, keepdim);\n}\n", "Tensor max_values(const Tensor & self, IntArrayRef dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"max_values is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::max_values(self, dim, keepdim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> max(const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::max(self, dim, keepdim);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::max_out(max, max_values, self, dim, keepdim);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor max_values(const Tensor & self, DimnameList dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"max_values is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::max_values(self, dim, keepdim);\n}\n#endif", "std::tuple<Tensor,Tensor> max_pool1d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"max_pool1d_with_indices is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::max_pool1d_with_indices(self, kernel_size, stride, padding, dilation, ceil_mode);\n}\n", "Tensor max_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"max_pool1d is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::max_pool1d(self, kernel_size, stride, padding, dilation, ceil_mode);\n}\n", "Tensor max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"max_pool2d is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::max_pool2d(self, kernel_size, stride, padding, dilation, ceil_mode);\n}\n", "Tensor max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"max_pool3d is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::max_pool3d(self, kernel_size, stride, padding, dilation, ceil_mode);\n}\n", "std::tuple<Tensor,Tensor> median(const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::median(self, dim, keepdim);\n}\n", "std::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::median_out(values, indices, self, dim, keepdim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> median(const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::median(self, dim, keepdim);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::median_out(values, indices, self, dim, keepdim);\n}\n#endif", "std::tuple<Tensor,Tensor> min(const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::min(self, dim, keepdim);\n}\n", "std::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::min_out(min, min_indices, self, dim, keepdim);\n}\n", "Tensor min_values(const Tensor & self, IntArrayRef dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"min_values is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::min_values(self, dim, keepdim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> min(const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::min(self, dim, keepdim);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::min_out(min, min_indices, self, dim, keepdim);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor min_values(const Tensor & self, DimnameList dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"min_values is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::min_values(self, dim, keepdim);\n}\n#endif", "Tensor mkldnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"mkldnn_convolution is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::mkldnn_convolution(self, weight, bias, padding, stride, dilation, groups);\n}\n", "Tensor mkldnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) {\n#ifdef BUILD_NAMEDTENSOR\n    if (grad_output.has_names() || weight.has_names()) {\n        AT_ERROR(\n            \"mkldnn_convolution_backward_input is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(grad_output));\n    return at::native::mkldnn_convolution_backward_input(self_size, grad_output, weight, padding, stride, dilation, groups, bias_defined);\n}\n", "std::tuple<Tensor,Tensor> mkldnn_convolution_backward_weights(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) {\n#ifdef BUILD_NAMEDTENSOR\n    if (grad_output.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"mkldnn_convolution_backward_weights is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::mkldnn_convolution_backward_weights(weight_size, grad_output, self, padding, stride, dilation, groups, bias_defined);\n}\n", "std::tuple<Tensor,Tensor,Tensor> mkldnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, std::array<bool,3> output_mask) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || grad_output.has_names() || weight.has_names()) {\n        AT_ERROR(\n            \"mkldnn_convolution_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::mkldnn_convolution_backward(self, grad_output, weight, padding, stride, dilation, groups, output_mask);\n}\n", "Tensor _sparse_mm(const Tensor & sparse, const Tensor & dense) {\n#ifdef BUILD_NAMEDTENSOR\n    if (sparse.has_names() || dense.has_names()) {\n        AT_ERROR(\n            \"_sparse_mm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(sparse));\n    return at::native::_sparse_mm(sparse, dense);\n}\n", "std::tuple<Tensor,Tensor> mode(const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::mode(self, dim, keepdim);\n}\n", "std::tuple<Tensor &,Tensor &> mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::mode_out(values, indices, self, dim, keepdim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> mode(const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::mode(self, dim, keepdim);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor &,Tensor &> mode_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::mode_out(values, indices, self, dim, keepdim);\n}\n#endif", "Tensor mul(const Tensor & self, Scalar other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"mul is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::mul(self, other);\n}\n", "Tensor & mul_(Tensor & self, Scalar other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"mul_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::mul_(self, other);\n}\n", "Tensor mvlgamma(const Tensor & self, int64_t p) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"mvlgamma is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::mvlgamma(self, p);\n}\n", "Tensor & mvlgamma_(Tensor & self, int64_t p) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"mvlgamma_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::mvlgamma_(self, p);\n}\n", "Tensor narrow(const Tensor & self, int64_t dim, int64_t start, int64_t length) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::narrow(self, dim, start, length);\n}\n", "bool _nnpack_available() {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::_nnpack_available();\n}\n", "Tensor _nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef padding) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"_nnpack_spatial_convolution is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::_nnpack_spatial_convolution(input, weight, bias, padding);\n}\n", "std::tuple<Tensor,Tensor,Tensor> _nnpack_spatial_convolution_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, std::array<bool,3> output_mask) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || grad_output.has_names() || weight.has_names()) {\n        AT_ERROR(\n            \"_nnpack_spatial_convolution_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::_nnpack_spatial_convolution_backward(input, grad_output, weight, padding, output_mask);\n}\n", "Tensor _nnpack_spatial_convolution_backward_input(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || grad_output.has_names() || weight.has_names()) {\n        AT_ERROR(\n            \"_nnpack_spatial_convolution_backward_input is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::_nnpack_spatial_convolution_backward_input(input, grad_output, weight, padding);\n}\n", "Tensor _nnpack_spatial_convolution_backward_weight(const Tensor & input, IntArrayRef weightsize, const Tensor & grad_output, IntArrayRef padding) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || grad_output.has_names()) {\n        AT_ERROR(\n            \"_nnpack_spatial_convolution_backward_weight is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::_nnpack_spatial_convolution_backward_weight(input, weightsize, grad_output, padding);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor ones(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::ones(size, names, options);\n}\n#endif", "Tensor ones(IntArrayRef size, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::ones(size, options);\n}\n", "Tensor & ones_out(Tensor & out, IntArrayRef size) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names()) {\n        AT_ERROR(\n            \"ones_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(out));\n    return at::native::ones_out(out, size);\n}\n", "Tensor ones_like(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"ones_like is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::ones_like(self);\n}\n", "Tensor ones_like(const Tensor & self, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"ones_like is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::ones_like(self, options);\n}\n", "Tensor pairwise_distance(const Tensor & x1, const Tensor & x2, double p, double eps, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (x1.has_names() || x2.has_names()) {\n        AT_ERROR(\n            \"pairwise_distance is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(x1));\n    return at::native::pairwise_distance(x1, x2, p, eps, keepdim);\n}\n", "Tensor cdist(const Tensor & x1, const Tensor & x2, double p) {\n#ifdef BUILD_NAMEDTENSOR\n    if (x1.has_names() || x2.has_names()) {\n        AT_ERROR(\n            \"cdist is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(x1));\n    return at::native::cdist(x1, x2, p);\n}\n", "Tensor _cdist_backward(const Tensor & grad, const Tensor & x1, const Tensor & x2, double p, const Tensor & cdist) {\n#ifdef BUILD_NAMEDTENSOR\n    if (grad.has_names() || x1.has_names() || x2.has_names() || cdist.has_names()) {\n        AT_ERROR(\n            \"_cdist_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(grad));\n    return at::native::_cdist_backward(grad, x1, x2, p, cdist);\n}\n", "Tensor pdist(const Tensor & self, double p) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"pdist is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::pdist(self, p);\n}\n", "Tensor _pdist_forward(const Tensor & self, double p) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"_pdist_forward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_pdist_forward(self, p);\n}\n", "Tensor _pdist_backward(const Tensor & grad, const Tensor & self, double p, const Tensor & pdist) {\n#ifdef BUILD_NAMEDTENSOR\n    if (grad.has_names() || self.has_names() || pdist.has_names()) {\n        AT_ERROR(\n            \"_pdist_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_pdist_backward(grad, self, p, pdist);\n}\n", "Tensor cosine_similarity(const Tensor & x1, const Tensor & x2, int64_t dim, double eps) {\n#ifdef BUILD_NAMEDTENSOR\n    if (x1.has_names() || x2.has_names()) {\n        AT_ERROR(\n            \"cosine_similarity is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(x1));\n    return at::native::cosine_similarity(x1, x2, dim, eps);\n}\n", "Tensor permute(const Tensor & self, IntArrayRef dims) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"permute is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::permute(self, dims);\n}\n", "Tensor numpy_T(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"numpy_T is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::numpy_T(self);\n}\n", "Tensor pixel_shuffle(const Tensor & self, int64_t upscale_factor) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"pixel_shuffle is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::pixel_shuffle(self, upscale_factor);\n}\n", "bool is_pinned(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::is_pinned(self);\n}\n", "Tensor pin_memory(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"pin_memory is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::pin_memory(self);\n}\n", "Tensor pinverse(const Tensor & self, double rcond) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"pinverse is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::pinverse(self, rcond);\n}\n", "Tensor poisson_nll_loss(const Tensor & input, const Tensor & target, bool log_input, bool full, double eps, int64_t reduction) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || target.has_names()) {\n        AT_ERROR(\n            \"poisson_nll_loss is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::poisson_nll_loss(input, target, log_input, full, eps, reduction);\n}\n", "Tensor scalar_tensor(Scalar s, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::scalar_tensor(s, options);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor rand(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::rand(size, names, options);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor rand(IntArrayRef size, Generator * generator, c10::optional<DimnameList> names, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::rand(size, generator, names, options);\n}\n#endif", "Tensor rand(IntArrayRef size, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::rand(size, options);\n}\n", "Tensor rand(IntArrayRef size, Generator * generator, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::rand(size, generator, options);\n}\n", "Tensor & rand_out(Tensor & out, IntArrayRef size) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names()) {\n        AT_ERROR(\n            \"rand_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(out));\n    return at::native::rand_out(out, size);\n}\n", "Tensor & rand_out(Tensor & out, IntArrayRef size, Generator * generator) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names()) {\n        AT_ERROR(\n            \"rand_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(out));\n    return at::native::rand_out(out, size, generator);\n}\n", "Tensor rand_like(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"rand_like is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::rand_like(self);\n}\n", "Tensor rand_like(const Tensor & self, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"rand_like is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::rand_like(self, options);\n}\n", "Tensor randint(int64_t high, IntArrayRef size, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::randint(high, size, options);\n}\n", "Tensor randint(int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::randint(high, size, generator, options);\n}\n", "Tensor randint(int64_t low, int64_t high, IntArrayRef size, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::randint(low, high, size, options);\n}\n", "Tensor randint(int64_t low, int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::randint(low, high, size, generator, options);\n}\n", "Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names()) {\n        AT_ERROR(\n            \"randint_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(out));\n    return at::native::randint_out(out, high, size);\n}\n", "Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size, Generator * generator) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names()) {\n        AT_ERROR(\n            \"randint_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(out));\n    return at::native::randint_out(out, high, size, generator);\n}\n", "Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names()) {\n        AT_ERROR(\n            \"randint_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(out));\n    return at::native::randint_out(out, low, high, size);\n}\n", "Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size, Generator * generator) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names()) {\n        AT_ERROR(\n            \"randint_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(out));\n    return at::native::randint_out(out, low, high, size, generator);\n}\n", "Tensor randint_like(const Tensor & self, int64_t high) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"randint_like is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::randint_like(self, high);\n}\n", "Tensor randint_like(const Tensor & self, int64_t low, int64_t high) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"randint_like is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::randint_like(self, low, high);\n}\n", "Tensor randint_like(const Tensor & self, int64_t high, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"randint_like is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::randint_like(self, high, options);\n}\n", "Tensor randint_like(const Tensor & self, int64_t low, int64_t high, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"randint_like is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::randint_like(self, low, high, options);\n}\n", "Tensor randn(IntArrayRef size, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::randn(size, options);\n}\n", "Tensor randn(IntArrayRef size, Generator * generator, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::randn(size, generator, options);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor randn(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::randn(size, names, options);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor randn(IntArrayRef size, Generator * generator, c10::optional<DimnameList> names, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::randn(size, generator, names, options);\n}\n#endif", "Tensor & randn_out(Tensor & out, IntArrayRef size) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names()) {\n        AT_ERROR(\n            \"randn_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(out));\n    return at::native::randn_out(out, size);\n}\n", "Tensor & randn_out(Tensor & out, IntArrayRef size, Generator * generator) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names()) {\n        AT_ERROR(\n            \"randn_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(out));\n    return at::native::randn_out(out, size, generator);\n}\n", "Tensor randn_like(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"randn_like is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::randn_like(self);\n}\n", "Tensor randn_like(const Tensor & self, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"randn_like is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::randn_like(self, options);\n}\n", "Tensor randperm(int64_t n, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::randperm(n, options);\n}\n", "Tensor randperm(int64_t n, Generator * generator, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::randperm(n, generator, options);\n}\n", "Tensor & randperm_out(Tensor & out, int64_t n) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names()) {\n        AT_ERROR(\n            \"randperm_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(out));\n    return at::native::randperm_out(out, n);\n}\n", "Tensor range(Scalar start, Scalar end, Scalar step, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::range(start, end, step, options);\n}\n", "Tensor range(Scalar start, Scalar end, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::range(start, end, options);\n}\n", "Tensor reciprocal(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::reciprocal(self);\n}\n", "Tensor neg(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::neg(self);\n}\n", "Tensor & neg_(Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::neg_(self);\n}\n", "Tensor repeat(const Tensor & self, IntArrayRef repeats) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"repeat is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::repeat(self, repeats);\n}\n", "Tensor repeat_interleave(const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || repeats.has_names()) {\n        AT_ERROR(\n            \"repeat_interleave is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::repeat_interleave(self, repeats, dim);\n}\n", "Tensor repeat_interleave(const Tensor & self, int64_t repeats, c10::optional<int64_t> dim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"repeat_interleave is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::repeat_interleave(self, repeats, dim);\n}\n", "Tensor reshape(const Tensor & self, IntArrayRef shape) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::reshape(self, shape);\n}\n", "Tensor reshape_as(const Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || other.has_names()) {\n        AT_ERROR(\n            \"reshape_as is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    // DeviceGuard omitted\n    return at::native::reshape_as(self, other);\n}\n", "Tensor round(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::round(self);\n}\n", "Tensor & round_(Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::round_(self);\n}\n", "Tensor rrelu(const Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"rrelu is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::rrelu(self, lower, upper, training, generator);\n}\n", "Tensor & rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"rrelu_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::rrelu_(self, lower, upper, training, generator);\n}\n", "Tensor rsqrt(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::rsqrt(self);\n}\n", "Tensor & rsqrt_(Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::rsqrt_(self);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor select(const Tensor & self, Dimname dim, int64_t index) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::select(self, dim, index);\n}\n#endif", "Tensor select(const Tensor & self, int64_t dim, int64_t index) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::select(self, dim, index);\n}\n", "Tensor selu(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"selu is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::selu(self);\n}\n", "Tensor & selu_(Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"selu_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::selu_(self);\n}\n", "Tensor celu(const Tensor & self, Scalar alpha) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"celu is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::celu(self, alpha);\n}\n", "Tensor & celu_(Tensor & self, Scalar alpha) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"celu_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::celu_(self, alpha);\n}\n", "Tensor sin(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::sin(self);\n}\n", "Tensor sinh(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::sinh(self);\n}\n", "Tensor detach(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::detach(self);\n}\n", "Tensor & detach_(Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::detach_(self);\n}\n", "int64_t size(const Tensor & self, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::size(self, dim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nint64_t size(const Tensor & self, Dimname dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::size(self, dim);\n}\n#endif", "Tensor slice(const Tensor & self, int64_t dim, int64_t start, int64_t end, int64_t step) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::slice(self, dim, start, end, step);\n}\n", "std::tuple<Tensor,Tensor> slogdet(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"slogdet is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::slogdet(self);\n}\n", "Tensor smm(const Tensor & self, const Tensor & mat2) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || mat2.has_names()) {\n        AT_ERROR(\n            \"smm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::smm(self, mat2);\n}\n", "Tensor softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::softmax(self, dim, dtype);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor softmax(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::softmax(self, dim, dtype);\n}\n#endif", "std::vector<Tensor> split(const Tensor & self, int64_t split_size, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::split(self, split_size, dim);\n}\n", "std::vector<Tensor> split_with_sizes(const Tensor & self, IntArrayRef split_sizes, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::split_with_sizes(self, split_sizes, dim);\n}\n", "Tensor squeeze(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::squeeze(self);\n}\n", "Tensor squeeze(const Tensor & self, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::squeeze(self, dim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor squeeze(const Tensor & self, Dimname dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::squeeze(self, dim);\n}\n#endif", "Tensor & squeeze_(Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"squeeze_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    // DeviceGuard omitted\n    return at::native::squeeze_(self);\n}\n", "Tensor & squeeze_(Tensor & self, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"squeeze_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    // DeviceGuard omitted\n    return at::native::squeeze_(self, dim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor & squeeze_(Tensor & self, Dimname dim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"squeeze_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    // DeviceGuard omitted\n    return at::native::squeeze_(self, dim);\n}\n#endif", "Tensor sspaddmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || mat1.has_names() || mat2.has_names()) {\n        AT_ERROR(\n            \"sspaddmm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::sspaddmm(self, mat1, mat2, beta, alpha);\n}\n", "Tensor stack(TensorList tensors, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (at::has_names(tensors)) {\n        AT_ERROR(\n            \"stack is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(tensors));\n    return at::native::stack(tensors, dim);\n}\n", "Tensor & stack_out(Tensor & out, TensorList tensors, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || at::has_names(tensors)) {\n        AT_ERROR(\n            \"stack_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(out));\n    return at::native::stack_out(out, tensors, dim);\n}\n", "Tensor stft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const Tensor & window, bool normalized, bool onesided) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || window.has_names()) {\n        AT_ERROR(\n            \"stft is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::stft(self, n_fft, hop_length, win_length, window, normalized, onesided);\n}\n", "int64_t stride(const Tensor & self, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::stride(self, dim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nint64_t stride(const Tensor & self, Dimname dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::stride(self, dim);\n}\n#endif", "Tensor sum(const Tensor & self, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::sum(self, dtype);\n}\n", "Tensor sum(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::sum(self, dim, keepdim, dtype);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor sum(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::sum(self, dim, keepdim, dtype);\n}\n#endif", "Tensor & sum_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::sum_out(out, self, dim, keepdim, dtype);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor & sum_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::sum_out(out, self, dim, keepdim, dtype);\n}\n#endif", "Tensor sum_to_size(const Tensor & self, IntArrayRef size) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"sum_to_size is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    // DeviceGuard omitted\n    return at::native::sum_to_size(self, size);\n}\n", "Tensor sqrt(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::sqrt(self);\n}\n", "Tensor std(const Tensor & self, bool unbiased) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::std(self, unbiased);\n}\n", "Tensor std(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::std(self, dim, unbiased, keepdim);\n}\n", "std::tuple<Tensor,Tensor> std_mean(const Tensor & self, bool unbiased) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::std_mean(self, unbiased);\n}\n", "std::tuple<Tensor,Tensor> std_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::std_mean(self, dim, unbiased, keepdim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> std_mean(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::std_mean(self, dim, unbiased, keepdim);\n}\n#endif", "Tensor & std_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::std_out(out, self, dim, unbiased, keepdim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor std(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::std(self, dim, unbiased, keepdim);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & std_out(Tensor & out, const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::std_out(out, self, dim, unbiased, keepdim);\n}\n#endif", "Tensor prod(const Tensor & self, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::prod(self, dtype);\n}\n", "Tensor prod(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::prod(self, dim, keepdim, dtype);\n}\n", "Tensor & prod_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::prod_out(out, self, dim, keepdim, dtype);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor prod(const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::prod(self, dim, keepdim, dtype);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & prod_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::prod_out(out, self, dim, keepdim, dtype);\n}\n#endif", "Tensor t(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::t(self);\n}\n", "Tensor & t_(Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"t_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    // DeviceGuard omitted\n    return at::native::t_(self);\n}\n", "Tensor tan(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::tan(self);\n}\n", "Tensor tanh(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::tanh(self);\n}\n", "Tensor tensordot(const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || other.has_names()) {\n        AT_ERROR(\n            \"tensordot is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::tensordot(self, other, dims_self, dims_other);\n}\n", "Tensor threshold(const Tensor & self, Scalar threshold, Scalar value) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::threshold(self, threshold, value);\n}\n", "Tensor & threshold_(Tensor & self, Scalar threshold, Scalar value) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::threshold_(self, threshold, value);\n}\n", "Tensor & threshold_out(Tensor & out, const Tensor & self, Scalar threshold, Scalar value) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::threshold_out(out, self, threshold, value);\n}\n", "Tensor threshold_backward(const Tensor & grad_output, const Tensor & self, Scalar threshold) {\n#ifdef BUILD_NAMEDTENSOR\n    if (grad_output.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"threshold_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::threshold_backward(grad_output, self, threshold);\n}\n", "Tensor transpose(const Tensor & self, int64_t dim0, int64_t dim1) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::transpose(self, dim0, dim1);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor transpose(const Tensor & self, Dimname dim0, Dimname dim1) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::transpose(self, dim0, dim1);\n}\n#endif", "Tensor & transpose_(Tensor & self, int64_t dim0, int64_t dim1) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"transpose_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    // DeviceGuard omitted\n    return at::native::transpose_(self, dim0, dim1);\n}\n", "Tensor one_hot(const Tensor & self, int64_t num_classes) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"one_hot is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::one_hot(self, num_classes);\n}\n", "Tensor rot90(const Tensor & self, int64_t k, IntArrayRef dims) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"rot90 is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::rot90(self, k, dims);\n}\n", "Tensor trapz(const Tensor & y, const Tensor & x, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (y.has_names() || x.has_names()) {\n        AT_ERROR(\n            \"trapz is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(y));\n    return at::native::trapz(y, x, dim);\n}\n", "Tensor trapz(const Tensor & y, double dx, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (y.has_names()) {\n        AT_ERROR(\n            \"trapz is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(y));\n    return at::native::trapz(y, dx, dim);\n}\n", "Tensor _trilinear(const Tensor & i1, const Tensor & i2, const Tensor & i3, IntArrayRef expand1, IntArrayRef expand2, IntArrayRef expand3, IntArrayRef sumdim, int64_t unroll_dim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (i1.has_names() || i2.has_names() || i3.has_names()) {\n        AT_ERROR(\n            \"_trilinear is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(i1));\n    return at::native::_trilinear(i1, i2, i3, expand1, expand2, expand3, sumdim, unroll_dim);\n}\n", "Tensor triplet_margin_loss(const Tensor & anchor, const Tensor & positive, const Tensor & negative, double margin, double p, double eps, bool swap, int64_t reduction) {\n#ifdef BUILD_NAMEDTENSOR\n    if (anchor.has_names() || positive.has_names() || negative.has_names()) {\n        AT_ERROR(\n            \"triplet_margin_loss is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(anchor));\n    return at::native::triplet_margin_loss(anchor, positive, negative, margin, p, eps, swap, reduction);\n}\n", "Tensor trunc(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::trunc(self);\n}\n", "Tensor & trunc_(Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::trunc_(self);\n}\n", "Tensor type_as(const Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || other.has_names()) {\n        AT_ERROR(\n            \"type_as is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::type_as(self, other);\n}\n", "bool _has_compatible_shallow_copy_type(const Tensor & self, const Tensor & from) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || from.has_names()) {\n        AT_ERROR(\n            \"_has_compatible_shallow_copy_type is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_has_compatible_shallow_copy_type(self, from);\n}\n", "Tensor _unsafe_view(const Tensor & self, IntArrayRef size) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"_unsafe_view is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_unsafe_view(self, size);\n}\n", "Tensor unsqueeze(const Tensor & self, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"unsqueeze is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    // DeviceGuard omitted\n    return at::native::unsqueeze(self, dim);\n}\n", "Tensor & unsqueeze_(Tensor & self, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"unsqueeze_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    // DeviceGuard omitted\n    return at::native::unsqueeze_(self, dim);\n}\n", "Tensor var(const Tensor & self, bool unbiased) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::var(self, unbiased);\n}\n", "Tensor var(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::var(self, dim, unbiased, keepdim);\n}\n", "Tensor & var_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::var_out(out, self, dim, unbiased, keepdim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor var(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::var(self, dim, unbiased, keepdim);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & var_out(Tensor & out, const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::var_out(out, self, dim, unbiased, keepdim);\n}\n#endif", "std::tuple<Tensor,Tensor> var_mean(const Tensor & self, bool unbiased) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::var_mean(self, unbiased);\n}\n", "std::tuple<Tensor,Tensor> var_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::var_mean(self, dim, unbiased, keepdim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> var_mean(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::var_mean(self, dim, unbiased, keepdim);\n}\n#endif", "Tensor view_as(const Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || other.has_names()) {\n        AT_ERROR(\n            \"view_as is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    // DeviceGuard omitted\n    return at::native::view_as(self, other);\n}\n", "Tensor where(const Tensor & condition, const Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (condition.has_names() || self.has_names() || other.has_names()) {\n        AT_ERROR(\n            \"where is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::where(condition, self, other);\n}\n", "std::vector<Tensor> where(const Tensor & condition) {\n#ifdef BUILD_NAMEDTENSOR\n    if (condition.has_names()) {\n        AT_ERROR(\n            \"where is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(condition));\n    return at::native::where(condition);\n}\n", "Tensor norm_except_dim(const Tensor & v, int64_t pow, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (v.has_names()) {\n        AT_ERROR(\n            \"norm_except_dim is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(v));\n    return at::native::norm_except_dim(v, pow, dim);\n}\n", "Tensor _weight_norm(const Tensor & v, const Tensor & g, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (v.has_names() || g.has_names()) {\n        AT_ERROR(\n            \"_weight_norm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(v));\n    return at::native::_weight_norm(v, g, dim);\n}\n", "std::tuple<Tensor,Tensor> _weight_norm_differentiable_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (grad_w.has_names() || saved_v.has_names() || saved_g.has_names() || saved_norms.has_names()) {\n        AT_ERROR(\n            \"_weight_norm_differentiable_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(grad_w));\n    return at::native::_weight_norm_differentiable_backward(grad_w, saved_v, saved_g, saved_norms, dim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor zeros(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::zeros(size, names, options);\n}\n#endif", "Tensor zeros(IntArrayRef size, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::zeros(size, options);\n}\n", "Tensor & zeros_out(Tensor & out, IntArrayRef size) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names()) {\n        AT_ERROR(\n            \"zeros_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(out));\n    return at::native::zeros_out(out, size);\n}\n", "Tensor zeros_like(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"zeros_like is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::zeros_like(self);\n}\n", "Tensor zeros_like(const Tensor & self, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"zeros_like is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::zeros_like(self, options);\n}\n", "Tensor _sparse_sum(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"_sparse_sum is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_sparse_sum(self);\n}\n", "Tensor _sparse_sum(const Tensor & self, ScalarType dtype) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"_sparse_sum is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_sparse_sum(self, dtype);\n}\n", "Tensor _sparse_sum(const Tensor & self, IntArrayRef dim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"_sparse_sum is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_sparse_sum(self, dim);\n}\n", "Tensor _sparse_sum(const Tensor & self, IntArrayRef dim, ScalarType dtype) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"_sparse_sum is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_sparse_sum(self, dim, dtype);\n}\n", "Tensor norm(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"norm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::norm(self, p, dtype);\n}\n", "Tensor norm(const Tensor & self, Scalar p) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"norm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::norm(self, p);\n}\n", "Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"norm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::norm(self, p, dim, keepdim, dtype);\n}\n", "Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"norm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::norm(self, p, dim, keepdim);\n}\n", "Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"norm_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::norm_out(out, self, p, dim, keepdim, dtype);\n}\n", "Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"norm_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::norm_out(out, self, p, dim, keepdim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor norm(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"norm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::norm(self, p, dim, keepdim, dtype);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor norm(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"norm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::norm(self, p, dim, keepdim);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"norm_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::norm_out(out, self, p, dim, keepdim, dtype);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"norm_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::norm_out(out, self, p, dim, keepdim);\n}\n#endif", "Tensor frobenius_norm(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"frobenius_norm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::frobenius_norm(self);\n}\n", "Tensor frobenius_norm(const Tensor & self, IntArrayRef dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"frobenius_norm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::frobenius_norm(self, dim, keepdim);\n}\n", "Tensor & frobenius_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"frobenius_norm_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::frobenius_norm_out(out, self, dim, keepdim);\n}\n", "Tensor nuclear_norm(const Tensor & self, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"nuclear_norm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::nuclear_norm(self, keepdim);\n}\n", "Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"nuclear_norm_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::nuclear_norm_out(out, self, keepdim);\n}\n", "Tensor nuclear_norm(const Tensor & self, IntArrayRef dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"nuclear_norm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::nuclear_norm(self, dim, keepdim);\n}\n", "Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"nuclear_norm_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::nuclear_norm_out(out, self, dim, keepdim);\n}\n", "Tensor & resize_as_(Tensor & self, const Tensor & the_template) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::resize_as_(self, the_template);\n}\n", "Tensor sub(const Tensor & self, Scalar other, Scalar alpha) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::sub(self, other, alpha);\n}\n", "Tensor & sub_(Tensor & self, Scalar other, Scalar alpha) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::sub_(self, other, alpha);\n}\n", "Tensor rsub(const Tensor & self, const Tensor & other, Scalar alpha) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::rsub(self, other, alpha);\n}\n", "Tensor rsub(const Tensor & self, Scalar other, Scalar alpha) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::rsub(self, other, alpha);\n}\n", "Tensor _sparse_addmm(const Tensor & self, const Tensor & sparse, const Tensor & dense, Scalar beta, Scalar alpha) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || sparse.has_names() || dense.has_names()) {\n        AT_ERROR(\n            \"_sparse_addmm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_sparse_addmm(self, sparse, dense, beta, alpha);\n}\n", "Tensor sparse_coo_tensor(IntArrayRef size, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::sparse_coo_tensor(size, options);\n}\n", "Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n    if (indices.has_names() || values.has_names()) {\n        AT_ERROR(\n            \"sparse_coo_tensor is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::sparse_coo_tensor(indices, values, options);\n}\n", "Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n    if (indices.has_names() || values.has_names()) {\n        AT_ERROR(\n            \"sparse_coo_tensor is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::sparse_coo_tensor(indices, values, size, options);\n}\n", "Tensor _sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n    if (indices.has_names() || values.has_names()) {\n        AT_ERROR(\n            \"_sparse_coo_tensor_unsafe is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::_sparse_coo_tensor_unsafe(indices, values, size, options);\n}\n", "Tensor to_dense_backward(const Tensor & grad, const Tensor & input) {\n#ifdef BUILD_NAMEDTENSOR\n    if (grad.has_names() || input.has_names()) {\n        AT_ERROR(\n            \"to_dense_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(grad));\n    return at::native::to_dense_backward(grad, input);\n}\n", "int64_t numel(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::numel(self);\n}\n", "std::vector<Tensor> unbind(const Tensor & self, int64_t dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::unbind(self, dim);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstd::vector<Tensor> unbind(const Tensor & self, Dimname dim) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::unbind(self, dim);\n}\n#endif", "Tensor to_mkldnn_backward(const Tensor & grad, const Tensor & input) {\n#ifdef BUILD_NAMEDTENSOR\n    if (grad.has_names() || input.has_names()) {\n        AT_ERROR(\n            \"to_mkldnn_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(grad));\n    return at::native::to_mkldnn_backward(grad, input);\n}\n", "Tensor to(const Tensor & self, const TensorOptions & options, bool non_blocking, bool copy) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::to(self, options, non_blocking, copy);\n}\n", "Tensor to(const Tensor & self, Device device, ScalarType dtype, bool non_blocking, bool copy) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::to(self, device, dtype, non_blocking, copy);\n}\n", "Tensor to(const Tensor & self, ScalarType dtype, bool non_blocking, bool copy) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::to(self, dtype, non_blocking, copy);\n}\n", "Tensor to(const Tensor & self, const Tensor & other, bool non_blocking, bool copy) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || other.has_names()) {\n        AT_ERROR(\n            \"to is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    // DeviceGuard omitted\n    return at::native::to(self, other, non_blocking, copy);\n}\n", "std::vector<Tensor> meshgrid(TensorList tensors) {\n#ifdef BUILD_NAMEDTENSOR\n    if (at::has_names(tensors)) {\n        AT_ERROR(\n            \"meshgrid is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(tensors));\n    return at::native::meshgrid(tensors);\n}\n", "Tensor cartesian_prod(TensorList tensors) {\n#ifdef BUILD_NAMEDTENSOR\n    if (at::has_names(tensors)) {\n        AT_ERROR(\n            \"cartesian_prod is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(tensors));\n    return at::native::cartesian_prod(tensors);\n}\n", "Tensor combinations(const Tensor & self, int64_t r, bool with_replacement) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"combinations is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::combinations(self, r, with_replacement);\n}\n", "Scalar item(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::item(self);\n}\n", "ScalarType result_type(const Tensor & tensor, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (tensor.has_names() || other.has_names()) {\n        AT_ERROR(\n            \"result_type is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(tensor));\n    return at::native::result_type(tensor, other);\n}\n", "ScalarType result_type(const Tensor & tensor, Scalar other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (tensor.has_names()) {\n        AT_ERROR(\n            \"result_type is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(tensor));\n    return at::native::result_type(tensor, other);\n}\n", "ScalarType result_type(Scalar scalar, const Tensor & tensor) {\n#ifdef BUILD_NAMEDTENSOR\n    if (tensor.has_names()) {\n        AT_ERROR(\n            \"result_type is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(tensor));\n    return at::native::result_type(scalar, tensor);\n}\n", "ScalarType result_type(Scalar scalar1, Scalar scalar2) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::result_type(scalar1, scalar2);\n}\n", "bool can_cast(ScalarType from, ScalarType to) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::can_cast(from, to);\n}\n", "ScalarType promote_types(ScalarType type1, ScalarType type2) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    // DeviceGuard omitted\n    return at::native::promote_types(type1, type2);\n}\n", "std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & input_bias, const Tensor & hidden_bias, const Tensor & cx, const Tensor & cy) {\n#ifdef BUILD_NAMEDTENSOR\n    if (grad_hy.has_names() || grad_cy.has_names() || input_gates.has_names() || hidden_gates.has_names() || input_bias.has_names() || hidden_bias.has_names() || cx.has_names() || cy.has_names()) {\n        AT_ERROR(\n            \"_thnn_differentiable_lstm_cell_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input_gates));\n    return at::native::_thnn_differentiable_lstm_cell_backward(grad_hy, grad_cy, input_gates, hidden_gates, input_bias, hidden_bias, cx, cy);\n}\n", "std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_gru_cell_backward(const Tensor & grad_hy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias) {\n#ifdef BUILD_NAMEDTENSOR\n    if (grad_hy.has_names() || input_gates.has_names() || hidden_gates.has_names() || hx.has_names() || input_bias.has_names() || hidden_bias.has_names()) {\n        AT_ERROR(\n            \"_thnn_differentiable_gru_cell_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(grad_hy));\n    return at::native::_thnn_differentiable_gru_cell_backward(grad_hy, input_gates, hidden_gates, hx, input_bias, hidden_bias);\n}\n", "std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || at::has_names(hx) || at::has_names(params)) {\n        AT_ERROR(\n            \"lstm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::lstm(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);\n}\n", "std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {\n#ifdef BUILD_NAMEDTENSOR\n    if (data.has_names() || batch_sizes.has_names() || at::has_names(hx) || at::has_names(params)) {\n        AT_ERROR(\n            \"lstm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(data));\n    return at::native::lstm(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);\n}\n", "std::tuple<Tensor,Tensor> gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || hx.has_names() || at::has_names(params)) {\n        AT_ERROR(\n            \"gru is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::gru(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);\n}\n", "std::tuple<Tensor,Tensor> gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {\n#ifdef BUILD_NAMEDTENSOR\n    if (data.has_names() || batch_sizes.has_names() || hx.has_names() || at::has_names(params)) {\n        AT_ERROR(\n            \"gru is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(data));\n    return at::native::gru(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);\n}\n", "std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || hx.has_names() || at::has_names(params)) {\n        AT_ERROR(\n            \"rnn_tanh is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::rnn_tanh(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);\n}\n", "std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {\n#ifdef BUILD_NAMEDTENSOR\n    if (data.has_names() || batch_sizes.has_names() || hx.has_names() || at::has_names(params)) {\n        AT_ERROR(\n            \"rnn_tanh is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(data));\n    return at::native::rnn_tanh(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);\n}\n", "std::tuple<Tensor,Tensor> rnn_relu(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || hx.has_names() || at::has_names(params)) {\n        AT_ERROR(\n            \"rnn_relu is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::rnn_relu(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);\n}\n", "std::tuple<Tensor,Tensor> rnn_relu(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {\n#ifdef BUILD_NAMEDTENSOR\n    if (data.has_names() || batch_sizes.has_names() || hx.has_names() || at::has_names(params)) {\n        AT_ERROR(\n            \"rnn_relu is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(data));\n    return at::native::rnn_relu(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);\n}\n", "std::tuple<Tensor,Tensor> lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || at::has_names(hx)) {\n        AT_ERROR(\n            \"lstm_cell is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::lstm_cell(input, hx, w_ih, w_hh, b_ih, b_hh);\n}\n", "Tensor gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names()) {\n        AT_ERROR(\n            \"gru_cell is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::gru_cell(input, hx, w_ih, w_hh, b_ih, b_hh);\n}\n", "Tensor rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names()) {\n        AT_ERROR(\n            \"rnn_tanh_cell is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::rnn_tanh_cell(input, hx, w_ih, w_hh, b_ih, b_hh);\n}\n", "Tensor rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names()) {\n        AT_ERROR(\n            \"rnn_relu_cell is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::rnn_relu_cell(input, hx, w_ih, w_hh, b_ih, b_hh);\n}\n", "std::tuple<Tensor,Tensor,Tensor> quantized_lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first, c10::optional<ScalarType> dtype, bool use_dynamic) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || at::has_names(hx) || at::has_names(params)) {\n        AT_ERROR(\n            \"quantized_lstm is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::quantized_lstm(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first, dtype, use_dynamic);\n}\n", "std::tuple<Tensor,Tensor> quantized_gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || hx.has_names() || at::has_names(params)) {\n        AT_ERROR(\n            \"quantized_gru is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::quantized_gru(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);\n}\n", "std::tuple<Tensor,Tensor> quantized_gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {\n#ifdef BUILD_NAMEDTENSOR\n    if (data.has_names() || batch_sizes.has_names() || hx.has_names() || at::has_names(params)) {\n        AT_ERROR(\n            \"quantized_gru is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(data));\n    return at::native::quantized_gru(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);\n}\n", "std::tuple<Tensor,Tensor> quantized_lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || packed_ih.has_names() || packed_hh.has_names() || col_offsets_ih.has_names() || col_offsets_hh.has_names() || at::has_names(hx)) {\n        AT_ERROR(\n            \"quantized_lstm_cell is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::quantized_lstm_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);\n}\n", "Tensor quantized_gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || packed_ih.has_names() || packed_hh.has_names() || col_offsets_ih.has_names() || col_offsets_hh.has_names()) {\n        AT_ERROR(\n            \"quantized_gru_cell is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::quantized_gru_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);\n}\n", "Tensor quantized_rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || packed_ih.has_names() || packed_hh.has_names() || col_offsets_ih.has_names() || col_offsets_hh.has_names()) {\n        AT_ERROR(\n            \"quantized_rnn_relu_cell is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::quantized_rnn_relu_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);\n}\n", "Tensor quantized_rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || packed_ih.has_names() || packed_hh.has_names() || col_offsets_ih.has_names() || col_offsets_hh.has_names()) {\n        AT_ERROR(\n            \"quantized_rnn_tanh_cell is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::quantized_rnn_tanh_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);\n}\n", "std::tuple<Tensor,Tensor> _pack_padded_sequence(const Tensor & input, const Tensor & lengths, bool batch_first) {\n#ifdef BUILD_NAMEDTENSOR\n    if (input.has_names() || lengths.has_names()) {\n        AT_ERROR(\n            \"_pack_padded_sequence is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(input));\n    return at::native::_pack_padded_sequence(input, lengths, batch_first);\n}\n", "Tensor _pack_padded_sequence_backward(const Tensor & grad, IntArrayRef input_size, const Tensor & batch_sizes, bool batch_first) {\n#ifdef BUILD_NAMEDTENSOR\n    if (grad.has_names() || batch_sizes.has_names()) {\n        AT_ERROR(\n            \"_pack_padded_sequence_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(grad));\n    return at::native::_pack_padded_sequence_backward(grad, input_size, batch_sizes, batch_first);\n}\n", "std::tuple<Tensor,Tensor> _pad_packed_sequence(const Tensor & data, const Tensor & batch_sizes, bool batch_first, Scalar padding_value, int64_t total_length) {\n#ifdef BUILD_NAMEDTENSOR\n    if (data.has_names() || batch_sizes.has_names()) {\n        AT_ERROR(\n            \"_pad_packed_sequence is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(data));\n    return at::native::_pad_packed_sequence(data, batch_sizes, batch_first, padding_value, total_length);\n}\n", "Tensor masked_fill(const Tensor & self, const Tensor & mask, Scalar value) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::masked_fill(self, mask, value);\n}\n", "Tensor masked_fill(const Tensor & self, const Tensor & mask, const Tensor & value) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::masked_fill(self, mask, value);\n}\n", "Tensor masked_scatter(const Tensor & self, const Tensor & mask, const Tensor & source) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || mask.has_names() || source.has_names()) {\n        AT_ERROR(\n            \"masked_scatter is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::masked_scatter(self, mask, source);\n}\n", "Tensor index_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || index.has_names() || source.has_names()) {\n        AT_ERROR(\n            \"index_add is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::index_add(self, dim, index, source);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor index_add(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || index.has_names() || source.has_names()) {\n        AT_ERROR(\n            \"index_add is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::index_add(self, dim, index, source);\n}\n#endif", "Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::index_fill(self, dim, index, value);\n}\n", "Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::index_fill(self, dim, index, value);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor & index_fill_(Tensor & self, Dimname dim, const Tensor & index, Scalar value) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::index_fill_(self, dim, index, value);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & index_fill_(Tensor & self, Dimname dim, const Tensor & index, const Tensor & value) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::index_fill_(self, dim, index, value);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor index_fill(const Tensor & self, Dimname dim, const Tensor & index, Scalar value) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::index_fill(self, dim, index, value);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor index_fill(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & value) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::index_fill(self, dim, index, value);\n}\n#endif", "Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || index.has_names() || src.has_names()) {\n        AT_ERROR(\n            \"scatter is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::scatter(self, dim, index, src);\n}\n", "Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || index.has_names()) {\n        AT_ERROR(\n            \"scatter is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::scatter(self, dim, index, value);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor scatter(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || index.has_names() || src.has_names()) {\n        AT_ERROR(\n            \"scatter is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::scatter(self, dim, index, src);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor scatter(const Tensor & self, Dimname dim, const Tensor & index, Scalar value) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || index.has_names()) {\n        AT_ERROR(\n            \"scatter is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::scatter(self, dim, index, value);\n}\n#endif", "Tensor scatter_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || index.has_names() || src.has_names()) {\n        AT_ERROR(\n            \"scatter_add is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::scatter_add(self, dim, index, src);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor scatter_add(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || index.has_names() || src.has_names()) {\n        AT_ERROR(\n            \"scatter_add is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::scatter_add(self, dim, index, src);\n}\n#endif", "Tensor & lt_(Tensor & self, Scalar other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"lt_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::lt_(self, other);\n}\n", "Tensor & lt_(Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || other.has_names()) {\n        AT_ERROR(\n            \"lt_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::lt_(self, other);\n}\n", "Tensor & gt_(Tensor & self, Scalar other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"gt_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::gt_(self, other);\n}\n", "Tensor & gt_(Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || other.has_names()) {\n        AT_ERROR(\n            \"gt_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::gt_(self, other);\n}\n", "Tensor & le_(Tensor & self, Scalar other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"le_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::le_(self, other);\n}\n", "Tensor & le_(Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || other.has_names()) {\n        AT_ERROR(\n            \"le_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::le_(self, other);\n}\n", "Tensor & ge_(Tensor & self, Scalar other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"ge_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::ge_(self, other);\n}\n", "Tensor & ge_(Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || other.has_names()) {\n        AT_ERROR(\n            \"ge_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::ge_(self, other);\n}\n", "Tensor & eq_(Tensor & self, Scalar other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"eq_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::eq_(self, other);\n}\n", "Tensor & eq_(Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || other.has_names()) {\n        AT_ERROR(\n            \"eq_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::eq_(self, other);\n}\n", "Tensor & ne_(Tensor & self, Scalar other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"ne_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::ne_(self, other);\n}\n", "Tensor & ne_(Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || other.has_names()) {\n        AT_ERROR(\n            \"ne_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::ne_(self, other);\n}\n", "Tensor & atan2_(Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::atan2_(self, other);\n}\n", "Tensor & digamma_(Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::digamma_(self);\n}\n", "Tensor & polygamma_(Tensor & self, int64_t n) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::polygamma_(self, n);\n}\n", "Tensor & addcdiv_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || tensor1.has_names() || tensor2.has_names()) {\n        AT_ERROR(\n            \"addcdiv_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::addcdiv_(self, tensor1, tensor2, value);\n}\n", "Tensor & cross_out(Tensor & out, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names() || other.has_names()) {\n        AT_ERROR(\n            \"cross_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::cross_out(out, self, other, dim);\n}\n", "Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || other.has_names()) {\n        AT_ERROR(\n            \"cross is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::cross(self, other, dim);\n}\n", "Tensor triu(const Tensor & self, int64_t diagonal) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"triu is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::triu(self, diagonal);\n}\n", "Tensor tril(const Tensor & self, int64_t diagonal) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"tril is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::tril(self, diagonal);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor & index_select_out(Tensor & out, const Tensor & self, Dimname dim, const Tensor & index) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names() || index.has_names()) {\n        AT_ERROR(\n            \"index_select_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::index_select_out(out, self, dim, index);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor index_select(const Tensor & self, Dimname dim, const Tensor & index) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || index.has_names()) {\n        AT_ERROR(\n            \"index_select is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::index_select(self, dim, index);\n}\n#endif", "std::vector<Tensor> nonzero_numpy(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"nonzero_numpy is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::nonzero_numpy(self);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor & gather_out(Tensor & out, const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names() || index.has_names()) {\n        AT_ERROR(\n            \"gather_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::gather_out(out, self, dim, index, sparse_grad);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor gather(const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || index.has_names()) {\n        AT_ERROR(\n            \"gather is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::gather(self, dim, index, sparse_grad);\n}\n#endif", "Tensor _gather_sparse_backward(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & grad) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || index.has_names() || grad.has_names()) {\n        AT_ERROR(\n            \"_gather_sparse_backward is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::_gather_sparse_backward(self, dim, index, grad);\n}\n", "Tensor & addcmul_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names() || tensor1.has_names() || tensor2.has_names()) {\n        AT_ERROR(\n            \"addcmul_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::addcmul_out(out, self, tensor1, tensor2, value);\n}\n", "Tensor addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || tensor1.has_names() || tensor2.has_names()) {\n        AT_ERROR(\n            \"addcmul is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::addcmul(self, tensor1, tensor2, value);\n}\n", "Tensor & addcmul_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || tensor1.has_names() || tensor2.has_names()) {\n        AT_ERROR(\n            \"addcmul_ is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::addcmul_(self, tensor1, tensor2, value);\n}\n", "Tensor & addcdiv_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names() || tensor1.has_names() || tensor2.has_names()) {\n        AT_ERROR(\n            \"addcdiv_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::addcdiv_out(out, self, tensor1, tensor2, value);\n}\n", "Tensor addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || tensor1.has_names() || tensor2.has_names()) {\n        AT_ERROR(\n            \"addcdiv is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::addcdiv(self, tensor1, tensor2, value);\n}\n", "std::tuple<Tensor &,Tensor &> triangular_solve_out(Tensor & X, Tensor & M, const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {\n#ifdef BUILD_NAMEDTENSOR\n    if (X.has_names() || M.has_names() || self.has_names() || A.has_names()) {\n        AT_ERROR(\n            \"triangular_solve_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::triangular_solve_out(X, M, self, A, upper, transpose, unitriangular);\n}\n", "std::tuple<Tensor,Tensor> triangular_solve(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || A.has_names()) {\n        AT_ERROR(\n            \"triangular_solve is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::triangular_solve(self, A, upper, transpose, unitriangular);\n}\n", "std::tuple<Tensor &,Tensor &> symeig_out(Tensor & e, Tensor & V, const Tensor & self, bool eigenvectors, bool upper) {\n#ifdef BUILD_NAMEDTENSOR\n    if (e.has_names() || V.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"symeig_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::symeig_out(e, V, self, eigenvectors, upper);\n}\n", "std::tuple<Tensor,Tensor> symeig(const Tensor & self, bool eigenvectors, bool upper) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"symeig is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::symeig(self, eigenvectors, upper);\n}\n", "std::tuple<Tensor &,Tensor &,Tensor &> svd_out(Tensor & U, Tensor & S, Tensor & V, const Tensor & self, bool some, bool compute_uv) {\n#ifdef BUILD_NAMEDTENSOR\n    if (U.has_names() || S.has_names() || V.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"svd_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::svd_out(U, S, V, self, some, compute_uv);\n}\n", "std::tuple<Tensor,Tensor,Tensor> svd(const Tensor & self, bool some, bool compute_uv) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"svd is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::svd(self, some, compute_uv);\n}\n", "Tensor & cholesky_out(Tensor & out, const Tensor & self, bool upper) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"cholesky_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::cholesky_out(out, self, upper);\n}\n", "Tensor cholesky(const Tensor & self, bool upper) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"cholesky is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::cholesky(self, upper);\n}\n", "Tensor & cholesky_solve_out(Tensor & out, const Tensor & self, const Tensor & input2, bool upper) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names() || input2.has_names()) {\n        AT_ERROR(\n            \"cholesky_solve_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::cholesky_solve_out(out, self, input2, upper);\n}\n", "Tensor cholesky_solve(const Tensor & self, const Tensor & input2, bool upper) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || input2.has_names()) {\n        AT_ERROR(\n            \"cholesky_solve is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::cholesky_solve(self, input2, upper);\n}\n", "std::tuple<Tensor,Tensor> solve(const Tensor & self, const Tensor & A) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || A.has_names()) {\n        AT_ERROR(\n            \"solve is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::solve(self, A);\n}\n", "std::tuple<Tensor &,Tensor &> solve_out(Tensor & solution, Tensor & lu, const Tensor & self, const Tensor & A) {\n#ifdef BUILD_NAMEDTENSOR\n    if (solution.has_names() || lu.has_names() || self.has_names() || A.has_names()) {\n        AT_ERROR(\n            \"solve_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::solve_out(solution, lu, self, A);\n}\n", "std::tuple<Tensor &,Tensor &> qr_out(Tensor & Q, Tensor & R, const Tensor & self, bool some) {\n#ifdef BUILD_NAMEDTENSOR\n    if (Q.has_names() || R.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"qr_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::qr_out(Q, R, self, some);\n}\n", "std::tuple<Tensor,Tensor> qr(const Tensor & self, bool some) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"qr is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::qr(self, some);\n}\n", "Tensor & lu_solve_out(Tensor & out, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names() || LU_data.has_names() || LU_pivots.has_names()) {\n        AT_ERROR(\n            \"lu_solve_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::lu_solve_out(out, self, LU_data, LU_pivots);\n}\n", "Tensor lu_solve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || LU_data.has_names() || LU_pivots.has_names()) {\n        AT_ERROR(\n            \"lu_solve is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::lu_solve(self, LU_data, LU_pivots);\n}\n", "Tensor & digamma_out(Tensor & out, const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::digamma_out(out, self);\n}\n", "Tensor digamma(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::digamma(self);\n}\n", "Tensor & polygamma_out(Tensor & out, int64_t n, const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::polygamma_out(out, n, self);\n}\n", "Tensor polygamma(int64_t n, const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::polygamma(n, self);\n}\n", "Tensor sign(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::sign(self);\n}\n", "Tensor & sign_(Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::sign_(self);\n}\n", "Tensor & atan2_out(Tensor & out, const Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::atan2_out(out, self, other);\n}\n", "Tensor atan2(const Tensor & self, const Tensor & other) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::atan2(self, other);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor &,Tensor &> sort_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool descending) {\n#ifdef BUILD_NAMEDTENSOR\n    if (values.has_names() || indices.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"sort_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::sort_out(values, indices, self, dim, descending);\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> sort(const Tensor & self, Dimname dim, bool descending) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"sort is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::sort(self, dim, descending);\n}\n#endif", "Tensor argsort(const Tensor & self, int64_t dim, bool descending) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"argsort is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::argsort(self, dim, descending);\n}\n", "#ifdef BUILD_NAMEDTENSOR\nTensor argsort(const Tensor & self, Dimname dim, bool descending) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"argsort is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::argsort(self, dim, descending);\n}\n#endif", "Tensor all(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::all(self);\n}\n", "Tensor any(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::any(self);\n}\n", "Tensor normal(double mean, double std, IntArrayRef size, Generator * generator, const TensorOptions & options) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const DeviceGuard device_guard(options.device());\n    return at::native::normal(mean, std, size, generator, options);\n}\n", "Tensor & normal_out(Tensor & out, double mean, double std, IntArrayRef size, Generator * generator) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names()) {\n        AT_ERROR(\n            \"normal_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(out));\n    return at::native::normal_out(out, mean, std, size, generator);\n}\n", "Tensor alias(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::alias(self);\n}\n", "Tensor & multilabel_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names() || target.has_names()) {\n        AT_ERROR(\n            \"multilabel_margin_loss_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::multilabel_margin_loss_out(out, self, target, reduction);\n}\n", "Tensor multilabel_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || target.has_names()) {\n        AT_ERROR(\n            \"multilabel_margin_loss is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::multilabel_margin_loss(self, target, reduction);\n}\n", "Tensor & nll_loss_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names() || target.has_names() || weight.has_names()) {\n        AT_ERROR(\n            \"nll_loss_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::nll_loss_out(out, self, target, weight, reduction, ignore_index);\n}\n", "Tensor nll_loss(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || target.has_names() || weight.has_names()) {\n        AT_ERROR(\n            \"nll_loss is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::nll_loss(self, target, weight, reduction, ignore_index);\n}\n", "Tensor & nll_loss2d_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names() || target.has_names() || weight.has_names()) {\n        AT_ERROR(\n            \"nll_loss2d_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::nll_loss2d_out(out, self, target, weight, reduction, ignore_index);\n}\n", "Tensor nll_loss2d(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || target.has_names() || weight.has_names()) {\n        AT_ERROR(\n            \"nll_loss2d is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::nll_loss2d(self, target, weight, reduction, ignore_index);\n}\n", "Tensor & log_sigmoid_out(Tensor & out, const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names()) {\n        AT_ERROR(\n            \"log_sigmoid_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::log_sigmoid_out(out, self);\n}\n", "Tensor log_sigmoid(const Tensor & self) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"log_sigmoid is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::log_sigmoid(self);\n}\n", "Tensor adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names()) {\n        AT_ERROR(\n            \"adaptive_avg_pool2d is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::adaptive_avg_pool2d(self, output_size);\n}\n", "Tensor & thnn_conv2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"thnn_conv2d_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::thnn_conv2d_out(out, self, weight, kernel_size, bias, stride, padding);\n}\n", "Tensor thnn_conv2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"thnn_conv2d is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::thnn_conv2d(self, weight, kernel_size, bias, stride, padding);\n}\n", "Tensor & thnn_conv_depthwise2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"thnn_conv_depthwise2d_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::thnn_conv_depthwise2d_out(out, self, weight, kernel_size, bias, stride, padding, dilation);\n}\n", "Tensor thnn_conv_depthwise2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"thnn_conv_depthwise2d is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::thnn_conv_depthwise2d(self, weight, kernel_size, bias, stride, padding, dilation);\n}\n", "Tensor & thnn_conv3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {\n#ifdef BUILD_NAMEDTENSOR\n    if (out.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"thnn_conv3d_out is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::thnn_conv3d_out(out, self, weight, kernel_size, bias, stride, padding);\n}\n", "Tensor thnn_conv3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {\n#ifdef BUILD_NAMEDTENSOR\n    if (self.has_names() || weight.has_names() || bias.has_names()) {\n        AT_ERROR(\n            \"thnn_conv3d is not yet supported with named tensors. Please drop names via \"\n            \"`tensor = tensor.rename(None)`, call the op with an unnamed tensor, \"\n            \"and set names on the result of the operation.\");\n    }\n#endif\n    const OptionalDeviceGuard device_guard(device_of(self));\n    return at::native::thnn_conv3d(self, weight, kernel_size, bias, stride, padding);\n}\n"], "tensor_method_declarations": ["void backward(const Tensor & gradient={}, bool keep_graph=false, bool create_graph=false) const;\n", "void set_data(const Tensor & new_data) const;\n", "Tensor data() const;\n", "bool is_leaf() const;\n", "int64_t output_nr() const;\n", "int64_t _version() const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor & rename_(c10::optional<DimnameList> names) const;\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor rename(c10::optional<DimnameList> names) const;\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor align_to(DimnameList names) const;\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor align_as(const Tensor & other) const;\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor refine_names(DimnameList names) const;\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor unflatten(Dimname dim, IntArrayRef sizes, DimnameList names) const;\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor unflatten(int64_t dim, IntArrayRef sizes, DimnameList names) const;\n#endif", "Tensor abs() const;\n", "Tensor & abs_() const;\n", "Tensor acos() const;\n", "Tensor & acos_() const;\n", "Tensor add(const Tensor & other, Scalar alpha=1) const;\n", "Tensor & add_(const Tensor & other, Scalar alpha=1) const;\n", "Tensor add(Scalar other, Scalar alpha=1) const;\n", "Tensor & add_(Scalar other, Scalar alpha=1) const;\n", "Tensor addmv(const Tensor & mat, const Tensor & vec, Scalar beta=1, Scalar alpha=1) const;\n", "Tensor & addmv_(const Tensor & mat, const Tensor & vec, Scalar beta=1, Scalar alpha=1) const;\n", "Tensor addr(const Tensor & vec1, const Tensor & vec2, Scalar beta=1, Scalar alpha=1) const;\n", "Tensor & addr_(const Tensor & vec1, const Tensor & vec2, Scalar beta=1, Scalar alpha=1) const;\n", "Tensor all(int64_t dim, bool keepdim=false) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor all(Dimname dim, bool keepdim=false) const;\n#endif", "bool allclose(const Tensor & other, double rtol=1e-05, double atol=1e-08, bool equal_nan=false) const;\n", "Tensor any(int64_t dim, bool keepdim=false) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor any(Dimname dim, bool keepdim=false) const;\n#endif", "Tensor argmax(c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false) const;\n", "Tensor argmin(c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false) const;\n", "Tensor as_strided(IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset=c10::nullopt) const;\n", "Tensor & as_strided_(IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset=c10::nullopt) const;\n", "Tensor asin() const;\n", "Tensor & asin_() const;\n", "Tensor atan() const;\n", "Tensor & atan_() const;\n", "Tensor baddbmm(const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1) const;\n", "Tensor & baddbmm_(const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1) const;\n", "Tensor bernoulli(Generator * generator=nullptr) const;\n", "Tensor & bernoulli_(const Tensor & p, Generator * generator=nullptr) const;\n", "Tensor & bernoulli_(double p=0.5, Generator * generator=nullptr) const;\n", "Tensor bernoulli(double p, Generator * generator=nullptr) const;\n", "Tensor bincount(const Tensor & weights={}, int64_t minlength=0) const;\n", "Tensor bitwise_not() const;\n", "Tensor & bitwise_not_() const;\n", "Tensor logical_not() const;\n", "Tensor & logical_not_() const;\n", "Tensor logical_xor(const Tensor & other) const;\n", "Tensor & logical_xor_(const Tensor & other) const;\n", "Tensor bmm(const Tensor & mat2) const;\n", "Tensor ceil() const;\n", "Tensor & ceil_() const;\n", "std::vector<Tensor> chunk(int64_t chunks, int64_t dim=0) const;\n", "Tensor clamp(c10::optional<Scalar> min=c10::nullopt, c10::optional<Scalar> max=c10::nullopt) const;\n", "Tensor & clamp_(c10::optional<Scalar> min=c10::nullopt, c10::optional<Scalar> max=c10::nullopt) const;\n", "Tensor clamp_max(Scalar max) const;\n", "Tensor & clamp_max_(Scalar max) const;\n", "Tensor clamp_min(Scalar min) const;\n", "Tensor & clamp_min_(Scalar min) const;\n", "Tensor contiguous(MemoryFormat memory_format=MemoryFormat::Contiguous) const;\n", "Tensor & copy_(const Tensor & src, bool non_blocking=false) const;\n", "Tensor cos() const;\n", "Tensor & cos_() const;\n", "Tensor cosh() const;\n", "Tensor & cosh_() const;\n", "Tensor cumsum(int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor cumsum(Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt) const;\n#endif", "Tensor cumprod(int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor cumprod(Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt) const;\n#endif", "Tensor det() const;\n", "Tensor diag_embed(int64_t offset=0, int64_t dim1=-2, int64_t dim2=-1) const;\n", "Tensor diagflat(int64_t offset=0) const;\n", "Tensor diagonal(int64_t offset=0, int64_t dim1=0, int64_t dim2=1) const;\n", "Tensor & fill_diagonal_(Scalar fill_value, bool wrap=false) const;\n", "Tensor div(const Tensor & other) const;\n", "Tensor & div_(const Tensor & other) const;\n", "Tensor div(Scalar other) const;\n", "Tensor & div_(Scalar other) const;\n", "Tensor dot(const Tensor & tensor) const;\n", "Tensor new_empty(IntArrayRef size, const TensorOptions & options={}) const;\n", "Tensor new_full(IntArrayRef size, Scalar fill_value, const TensorOptions & options={}) const;\n", "Tensor & resize_(IntArrayRef size) const;\n", "Tensor erf() const;\n", "Tensor & erf_() const;\n", "Tensor erfc() const;\n", "Tensor & erfc_() const;\n", "Tensor exp() const;\n", "Tensor & exp_() const;\n", "Tensor expm1() const;\n", "Tensor & expm1_() const;\n", "Tensor expand(IntArrayRef size, bool implicit=false) const;\n", "Tensor expand_as(const Tensor & other) const;\n", "Tensor flatten(int64_t start_dim=0, int64_t end_dim=-1) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor flatten(int64_t start_dim, int64_t end_dim, Dimname out_dim) const;\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor flatten(Dimname start_dim, Dimname end_dim, Dimname out_dim) const;\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor flatten(DimnameList dims, Dimname out_dim) const;\n#endif", "Tensor & fill_(Scalar value) const;\n", "Tensor & fill_(const Tensor & value) const;\n", "Tensor floor() const;\n", "Tensor & floor_() const;\n", "Tensor frac() const;\n", "Tensor & frac_() const;\n", "Tensor ger(const Tensor & vec2) const;\n", "Tensor fft(int64_t signal_ndim, bool normalized=false) const;\n", "Tensor ifft(int64_t signal_ndim, bool normalized=false) const;\n", "Tensor rfft(int64_t signal_ndim, bool normalized=false, bool onesided=true) const;\n", "Tensor irfft(int64_t signal_ndim, bool normalized=false, bool onesided=true, IntArrayRef signal_sizes={}) const;\n", "Tensor index(TensorList indices) const;\n", "Tensor & index_copy_(int64_t dim, const Tensor & index, const Tensor & source) const;\n", "Tensor index_copy(int64_t dim, const Tensor & index, const Tensor & source) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor & index_copy_(Dimname dim, const Tensor & index, const Tensor & source) const;\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor index_copy(Dimname dim, const Tensor & index, const Tensor & source) const;\n#endif", "Tensor & index_put_(TensorList indices, const Tensor & values, bool accumulate=false) const;\n", "Tensor index_put(TensorList indices, const Tensor & values, bool accumulate=false) const;\n", "Tensor inverse() const;\n", "Tensor isclose(const Tensor & other, double rtol=1e-05, double atol=1e-08, bool equal_nan=false) const;\n", "bool is_distributed() const;\n", "bool is_floating_point() const;\n", "bool is_complex() const;\n", "bool is_nonzero() const;\n", "bool is_same_size(const Tensor & other) const;\n", "bool is_signed() const;\n", "std::tuple<Tensor,Tensor> kthvalue(int64_t k, int64_t dim=-1, bool keepdim=false) const;\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> kthvalue(int64_t k, Dimname dim, bool keepdim=false) const;\n#endif", "Tensor log() const;\n", "Tensor & log_() const;\n", "Tensor log10() const;\n", "Tensor & log10_() const;\n", "Tensor log1p() const;\n", "Tensor & log1p_() const;\n", "Tensor log2() const;\n", "Tensor & log2_() const;\n", "Tensor logdet() const;\n", "Tensor log_softmax(int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor log_softmax(Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt) const;\n#endif", "Tensor logsumexp(IntArrayRef dim, bool keepdim=false) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor logsumexp(DimnameList dim, bool keepdim=false) const;\n#endif", "Tensor matmul(const Tensor & other) const;\n", "Tensor matrix_power(int64_t n) const;\n", "std::tuple<Tensor,Tensor> max(int64_t dim, bool keepdim=false) const;\n", "Tensor max_values(IntArrayRef dim, bool keepdim=false) const;\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> max(Dimname dim, bool keepdim=false) const;\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor max_values(DimnameList dim, bool keepdim=false) const;\n#endif", "Tensor mean(c10::optional<ScalarType> dtype=c10::nullopt) const;\n", "Tensor mean(IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor mean(DimnameList dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt) const;\n#endif", "std::tuple<Tensor,Tensor> median(int64_t dim, bool keepdim=false) const;\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> median(Dimname dim, bool keepdim=false) const;\n#endif", "std::tuple<Tensor,Tensor> min(int64_t dim, bool keepdim=false) const;\n", "Tensor min_values(IntArrayRef dim, bool keepdim=false) const;\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> min(Dimname dim, bool keepdim=false) const;\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor min_values(DimnameList dim, bool keepdim=false) const;\n#endif", "Tensor mm(const Tensor & mat2) const;\n", "std::tuple<Tensor,Tensor> mode(int64_t dim=-1, bool keepdim=false) const;\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> mode(Dimname dim, bool keepdim=false) const;\n#endif", "Tensor mul(const Tensor & other) const;\n", "Tensor & mul_(const Tensor & other) const;\n", "Tensor mul(Scalar other) const;\n", "Tensor & mul_(Scalar other) const;\n", "Tensor mv(const Tensor & vec) const;\n", "Tensor mvlgamma(int64_t p) const;\n", "Tensor & mvlgamma_(int64_t p) const;\n", "Tensor narrow_copy(int64_t dim, int64_t start, int64_t length) const;\n", "Tensor narrow(int64_t dim, int64_t start, int64_t length) const;\n", "Tensor permute(IntArrayRef dims) const;\n", "Tensor numpy_T() const;\n", "bool is_pinned() const;\n", "Tensor pin_memory() const;\n", "Tensor pinverse(double rcond=1e-15) const;\n", "Tensor reciprocal() const;\n", "Tensor & reciprocal_() const;\n", "Tensor neg() const;\n", "Tensor & neg_() const;\n", "Tensor repeat(IntArrayRef repeats) const;\n", "Tensor repeat_interleave(const Tensor & repeats, c10::optional<int64_t> dim=c10::nullopt) const;\n", "Tensor repeat_interleave(int64_t repeats, c10::optional<int64_t> dim=c10::nullopt) const;\n", "Tensor reshape(IntArrayRef shape) const;\n", "Tensor reshape_as(const Tensor & other) const;\n", "Tensor round() const;\n", "Tensor & round_() const;\n", "Tensor relu() const;\n", "Tensor & relu_() const;\n", "Tensor prelu(const Tensor & weight) const;\n", "std::tuple<Tensor,Tensor> prelu_backward(const Tensor & grad_output, const Tensor & weight) const;\n", "Tensor hardshrink(Scalar lambd=0.5) const;\n", "Tensor hardshrink_backward(const Tensor & grad_out, Scalar lambd) const;\n", "Tensor rsqrt() const;\n", "Tensor & rsqrt_() const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor select(Dimname dim, int64_t index) const;\n#endif", "Tensor select(int64_t dim, int64_t index) const;\n", "Tensor sigmoid() const;\n", "Tensor & sigmoid_() const;\n", "Tensor sin() const;\n", "Tensor & sin_() const;\n", "Tensor sinh() const;\n", "Tensor & sinh_() const;\n", "Tensor detach() const;\n", "Tensor & detach_() const;\n", "int64_t size(int64_t dim) const;\n", "#ifdef BUILD_NAMEDTENSOR\nint64_t size(Dimname dim) const;\n#endif", "Tensor slice(int64_t dim=0, int64_t start=0, int64_t end=9223372036854775807, int64_t step=1) const;\n", "std::tuple<Tensor,Tensor> slogdet() const;\n", "Tensor smm(const Tensor & mat2) const;\n", "Tensor softmax(int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor softmax(Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt) const;\n#endif", "std::vector<Tensor> split(int64_t split_size, int64_t dim=0) const;\n", "std::vector<Tensor> split_with_sizes(IntArrayRef split_sizes, int64_t dim=0) const;\n", "Tensor squeeze() const;\n", "Tensor squeeze(int64_t dim) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor squeeze(Dimname dim) const;\n#endif", "Tensor & squeeze_() const;\n", "Tensor & squeeze_(int64_t dim) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor & squeeze_(Dimname dim) const;\n#endif", "Tensor sspaddmm(const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1) const;\n", "Tensor stft(int64_t n_fft, c10::optional<int64_t> hop_length=c10::nullopt, c10::optional<int64_t> win_length=c10::nullopt, const Tensor & window={}, bool normalized=false, bool onesided=true) const;\n", "int64_t stride(int64_t dim) const;\n", "#ifdef BUILD_NAMEDTENSOR\nint64_t stride(Dimname dim) const;\n#endif", "Tensor sum(c10::optional<ScalarType> dtype=c10::nullopt) const;\n", "Tensor sum(IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor sum(DimnameList dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt) const;\n#endif", "Tensor sum_to_size(IntArrayRef size) const;\n", "Tensor sqrt() const;\n", "Tensor & sqrt_() const;\n", "Tensor std(bool unbiased=true) const;\n", "Tensor std(IntArrayRef dim, bool unbiased=true, bool keepdim=false) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor std(DimnameList dim, bool unbiased=true, bool keepdim=false) const;\n#endif", "Tensor prod(c10::optional<ScalarType> dtype=c10::nullopt) const;\n", "Tensor prod(int64_t dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor prod(Dimname dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt) const;\n#endif", "Tensor t() const;\n", "Tensor & t_() const;\n", "Tensor tan() const;\n", "Tensor & tan_() const;\n", "Tensor tanh() const;\n", "Tensor & tanh_() const;\n", "Tensor transpose(int64_t dim0, int64_t dim1) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor transpose(Dimname dim0, Dimname dim1) const;\n#endif", "Tensor & transpose_(int64_t dim0, int64_t dim1) const;\n", "Tensor flip(IntArrayRef dims) const;\n", "Tensor roll(IntArrayRef shifts, IntArrayRef dims={}) const;\n", "Tensor rot90(int64_t k=1, IntArrayRef dims={0,1}) const;\n", "Tensor trunc() const;\n", "Tensor & trunc_() const;\n", "Tensor type_as(const Tensor & other) const;\n", "Tensor unsqueeze(int64_t dim) const;\n", "Tensor & unsqueeze_(int64_t dim) const;\n", "Tensor var(bool unbiased=true) const;\n", "Tensor var(IntArrayRef dim, bool unbiased=true, bool keepdim=false) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor var(DimnameList dim, bool unbiased=true, bool keepdim=false) const;\n#endif", "Tensor view_as(const Tensor & other) const;\n", "Tensor where(const Tensor & condition, const Tensor & other) const;\n", "Tensor norm(c10::optional<Scalar> p, ScalarType dtype) const;\n", "Tensor norm(Scalar p=2) const;\n", "Tensor norm(c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) const;\n", "Tensor norm(c10::optional<Scalar> p, IntArrayRef dim, bool keepdim=false) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor norm(c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) const;\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor norm(c10::optional<Scalar> p, DimnameList dim, bool keepdim=false) const;\n#endif", "Tensor clone() const;\n", "Tensor & resize_as_(const Tensor & the_template) const;\n", "Tensor pow(Scalar exponent) const;\n", "Tensor & zero_() const;\n", "Tensor sub(const Tensor & other, Scalar alpha=1) const;\n", "Tensor & sub_(const Tensor & other, Scalar alpha=1) const;\n", "Tensor sub(Scalar other, Scalar alpha=1) const;\n", "Tensor & sub_(Scalar other, Scalar alpha=1) const;\n", "Tensor addmm(const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1) const;\n", "Tensor & addmm_(const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1) const;\n", "Tensor & sparse_resize_(IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) const;\n", "Tensor & sparse_resize_and_clear_(IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) const;\n", "Tensor sparse_mask(const Tensor & mask) const;\n", "Tensor to_dense() const;\n", "int64_t sparse_dim() const;\n", "int64_t _dimI() const;\n", "int64_t dense_dim() const;\n", "int64_t _dimV() const;\n", "int64_t _nnz() const;\n", "Tensor coalesce() const;\n", "bool is_coalesced() const;\n", "Tensor _indices() const;\n", "Tensor _values() const;\n", "Tensor & _coalesced_(bool coalesced) const;\n", "Tensor indices() const;\n", "Tensor values() const;\n", "int64_t numel() const;\n", "std::vector<Tensor> unbind(int64_t dim=0) const;\n", "#ifdef BUILD_NAMEDTENSOR\nstd::vector<Tensor> unbind(Dimname dim) const;\n#endif", "Tensor to_sparse(int64_t sparse_dim) const;\n", "Tensor to_sparse() const;\n", "Tensor to_mkldnn() const;\n", "Tensor dequantize() const;\n", "double q_scale() const;\n", "int64_t q_zero_point() const;\n", "Tensor q_per_channel_scales() const;\n", "Tensor q_per_channel_zero_points() const;\n", "int64_t q_per_channel_axis() const;\n", "Tensor int_repr() const;\n", "QScheme qscheme() const;\n", "Tensor to(const TensorOptions & options, bool non_blocking=false, bool copy=false) const;\n", "Tensor to(Device device, ScalarType dtype, bool non_blocking=false, bool copy=false) const;\n", "Tensor to(ScalarType dtype, bool non_blocking=false, bool copy=false) const;\n", "Tensor to(const Tensor & other, bool non_blocking=false, bool copy=false) const;\n", "Scalar item() const;\n", "Tensor & set_(Storage source) const;\n", "Tensor & set_(Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride={}) const;\n", "Tensor & set_(const Tensor & source) const;\n", "Tensor & set_() const;\n", "Tensor & set_quantizer_(ConstQuantizerPtr quantizer) const;\n", "bool is_set_to(const Tensor & tensor) const;\n", "Tensor & masked_fill_(const Tensor & mask, Scalar value) const;\n", "Tensor masked_fill(const Tensor & mask, Scalar value) const;\n", "Tensor & masked_fill_(const Tensor & mask, const Tensor & value) const;\n", "Tensor masked_fill(const Tensor & mask, const Tensor & value) const;\n", "Tensor & masked_scatter_(const Tensor & mask, const Tensor & source) const;\n", "Tensor masked_scatter(const Tensor & mask, const Tensor & source) const;\n", "Tensor view(IntArrayRef size) const;\n", "Tensor & put_(const Tensor & index, const Tensor & source, bool accumulate=false) const;\n", "Tensor & index_add_(int64_t dim, const Tensor & index, const Tensor & source) const;\n", "Tensor index_add(int64_t dim, const Tensor & index, const Tensor & source) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor index_add(Dimname dim, const Tensor & index, const Tensor & source) const;\n#endif", "Tensor & index_fill_(int64_t dim, const Tensor & index, Scalar value) const;\n", "Tensor index_fill(int64_t dim, const Tensor & index, Scalar value) const;\n", "Tensor & index_fill_(int64_t dim, const Tensor & index, const Tensor & value) const;\n", "Tensor index_fill(int64_t dim, const Tensor & index, const Tensor & value) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor & index_fill_(Dimname dim, const Tensor & index, Scalar value) const;\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor & index_fill_(Dimname dim, const Tensor & index, const Tensor & value) const;\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor index_fill(Dimname dim, const Tensor & index, Scalar value) const;\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor index_fill(Dimname dim, const Tensor & index, const Tensor & value) const;\n#endif", "Tensor & scatter_(int64_t dim, const Tensor & index, const Tensor & src) const;\n", "Tensor scatter(int64_t dim, const Tensor & index, const Tensor & src) const;\n", "Tensor & scatter_(int64_t dim, const Tensor & index, Scalar value) const;\n", "Tensor scatter(int64_t dim, const Tensor & index, Scalar value) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor scatter(Dimname dim, const Tensor & index, const Tensor & src) const;\n#endif", "#ifdef BUILD_NAMEDTENSOR\nTensor scatter(Dimname dim, const Tensor & index, Scalar value) const;\n#endif", "Tensor & scatter_add_(int64_t dim, const Tensor & index, const Tensor & src) const;\n", "Tensor scatter_add(int64_t dim, const Tensor & index, const Tensor & src) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor scatter_add(Dimname dim, const Tensor & index, const Tensor & src) const;\n#endif", "Tensor & lt_(Scalar other) const;\n", "Tensor & lt_(const Tensor & other) const;\n", "Tensor & gt_(Scalar other) const;\n", "Tensor & gt_(const Tensor & other) const;\n", "Tensor & le_(Scalar other) const;\n", "Tensor & le_(const Tensor & other) const;\n", "Tensor & ge_(Scalar other) const;\n", "Tensor & ge_(const Tensor & other) const;\n", "Tensor & eq_(Scalar other) const;\n", "Tensor & eq_(const Tensor & other) const;\n", "Tensor & ne_(Scalar other) const;\n", "Tensor & ne_(const Tensor & other) const;\n", "Tensor __and__(Scalar other) const;\n", "Tensor __and__(const Tensor & other) const;\n", "Tensor & __iand__(Scalar other) const;\n", "Tensor & __iand__(const Tensor & other) const;\n", "Tensor __or__(Scalar other) const;\n", "Tensor __or__(const Tensor & other) const;\n", "Tensor & __ior__(Scalar other) const;\n", "Tensor & __ior__(const Tensor & other) const;\n", "Tensor __xor__(Scalar other) const;\n", "Tensor __xor__(const Tensor & other) const;\n", "Tensor & __ixor__(Scalar other) const;\n", "Tensor & __ixor__(const Tensor & other) const;\n", "Tensor __lshift__(Scalar other) const;\n", "Tensor __lshift__(const Tensor & other) const;\n", "Tensor & __ilshift__(Scalar other) const;\n", "Tensor & __ilshift__(const Tensor & other) const;\n", "Tensor __rshift__(Scalar other) const;\n", "Tensor __rshift__(const Tensor & other) const;\n", "Tensor & __irshift__(Scalar other) const;\n", "Tensor & __irshift__(const Tensor & other) const;\n", "Tensor & lgamma_() const;\n", "Tensor & atan2_(const Tensor & other) const;\n", "Tensor & tril_(int64_t diagonal=0) const;\n", "Tensor & triu_(int64_t diagonal=0) const;\n", "Tensor & digamma_() const;\n", "Tensor & polygamma_(int64_t n) const;\n", "Tensor & renorm_(Scalar p, int64_t dim, Scalar maxnorm) const;\n", "Tensor & pow_(Scalar exponent) const;\n", "Tensor & pow_(const Tensor & exponent) const;\n", "Tensor & lerp_(const Tensor & end, Scalar weight) const;\n", "Tensor & lerp_(const Tensor & end, const Tensor & weight) const;\n", "Tensor & fmod_(Scalar other) const;\n", "Tensor & fmod_(const Tensor & other) const;\n", "Tensor & remainder_(Scalar other) const;\n", "Tensor & remainder_(const Tensor & other) const;\n", "Tensor & addbmm_(const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1) const;\n", "Tensor addbmm(const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1) const;\n", "Tensor & addcdiv_(const Tensor & tensor1, const Tensor & tensor2, Scalar value=1) const;\n", "Tensor & random_(int64_t from, int64_t to, Generator * generator=nullptr) const;\n", "Tensor & random_(int64_t to, Generator * generator=nullptr) const;\n", "Tensor & random_(Generator * generator=nullptr) const;\n", "Tensor & uniform_(double from=0, double to=1, Generator * generator=nullptr) const;\n", "Tensor & normal_(double mean=0, double std=1, Generator * generator=nullptr) const;\n", "Tensor & cauchy_(double median=0, double sigma=1, Generator * generator=nullptr) const;\n", "Tensor & log_normal_(double mean=1, double std=2, Generator * generator=nullptr) const;\n", "Tensor & exponential_(double lambd=1, Generator * generator=nullptr) const;\n", "Tensor & geometric_(double p, Generator * generator=nullptr) const;\n", "Tensor diag(int64_t diagonal=0) const;\n", "Tensor cross(const Tensor & other, c10::optional<int64_t> dim=c10::nullopt) const;\n", "Tensor triu(int64_t diagonal=0) const;\n", "Tensor tril(int64_t diagonal=0) const;\n", "Tensor trace() const;\n", "Tensor ne(Scalar other) const;\n", "Tensor ne(const Tensor & other) const;\n", "Tensor eq(Scalar other) const;\n", "Tensor eq(const Tensor & other) const;\n", "Tensor ge(Scalar other) const;\n", "Tensor ge(const Tensor & other) const;\n", "Tensor le(Scalar other) const;\n", "Tensor le(const Tensor & other) const;\n", "Tensor gt(Scalar other) const;\n", "Tensor gt(const Tensor & other) const;\n", "Tensor lt(Scalar other) const;\n", "Tensor lt(const Tensor & other) const;\n", "Tensor take(const Tensor & index) const;\n", "Tensor index_select(int64_t dim, const Tensor & index) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor index_select(Dimname dim, const Tensor & index) const;\n#endif", "Tensor masked_select(const Tensor & mask) const;\n", "Tensor nonzero() const;\n", "std::vector<Tensor> nonzero_numpy() const;\n", "Tensor gather(int64_t dim, const Tensor & index, bool sparse_grad=false) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor gather(Dimname dim, const Tensor & index, bool sparse_grad=false) const;\n#endif", "Tensor addcmul(const Tensor & tensor1, const Tensor & tensor2, Scalar value=1) const;\n", "Tensor & addcmul_(const Tensor & tensor1, const Tensor & tensor2, Scalar value=1) const;\n", "Tensor addcdiv(const Tensor & tensor1, const Tensor & tensor2, Scalar value=1) const;\n", "std::tuple<Tensor,Tensor> lstsq(const Tensor & A) const;\n", "std::tuple<Tensor,Tensor> triangular_solve(const Tensor & A, bool upper=true, bool transpose=false, bool unitriangular=false) const;\n", "std::tuple<Tensor,Tensor> symeig(bool eigenvectors=false, bool upper=true) const;\n", "std::tuple<Tensor,Tensor> eig(bool eigenvectors=false) const;\n", "std::tuple<Tensor,Tensor,Tensor> svd(bool some=true, bool compute_uv=true) const;\n", "Tensor cholesky(bool upper=false) const;\n", "Tensor cholesky_solve(const Tensor & input2, bool upper=false) const;\n", "std::tuple<Tensor,Tensor> solve(const Tensor & A) const;\n", "Tensor cholesky_inverse(bool upper=false) const;\n", "std::tuple<Tensor,Tensor> qr(bool some=true) const;\n", "std::tuple<Tensor,Tensor> geqrf() const;\n", "Tensor orgqr(const Tensor & input2) const;\n", "Tensor ormqr(const Tensor & input2, const Tensor & input3, bool left=true, bool transpose=false) const;\n", "Tensor lu_solve(const Tensor & LU_data, const Tensor & LU_pivots) const;\n", "Tensor multinomial(int64_t num_samples, bool replacement=false, Generator * generator=nullptr) const;\n", "Tensor lgamma() const;\n", "Tensor digamma() const;\n", "Tensor polygamma(int64_t n) const;\n", "Tensor erfinv() const;\n", "Tensor & erfinv_() const;\n", "Tensor sign() const;\n", "Tensor & sign_() const;\n", "Tensor dist(const Tensor & other, Scalar p=2) const;\n", "Tensor atan2(const Tensor & other) const;\n", "Tensor lerp(const Tensor & end, Scalar weight) const;\n", "Tensor lerp(const Tensor & end, const Tensor & weight) const;\n", "Tensor histc(int64_t bins=100, Scalar min=0, Scalar max=0) const;\n", "Tensor fmod(Scalar other) const;\n", "Tensor fmod(const Tensor & other) const;\n", "Tensor remainder(Scalar other) const;\n", "Tensor remainder(const Tensor & other) const;\n", "Tensor min(const Tensor & other) const;\n", "Tensor min() const;\n", "Tensor max(const Tensor & other) const;\n", "Tensor max() const;\n", "Tensor median() const;\n", "std::tuple<Tensor,Tensor> sort(int64_t dim=-1, bool descending=false) const;\n", "#ifdef BUILD_NAMEDTENSOR\nstd::tuple<Tensor,Tensor> sort(Dimname dim, bool descending=false) const;\n#endif", "Tensor argsort(int64_t dim=-1, bool descending=false) const;\n", "#ifdef BUILD_NAMEDTENSOR\nTensor argsort(Dimname dim, bool descending=false) const;\n#endif", "std::tuple<Tensor,Tensor> topk(int64_t k, int64_t dim=-1, bool largest=true, bool sorted=true) const;\n", "Tensor all() const;\n", "Tensor any() const;\n", "Tensor renorm(Scalar p, int64_t dim, Scalar maxnorm) const;\n", "Tensor unfold(int64_t dimension, int64_t size, int64_t step) const;\n", "bool equal(const Tensor & other) const;\n", "Tensor pow(const Tensor & exponent) const;\n", "Tensor alias() const;\n"], "tensor_method_definitions": ["inline void Tensor::backward(const Tensor & gradient, bool keep_graph, bool create_graph) const {\n#ifdef USE_STATIC_DISPATCH\n     TypeDefault::backward(const_cast<Tensor&>(*this), gradient, keep_graph, create_graph);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::backward(Tensor self, Tensor? gradient=None, bool keep_graph=False, bool create_graph=False) -> void\");\n    return table->callUnboxed<void, const Tensor &, const Tensor &, bool, bool>(const_cast<Tensor&>(*this), gradient, keep_graph, create_graph);\n#endif\n}\n", "inline void Tensor::set_data(const Tensor & new_data) const {\n#ifdef USE_STATIC_DISPATCH\n     TypeDefault::set_data(const_cast<Tensor&>(*this), new_data);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::set_data(Tensor(a!) self, Tensor new_data) -> void\");\n    return table->callUnboxed<void, const Tensor &, const Tensor &>(const_cast<Tensor&>(*this), new_data);\n#endif\n}\n", "inline Tensor Tensor::data() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::data(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::data\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline bool Tensor::is_leaf() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::is_leaf(const_cast<Tensor&>(*this));\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::is_leaf(Tensor self) -> bool\");\n    return table->callUnboxed<bool, const Tensor &>(const_cast<Tensor&>(*this));\n#endif\n}\n", "inline int64_t Tensor::output_nr() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::output_nr(const_cast<Tensor&>(*this));\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::output_nr(Tensor self) -> int\");\n    return table->callUnboxed<int64_t, const Tensor &>(const_cast<Tensor&>(*this));\n#endif\n}\n", "inline int64_t Tensor::_version() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_version(const_cast<Tensor&>(*this));\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_version(Tensor self) -> int\");\n    return table->callUnboxed<int64_t, const Tensor &>(const_cast<Tensor&>(*this));\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor & Tensor::rename_(c10::optional<DimnameList> names) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rename_(const_cast<Tensor&>(*this), names);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::rename_(Tensor(a!) self, Dimname[]? names) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, c10::optional<DimnameList>>(const_cast<Tensor&>(*this), names);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::rename(c10::optional<DimnameList> names) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rename(const_cast<Tensor&>(*this), names);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::rename(Tensor(a) self, Dimname[]? names) -> Tensor(a)\");\n    return table->callUnboxed<Tensor, const Tensor &, c10::optional<DimnameList>>(const_cast<Tensor&>(*this), names);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::align_to(DimnameList names) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::align_to(const_cast<Tensor&>(*this), names);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::align_to(Tensor(a) self, DimnameList names) -> Tensor(a)\");\n    return table->callUnboxed<Tensor, const Tensor &, DimnameList>(const_cast<Tensor&>(*this), names);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::align_as(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::align_as(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::align_as\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::refine_names(DimnameList names) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::refine_names(const_cast<Tensor&>(*this), names);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::refine_names(Tensor(a) self, DimnameList names) -> Tensor(a)\");\n    return table->callUnboxed<Tensor, const Tensor &, DimnameList>(const_cast<Tensor&>(*this), names);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::unflatten(Dimname dim, IntArrayRef sizes, DimnameList names) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::unflatten(const_cast<Tensor&>(*this), dim, sizes, names);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::unflatten(Tensor self, Dimname dim, int[] sizes, DimnameList names) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, IntArrayRef, DimnameList>(const_cast<Tensor&>(*this), dim, sizes, names);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::unflatten(int64_t dim, IntArrayRef sizes, DimnameList names) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::unflatten(const_cast<Tensor&>(*this), dim, sizes, names);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::unflatten(Tensor self, int dim, int[] sizes, DimnameList names) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, int64_t, IntArrayRef, DimnameList>(const_cast<Tensor&>(*this), dim, sizes, names);\n#endif\n}\n#endif", "inline Tensor Tensor::abs() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::abs(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::abs\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::abs_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::abs_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"abs_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::abs_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::acos() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::acos(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::acos\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::acos_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::acos_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"acos_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::acos_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::add(const Tensor & other, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::add(const_cast<Tensor&>(*this), other, alpha);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::add(const_cast<Tensor&>(*this), other, alpha);\n            break;\n        default:\n            AT_ERROR(\"add not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::add\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other, alpha);\n#endif\n}\n", "inline Tensor & Tensor::add_(const Tensor & other, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::add_(const_cast<Tensor&>(*this), other, alpha);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::add_(const_cast<Tensor&>(*this), other, alpha);\n            break;\n        default:\n            AT_ERROR(\"add_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::add_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other, alpha);\n#endif\n}\n", "inline Tensor Tensor::add(Scalar other, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::add(const_cast<Tensor&>(*this), other, alpha);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::add\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other, alpha);\n#endif\n}\n", "inline Tensor & Tensor::add_(Scalar other, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::add_(const_cast<Tensor&>(*this), other, alpha);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::add_\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other, alpha);\n#endif\n}\n", "inline Tensor Tensor::addmv(const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::addmv(const_cast<Tensor&>(*this), mat, vec, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"addmv not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::addmv\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, mat, vec)), const_cast<Tensor&>(*this), mat, vec, beta, alpha);\n#endif\n}\n", "inline Tensor & Tensor::addmv_(const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::addmv_(const_cast<Tensor&>(*this), mat, vec, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"addmv_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::addmv_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, mat, vec)), const_cast<Tensor&>(*this), mat, vec, beta, alpha);\n#endif\n}\n", "inline Tensor Tensor::addr(const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::addr(const_cast<Tensor&>(*this), vec1, vec2, beta, alpha);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::addr\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, vec1, vec2)), const_cast<Tensor&>(*this), vec1, vec2, beta, alpha);\n#endif\n}\n", "inline Tensor & Tensor::addr_(const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::addr_(const_cast<Tensor&>(*this), vec1, vec2, beta, alpha);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::addr_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, vec1, vec2)), const_cast<Tensor&>(*this), vec1, vec2, beta, alpha);\n#endif\n}\n", "inline Tensor Tensor::all(int64_t dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::all(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::all\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::all(Dimname dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::all(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::all.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, bool>(const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n#endif", "inline bool Tensor::allclose(const Tensor & other, double rtol, double atol, bool equal_nan) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::allclose(const_cast<Tensor&>(*this), other, rtol, atol, equal_nan);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::allclose\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &, const Tensor &, double, double, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other, rtol, atol, equal_nan);\n#endif\n}\n", "inline Tensor Tensor::any(int64_t dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::any(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::any\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::any(Dimname dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::any(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::any.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, bool>(const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n#endif", "inline Tensor Tensor::argmax(c10::optional<int64_t> dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::argmax(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::argmax\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, c10::optional<int64_t>, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n", "inline Tensor Tensor::argmin(c10::optional<int64_t> dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::argmin(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::argmin\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, c10::optional<int64_t>, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n", "inline Tensor Tensor::as_strided(IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::as_strided(const_cast<Tensor&>(*this), size, stride, storage_offset);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::as_strided(const_cast<Tensor&>(*this), size, stride, storage_offset);\n            break;\n        default:\n            AT_ERROR(\"as_strided not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::as_strided\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), size, stride, storage_offset);\n#endif\n}\n", "inline Tensor & Tensor::as_strided_(IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::as_strided_(const_cast<Tensor&>(*this), size, stride, storage_offset);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::as_strided_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), size, stride, storage_offset);\n#endif\n}\n", "inline Tensor Tensor::asin() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::asin(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::asin\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::asin_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::asin_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"asin_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::asin_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::atan() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::atan(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::atan\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::atan_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::atan_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"atan_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::atan_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::baddbmm(const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::baddbmm(const_cast<Tensor&>(*this), batch1, batch2, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"baddbmm not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::baddbmm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, batch1, batch2)), const_cast<Tensor&>(*this), batch1, batch2, beta, alpha);\n#endif\n}\n", "inline Tensor & Tensor::baddbmm_(const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::baddbmm_(const_cast<Tensor&>(*this), batch1, batch2, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"baddbmm_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::baddbmm_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, batch1, batch2)), const_cast<Tensor&>(*this), batch1, batch2, beta, alpha);\n#endif\n}\n", "inline Tensor Tensor::bernoulli(Generator * generator) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::bernoulli(const_cast<Tensor&>(*this), generator);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::bernoulli\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), generator);\n#endif\n}\n", "inline Tensor & Tensor::bernoulli_(const Tensor & p, Generator * generator) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::bernoulli_(const_cast<Tensor&>(*this), p, generator);\n            break;\n        default:\n            AT_ERROR(\"bernoulli_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::bernoulli_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, p)), const_cast<Tensor&>(*this), p, generator);\n#endif\n}\n", "inline Tensor & Tensor::bernoulli_(double p, Generator * generator) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::bernoulli_(const_cast<Tensor&>(*this), p, generator);\n            break;\n        default:\n            AT_ERROR(\"bernoulli_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::bernoulli_\", \"float\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, double, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), p, generator);\n#endif\n}\n", "inline Tensor Tensor::bernoulli(double p, Generator * generator) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::bernoulli(const_cast<Tensor&>(*this), p, generator);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::bernoulli\", \"p\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, double, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), p, generator);\n#endif\n}\n", "inline Tensor Tensor::bincount(const Tensor & weights, int64_t minlength) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::bincount(const_cast<Tensor&>(*this), weights, minlength);\n            break;\n        default:\n            AT_ERROR(\"bincount not implemented for \", at::toString(type_set()));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::bincount(Tensor self, Tensor? weights=None, int minlength=0) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t>(const_cast<Tensor&>(*this), weights, minlength);\n#endif\n}\n", "inline Tensor Tensor::bitwise_not() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::bitwise_not(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::bitwise_not\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::bitwise_not_() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::bitwise_not_(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::bitwise_not_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::logical_not() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::logical_not(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::logical_not\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::logical_not_() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::logical_not_(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::logical_not_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::logical_xor(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::logical_xor(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::logical_xor\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::logical_xor_(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::logical_xor_(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::logical_xor_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::bmm(const Tensor & mat2) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::bmm(const_cast<Tensor&>(*this), mat2);\n            break;\n        default:\n            AT_ERROR(\"bmm not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::bmm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, mat2)), const_cast<Tensor&>(*this), mat2);\n#endif\n}\n", "inline Tensor Tensor::ceil() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::ceil(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::ceil\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::ceil_() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::ceil_(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::ceil_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline std::vector<Tensor> Tensor::chunk(int64_t chunks, int64_t dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::chunk(const_cast<Tensor&>(*this), chunks, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::chunk\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::vector<Tensor>, const Tensor &, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), chunks, dim);\n#endif\n}\n", "inline Tensor Tensor::clamp(c10::optional<Scalar> min, c10::optional<Scalar> max) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::clamp(const_cast<Tensor&>(*this), min, max);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::clamp\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), min, max);\n#endif\n}\n", "inline Tensor & Tensor::clamp_(c10::optional<Scalar> min, c10::optional<Scalar> max) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::clamp_(const_cast<Tensor&>(*this), min, max);\n            break;\n        default:\n            AT_ERROR(\"clamp_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::clamp_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, c10::optional<Scalar>, c10::optional<Scalar>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), min, max);\n#endif\n}\n", "inline Tensor Tensor::clamp_max(Scalar max) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::clamp_max(const_cast<Tensor&>(*this), max);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::clamp_max\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), max);\n#endif\n}\n", "inline Tensor & Tensor::clamp_max_(Scalar max) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::clamp_max_(const_cast<Tensor&>(*this), max);\n            break;\n        default:\n            AT_ERROR(\"clamp_max_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::clamp_max_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), max);\n#endif\n}\n", "inline Tensor Tensor::clamp_min(Scalar min) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::clamp_min(const_cast<Tensor&>(*this), min);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::clamp_min\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), min);\n#endif\n}\n", "inline Tensor & Tensor::clamp_min_(Scalar min) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::clamp_min_(const_cast<Tensor&>(*this), min);\n            break;\n        default:\n            AT_ERROR(\"clamp_min_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::clamp_min_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), min);\n#endif\n}\n", "inline Tensor Tensor::contiguous(MemoryFormat memory_format) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::contiguous(const_cast<Tensor&>(*this), memory_format);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::contiguous(Tensor self, *, MemoryFormat memory_format=contiguous_format) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, MemoryFormat>(const_cast<Tensor&>(*this), memory_format);\n#endif\n}\n", "inline Tensor & Tensor::copy_(const Tensor & src, bool non_blocking) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::copy_(const_cast<Tensor&>(*this), src, non_blocking);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::copy_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, src)), const_cast<Tensor&>(*this), src, non_blocking);\n#endif\n}\n", "inline Tensor Tensor::cos() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cos(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::cos\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::cos_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::cos_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"cos_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::cos_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::cosh() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cosh(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::cosh\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::cosh_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::cosh_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"cosh_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::cosh_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::cumsum(int64_t dim, c10::optional<ScalarType> dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cumsum(const_cast<Tensor&>(*this), dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cumsum(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(const_cast<Tensor&>(*this), dim, dtype);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::cumsum(Dimname dim, c10::optional<ScalarType> dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cumsum(const_cast<Tensor&>(*this), dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cumsum.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(const_cast<Tensor&>(*this), dim, dtype);\n#endif\n}\n#endif", "inline Tensor Tensor::cumprod(int64_t dim, c10::optional<ScalarType> dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cumprod(const_cast<Tensor&>(*this), dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cumprod(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(const_cast<Tensor&>(*this), dim, dtype);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::cumprod(Dimname dim, c10::optional<ScalarType> dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cumprod(const_cast<Tensor&>(*this), dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cumprod.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(const_cast<Tensor&>(*this), dim, dtype);\n#endif\n}\n#endif", "inline Tensor Tensor::det() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::det(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::det\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::diag_embed(int64_t offset, int64_t dim1, int64_t dim2) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::diag_embed(const_cast<Tensor&>(*this), offset, dim1, dim2);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::diag_embed\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), offset, dim1, dim2);\n#endif\n}\n", "inline Tensor Tensor::diagflat(int64_t offset) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::diagflat(const_cast<Tensor&>(*this), offset);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::diagflat\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), offset);\n#endif\n}\n", "inline Tensor Tensor::diagonal(int64_t offset, int64_t dim1, int64_t dim2) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::diagonal(const_cast<Tensor&>(*this), offset, dim1, dim2);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::diagonal\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), offset, dim1, dim2);\n#endif\n}\n", "inline Tensor & Tensor::fill_diagonal_(Scalar fill_value, bool wrap) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::fill_diagonal_(const_cast<Tensor&>(*this), fill_value, wrap);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::fill_diagonal_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), fill_value, wrap);\n#endif\n}\n", "inline Tensor Tensor::div(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::div(const_cast<Tensor&>(*this), other);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::div(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"div not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::div\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::div_(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::div_(const_cast<Tensor&>(*this), other);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::div_(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"div_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::div_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::div(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::div(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::div\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::div_(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::div_(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::div_\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::dot(const Tensor & tensor) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::dot(const_cast<Tensor&>(*this), tensor);\n            break;\n        default:\n            AT_ERROR(\"dot not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::dot\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, tensor)), const_cast<Tensor&>(*this), tensor);\n#endif\n}\n", "inline Tensor Tensor::new_empty(IntArrayRef size, const TensorOptions & options) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::new_empty(const_cast<Tensor&>(*this), size, options);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::new_empty(Tensor self, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, IntArrayRef, const TensorOptions &>(const_cast<Tensor&>(*this), size, options);\n#endif\n}\n", "inline Tensor Tensor::new_full(IntArrayRef size, Scalar fill_value, const TensorOptions & options) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::new_full(const_cast<Tensor&>(*this), size, fill_value, options);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::new_full(Tensor self, int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, IntArrayRef, Scalar, const TensorOptions &>(const_cast<Tensor&>(*this), size, fill_value, options);\n#endif\n}\n", "inline Tensor & Tensor::resize_(IntArrayRef size) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::resize_(const_cast<Tensor&>(*this), size);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::resize_(const_cast<Tensor&>(*this), size);\n            break;\n        default:\n            AT_ERROR(\"resize_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::resize_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), size);\n#endif\n}\n", "inline Tensor Tensor::erf() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::erf(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::erf\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::erf_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::erf_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"erf_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::erf_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::erfc() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::erfc(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::erfc\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::erfc_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::erfc_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"erfc_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::erfc_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::exp() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::exp(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::exp\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::exp_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::exp_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"exp_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::exp_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::expm1() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::expm1(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::expm1\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::expm1_() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::expm1_(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::expm1_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::expand(IntArrayRef size, bool implicit) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::expand(const_cast<Tensor&>(*this), size, implicit);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::expand\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), size, implicit);\n#endif\n}\n", "inline Tensor Tensor::expand_as(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::expand_as(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::expand_as\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::flatten(int64_t start_dim, int64_t end_dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::flatten(const_cast<Tensor&>(*this), start_dim, end_dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::flatten\", \"using_ints\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), start_dim, end_dim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::flatten(int64_t start_dim, int64_t end_dim, Dimname out_dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::flatten(const_cast<Tensor&>(*this), start_dim, end_dim, out_dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::flatten.named_out_dim(Tensor self, int start_dim, int end_dim, Dimname out_dim) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, int64_t, int64_t, Dimname>(const_cast<Tensor&>(*this), start_dim, end_dim, out_dim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::flatten(Dimname start_dim, Dimname end_dim, Dimname out_dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::flatten(const_cast<Tensor&>(*this), start_dim, end_dim, out_dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::flatten.using_names(Tensor self, Dimname start_dim, Dimname end_dim, Dimname out_dim) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, Dimname, Dimname>(const_cast<Tensor&>(*this), start_dim, end_dim, out_dim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::flatten(DimnameList dims, Dimname out_dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::flatten(const_cast<Tensor&>(*this), dims, out_dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::flatten.DimnameList(Tensor self, DimnameList dims, Dimname out_dim) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, DimnameList, Dimname>(const_cast<Tensor&>(*this), dims, out_dim);\n#endif\n}\n#endif", "inline Tensor & Tensor::fill_(Scalar value) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::fill_(const_cast<Tensor&>(*this), value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::fill_\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), value);\n#endif\n}\n", "inline Tensor & Tensor::fill_(const Tensor & value) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::fill_(const_cast<Tensor&>(*this), value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::fill_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, value)), const_cast<Tensor&>(*this), value);\n#endif\n}\n", "inline Tensor Tensor::floor() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::floor(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::floor\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::floor_() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::floor_(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::floor_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::frac() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::frac(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::frac\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::frac_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::frac_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"frac_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::frac_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::ger(const Tensor & vec2) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::ger(const_cast<Tensor&>(*this), vec2);\n            break;\n        default:\n            AT_ERROR(\"ger not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::ger\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, vec2)), const_cast<Tensor&>(*this), vec2);\n#endif\n}\n", "inline Tensor Tensor::fft(int64_t signal_ndim, bool normalized) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::fft(const_cast<Tensor&>(*this), signal_ndim, normalized);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::fft\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), signal_ndim, normalized);\n#endif\n}\n", "inline Tensor Tensor::ifft(int64_t signal_ndim, bool normalized) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::ifft(const_cast<Tensor&>(*this), signal_ndim, normalized);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::ifft\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), signal_ndim, normalized);\n#endif\n}\n", "inline Tensor Tensor::rfft(int64_t signal_ndim, bool normalized, bool onesided) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rfft(const_cast<Tensor&>(*this), signal_ndim, normalized, onesided);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::rfft\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), signal_ndim, normalized, onesided);\n#endif\n}\n", "inline Tensor Tensor::irfft(int64_t signal_ndim, bool normalized, bool onesided, IntArrayRef signal_sizes) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::irfft(const_cast<Tensor&>(*this), signal_ndim, normalized, onesided, signal_sizes);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::irfft\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, bool, bool, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), signal_ndim, normalized, onesided, signal_sizes);\n#endif\n}\n", "inline Tensor Tensor::index(TensorList indices) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index(const_cast<Tensor&>(*this), indices);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index.Tensor(Tensor self, Tensor?[] indices) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, TensorList>(const_cast<Tensor&>(*this), indices);\n#endif\n}\n", "inline Tensor & Tensor::index_copy_(int64_t dim, const Tensor & index, const Tensor & source) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_copy_(const_cast<Tensor&>(*this), dim, index, source);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::index_copy_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, index, source)), const_cast<Tensor&>(*this), dim, index, source);\n#endif\n}\n", "inline Tensor Tensor::index_copy(int64_t dim, const Tensor & index, const Tensor & source) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_copy(const_cast<Tensor&>(*this), dim, index, source);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::index_copy\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, index, source)), const_cast<Tensor&>(*this), dim, index, source);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor & Tensor::index_copy_(Dimname dim, const Tensor & index, const Tensor & source) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_copy_(const_cast<Tensor&>(*this), dim, index, source);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_copy_.dimname(Tensor(a!) self, Dimname dim, Tensor index, Tensor source) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, Dimname, const Tensor &, const Tensor &>(const_cast<Tensor&>(*this), dim, index, source);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::index_copy(Dimname dim, const Tensor & index, const Tensor & source) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_copy(const_cast<Tensor&>(*this), dim, index, source);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_copy.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(const_cast<Tensor&>(*this), dim, index, source);\n#endif\n}\n#endif", "inline Tensor & Tensor::index_put_(TensorList indices, const Tensor & values, bool accumulate) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_put_(const_cast<Tensor&>(*this), indices, values, accumulate);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_put_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, TensorList, const Tensor &, bool>(const_cast<Tensor&>(*this), indices, values, accumulate);\n#endif\n}\n", "inline Tensor Tensor::index_put(TensorList indices, const Tensor & values, bool accumulate) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_put(const_cast<Tensor&>(*this), indices, values, accumulate);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_put(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, TensorList, const Tensor &, bool>(const_cast<Tensor&>(*this), indices, values, accumulate);\n#endif\n}\n", "inline Tensor Tensor::inverse() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::inverse(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::inverse\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::isclose(const Tensor & other, double rtol, double atol, bool equal_nan) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::isclose(const_cast<Tensor&>(*this), other, rtol, atol, equal_nan);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::isclose\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, double, double, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other, rtol, atol, equal_nan);\n#endif\n}\n", "inline bool Tensor::is_distributed() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::is_distributed(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::is_distributed\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline bool Tensor::is_floating_point() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::is_floating_point(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::is_floating_point\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline bool Tensor::is_complex() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::is_complex(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::is_complex\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline bool Tensor::is_nonzero() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::is_nonzero(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::is_nonzero\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline bool Tensor::is_same_size(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::is_same_size(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::is_same_size\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline bool Tensor::is_signed() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::is_signed(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::is_signed\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline std::tuple<Tensor,Tensor> Tensor::kthvalue(int64_t k, int64_t dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::kthvalue(const_cast<Tensor&>(*this), k, dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::kthvalue\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), k, dim, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline std::tuple<Tensor,Tensor> Tensor::kthvalue(int64_t k, Dimname dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::kthvalue(const_cast<Tensor&>(*this), k, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::kthvalue.dimname(Tensor self, int k, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, Dimname, bool>(const_cast<Tensor&>(*this), k, dim, keepdim);\n#endif\n}\n#endif", "inline Tensor Tensor::log() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::log(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::log\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::log_() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::log_(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::log_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::log10() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::log10(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::log10\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::log10_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::log10_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"log10_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::log10_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::log1p() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::log1p(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::log1p\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::log1p_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::log1p_(const_cast<Tensor&>(*this));\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::log1p_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"log1p_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::log1p_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::log2() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::log2(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::log2\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::log2_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::log2_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"log2_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::log2_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::logdet() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::logdet(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::logdet\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::log_softmax(int64_t dim, c10::optional<ScalarType> dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::log_softmax(const_cast<Tensor&>(*this), dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::log_softmax(Tensor self, int dim, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(const_cast<Tensor&>(*this), dim, dtype);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::log_softmax(Dimname dim, c10::optional<ScalarType> dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::log_softmax(const_cast<Tensor&>(*this), dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::log_softmax(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(const_cast<Tensor&>(*this), dim, dtype);\n#endif\n}\n#endif", "inline Tensor Tensor::logsumexp(IntArrayRef dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::logsumexp(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::logsumexp\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::logsumexp(DimnameList dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::logsumexp(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::logsumexp.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, DimnameList, bool>(const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n#endif", "inline Tensor Tensor::matmul(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::matmul(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::matmul\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::matrix_power(int64_t n) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::matrix_power(const_cast<Tensor&>(*this), n);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::matrix_power\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), n);\n#endif\n}\n", "inline std::tuple<Tensor,Tensor> Tensor::max(int64_t dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::max(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::max\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n", "inline Tensor Tensor::max_values(IntArrayRef dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::max_values(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::max_values\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline std::tuple<Tensor,Tensor> Tensor::max(Dimname dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::max(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::max.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::max_values(DimnameList dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::max_values(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::max_values.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, DimnameList, bool>(const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n#endif", "inline Tensor Tensor::mean(c10::optional<ScalarType> dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::mean(const_cast<Tensor&>(*this), dtype);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::mean(const_cast<Tensor&>(*this), dtype);\n            break;\n        default:\n            AT_ERROR(\"mean not implemented for \", at::toString(type_set()));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mean(Tensor self, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, c10::optional<ScalarType>>(const_cast<Tensor&>(*this), dtype);\n#endif\n}\n", "inline Tensor Tensor::mean(IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::mean(const_cast<Tensor&>(*this), dim, keepdim, dtype);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::mean(const_cast<Tensor&>(*this), dim, keepdim, dtype);\n            break;\n        default:\n            AT_ERROR(\"mean not implemented for \", at::toString(type_set()));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mean.dim(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>>(const_cast<Tensor&>(*this), dim, keepdim, dtype);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::mean(DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::mean(const_cast<Tensor&>(*this), dim, keepdim, dtype);\n            break;\n        default:\n            AT_ERROR(\"mean not implemented for \", at::toString(type_set()));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mean.names_dim(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, DimnameList, bool, c10::optional<ScalarType>>(const_cast<Tensor&>(*this), dim, keepdim, dtype);\n#endif\n}\n#endif", "inline std::tuple<Tensor,Tensor> Tensor::median(int64_t dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::median(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::median\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline std::tuple<Tensor,Tensor> Tensor::median(Dimname dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::median(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::median.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n#endif", "inline std::tuple<Tensor,Tensor> Tensor::min(int64_t dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::min(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::min\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n", "inline Tensor Tensor::min_values(IntArrayRef dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::min_values(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::min_values\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline std::tuple<Tensor,Tensor> Tensor::min(Dimname dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::min(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::min.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::min_values(DimnameList dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::min_values(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::min_values.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, DimnameList, bool>(const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n#endif", "inline Tensor Tensor::mm(const Tensor & mat2) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::mm(const_cast<Tensor&>(*this), mat2);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::mm(const_cast<Tensor&>(*this), mat2);\n            break;\n        default:\n            AT_ERROR(\"mm not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::mm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, mat2)), const_cast<Tensor&>(*this), mat2);\n#endif\n}\n", "inline std::tuple<Tensor,Tensor> Tensor::mode(int64_t dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::mode(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::mode\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline std::tuple<Tensor,Tensor> Tensor::mode(Dimname dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::mode(const_cast<Tensor&>(*this), dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mode.dimname(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(const_cast<Tensor&>(*this), dim, keepdim);\n#endif\n}\n#endif", "inline Tensor Tensor::mul(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::mul(const_cast<Tensor&>(*this), other);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::mul(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"mul not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::mul\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::mul_(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::mul_(const_cast<Tensor&>(*this), other);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::mul_(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"mul_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::mul_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::mul(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::mul(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::mul\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::mul_(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::mul_(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::mul_\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::mv(const Tensor & vec) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::mv(const_cast<Tensor&>(*this), vec);\n            break;\n        default:\n            AT_ERROR(\"mv not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::mv\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, vec)), const_cast<Tensor&>(*this), vec);\n#endif\n}\n", "inline Tensor Tensor::mvlgamma(int64_t p) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::mvlgamma(const_cast<Tensor&>(*this), p);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::mvlgamma\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), p);\n#endif\n}\n", "inline Tensor & Tensor::mvlgamma_(int64_t p) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::mvlgamma_(const_cast<Tensor&>(*this), p);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::mvlgamma_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), p);\n#endif\n}\n", "inline Tensor Tensor::narrow_copy(int64_t dim, int64_t start, int64_t length) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::narrow_copy(const_cast<Tensor&>(*this), dim, start, length);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::narrow_copy(const_cast<Tensor&>(*this), dim, start, length);\n            break;\n        default:\n            AT_ERROR(\"narrow_copy not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::narrow_copy\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, start, length);\n#endif\n}\n", "inline Tensor Tensor::narrow(int64_t dim, int64_t start, int64_t length) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::narrow(const_cast<Tensor&>(*this), dim, start, length);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::narrow\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, start, length);\n#endif\n}\n", "inline Tensor Tensor::permute(IntArrayRef dims) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::permute(const_cast<Tensor&>(*this), dims);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::permute\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dims);\n#endif\n}\n", "inline Tensor Tensor::numpy_T() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::numpy_T(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::numpy_T\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline bool Tensor::is_pinned() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::is_pinned(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::is_pinned\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::pin_memory() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::pin_memory(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::pin_memory\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::pinverse(double rcond) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::pinverse(const_cast<Tensor&>(*this), rcond);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::pinverse\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, double>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), rcond);\n#endif\n}\n", "inline Tensor Tensor::reciprocal() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::reciprocal(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::reciprocal\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::reciprocal_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::reciprocal_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"reciprocal_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::reciprocal_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::neg() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::neg(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::neg\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::neg_() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::neg_(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::neg_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::repeat(IntArrayRef repeats) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::repeat(const_cast<Tensor&>(*this), repeats);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::repeat\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), repeats);\n#endif\n}\n", "inline Tensor Tensor::repeat_interleave(const Tensor & repeats, c10::optional<int64_t> dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::repeat_interleave(const_cast<Tensor&>(*this), repeats, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::repeat_interleave\", \"self_Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, c10::optional<int64_t>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, repeats)), const_cast<Tensor&>(*this), repeats, dim);\n#endif\n}\n", "inline Tensor Tensor::repeat_interleave(int64_t repeats, c10::optional<int64_t> dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::repeat_interleave(const_cast<Tensor&>(*this), repeats, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::repeat_interleave\", \"self_int\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, c10::optional<int64_t>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), repeats, dim);\n#endif\n}\n", "inline Tensor Tensor::reshape(IntArrayRef shape) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::reshape(const_cast<Tensor&>(*this), shape);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::reshape\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), shape);\n#endif\n}\n", "inline Tensor Tensor::reshape_as(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::reshape_as(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::reshape_as\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::round() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::round(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::round\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::round_() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::round_(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::round_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::relu() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::relu(const_cast<Tensor&>(*this));\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::relu(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"relu not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::relu\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::relu_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::relu_(const_cast<Tensor&>(*this));\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::relu_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"relu_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::relu_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::prelu(const Tensor & weight) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::prelu(const_cast<Tensor&>(*this), weight);\n            break;\n        default:\n            AT_ERROR(\"prelu not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::prelu\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, weight)), const_cast<Tensor&>(*this), weight);\n#endif\n}\n", "inline std::tuple<Tensor,Tensor> Tensor::prelu_backward(const Tensor & grad_output, const Tensor & weight) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::prelu_backward(grad_output, const_cast<Tensor&>(*this), weight);\n            break;\n        default:\n            AT_ERROR(\"prelu_backward not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::prelu_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, *this, weight)), grad_output, const_cast<Tensor&>(*this), weight);\n#endif\n}\n", "inline Tensor Tensor::hardshrink(Scalar lambd) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::hardshrink(const_cast<Tensor&>(*this), lambd);\n            break;\n        default:\n            AT_ERROR(\"hardshrink not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::hardshrink\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), lambd);\n#endif\n}\n", "inline Tensor Tensor::hardshrink_backward(const Tensor & grad_out, Scalar lambd) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::hardshrink_backward(grad_out, const_cast<Tensor&>(*this), lambd);\n            break;\n        default:\n            AT_ERROR(\"hardshrink_backward not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::hardshrink_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_out, *this)), grad_out, const_cast<Tensor&>(*this), lambd);\n#endif\n}\n", "inline Tensor Tensor::rsqrt() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rsqrt(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::rsqrt\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::rsqrt_() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rsqrt_(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::rsqrt_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::select(Dimname dim, int64_t index) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::select(const_cast<Tensor&>(*this), dim, index);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::select.Dimname(Tensor(a) self, Dimname dim, int index) -> Tensor(a)\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, int64_t>(const_cast<Tensor&>(*this), dim, index);\n#endif\n}\n#endif", "inline Tensor Tensor::select(int64_t dim, int64_t index) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::select(const_cast<Tensor&>(*this), dim, index);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::select\", \"int\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, index);\n#endif\n}\n", "inline Tensor Tensor::sigmoid() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::sigmoid(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"sigmoid not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sigmoid\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::sigmoid_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::sigmoid_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"sigmoid_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sigmoid_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::sin() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sin(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sin\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::sin_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::sin_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"sin_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sin_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::sinh() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sinh(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sinh\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::sinh_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::sinh_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"sinh_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sinh_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::detach() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::detach(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::detach\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::detach_() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::detach_(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::detach_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline int64_t Tensor::size(int64_t dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::size(const_cast<Tensor&>(*this), dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::size\", \"int\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<int64_t, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline int64_t Tensor::size(Dimname dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::size(const_cast<Tensor&>(*this), dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::size.Dimname(Tensor self, Dimname dim) -> int\");\n    return table->callUnboxed<int64_t, const Tensor &, Dimname>(const_cast<Tensor&>(*this), dim);\n#endif\n}\n#endif", "inline Tensor Tensor::slice(int64_t dim, int64_t start, int64_t end, int64_t step) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::slice(const_cast<Tensor&>(*this), dim, start, end, step);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::slice\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, int64_t, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, start, end, step);\n#endif\n}\n", "inline std::tuple<Tensor,Tensor> Tensor::slogdet() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::slogdet(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::slogdet\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::smm(const Tensor & mat2) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::smm(const_cast<Tensor&>(*this), mat2);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::smm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, mat2)), const_cast<Tensor&>(*this), mat2);\n#endif\n}\n", "inline Tensor Tensor::softmax(int64_t dim, c10::optional<ScalarType> dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::softmax(const_cast<Tensor&>(*this), dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::softmax(Tensor self, int dim, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(const_cast<Tensor&>(*this), dim, dtype);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::softmax(Dimname dim, c10::optional<ScalarType> dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::softmax(const_cast<Tensor&>(*this), dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::softmax(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(const_cast<Tensor&>(*this), dim, dtype);\n#endif\n}\n#endif", "inline std::vector<Tensor> Tensor::split(int64_t split_size, int64_t dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::split(const_cast<Tensor&>(*this), split_size, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::split\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::vector<Tensor>, const Tensor &, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), split_size, dim);\n#endif\n}\n", "inline std::vector<Tensor> Tensor::split_with_sizes(IntArrayRef split_sizes, int64_t dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::split_with_sizes(const_cast<Tensor&>(*this), split_sizes, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::split_with_sizes\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::vector<Tensor>, const Tensor &, IntArrayRef, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), split_sizes, dim);\n#endif\n}\n", "inline Tensor Tensor::squeeze() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::squeeze(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::squeeze\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::squeeze(int64_t dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::squeeze(const_cast<Tensor&>(*this), dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::squeeze\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::squeeze(Dimname dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::squeeze(const_cast<Tensor&>(*this), dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::squeeze.dimname(Tensor(a) self, Dimname dim) -> Tensor(a)\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname>(const_cast<Tensor&>(*this), dim);\n#endif\n}\n#endif", "inline Tensor & Tensor::squeeze_() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::squeeze_(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::squeeze_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::squeeze_(int64_t dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::squeeze_(const_cast<Tensor&>(*this), dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::squeeze_\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor & Tensor::squeeze_(Dimname dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::squeeze_(const_cast<Tensor&>(*this), dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::squeeze_.dimname(Tensor(a!) self, Dimname dim) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, Dimname>(const_cast<Tensor&>(*this), dim);\n#endif\n}\n#endif", "inline Tensor Tensor::sspaddmm(const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sspaddmm(const_cast<Tensor&>(*this), mat1, mat2, beta, alpha);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sspaddmm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, mat1, mat2)), const_cast<Tensor&>(*this), mat1, mat2, beta, alpha);\n#endif\n}\n", "inline Tensor Tensor::stft(int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const Tensor & window, bool normalized, bool onesided) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::stft(const_cast<Tensor&>(*this), n_fft, hop_length, win_length, window, normalized, onesided);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::stft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool normalized=False, bool onesided=True) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, const Tensor &, bool, bool>(const_cast<Tensor&>(*this), n_fft, hop_length, win_length, window, normalized, onesided);\n#endif\n}\n", "inline int64_t Tensor::stride(int64_t dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::stride(const_cast<Tensor&>(*this), dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::stride\", \"int\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<int64_t, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline int64_t Tensor::stride(Dimname dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::stride(const_cast<Tensor&>(*this), dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::stride.Dimname(Tensor self, Dimname dim) -> int\");\n    return table->callUnboxed<int64_t, const Tensor &, Dimname>(const_cast<Tensor&>(*this), dim);\n#endif\n}\n#endif", "inline Tensor Tensor::sum(c10::optional<ScalarType> dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sum(const_cast<Tensor&>(*this), dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sum(Tensor self, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, c10::optional<ScalarType>>(const_cast<Tensor&>(*this), dtype);\n#endif\n}\n", "inline Tensor Tensor::sum(IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sum(const_cast<Tensor&>(*this), dim, keepdim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>>(const_cast<Tensor&>(*this), dim, keepdim, dtype);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::sum(DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sum(const_cast<Tensor&>(*this), dim, keepdim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sum.dim_DimnameList(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, DimnameList, bool, c10::optional<ScalarType>>(const_cast<Tensor&>(*this), dim, keepdim, dtype);\n#endif\n}\n#endif", "inline Tensor Tensor::sum_to_size(IntArrayRef size) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sum_to_size(const_cast<Tensor&>(*this), size);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sum_to_size\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), size);\n#endif\n}\n", "inline Tensor Tensor::sqrt() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sqrt(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sqrt\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::sqrt_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::sqrt_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"sqrt_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sqrt_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::std(bool unbiased) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::std(const_cast<Tensor&>(*this), unbiased);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::std\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), unbiased);\n#endif\n}\n", "inline Tensor Tensor::std(IntArrayRef dim, bool unbiased, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::std(const_cast<Tensor&>(*this), dim, unbiased, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::std\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, unbiased, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::std(DimnameList dim, bool unbiased, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::std(const_cast<Tensor&>(*this), dim, unbiased, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::std.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, DimnameList, bool, bool>(const_cast<Tensor&>(*this), dim, unbiased, keepdim);\n#endif\n}\n#endif", "inline Tensor Tensor::prod(c10::optional<ScalarType> dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::prod(const_cast<Tensor&>(*this), dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::prod(Tensor self, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, c10::optional<ScalarType>>(const_cast<Tensor&>(*this), dtype);\n#endif\n}\n", "inline Tensor Tensor::prod(int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::prod(const_cast<Tensor&>(*this), dim, keepdim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::prod.dim_int(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, int64_t, bool, c10::optional<ScalarType>>(const_cast<Tensor&>(*this), dim, keepdim, dtype);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::prod(Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::prod(const_cast<Tensor&>(*this), dim, keepdim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::prod.dim_Dimname(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, bool, c10::optional<ScalarType>>(const_cast<Tensor&>(*this), dim, keepdim, dtype);\n#endif\n}\n#endif", "inline Tensor Tensor::t() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::t(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::t\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::t_() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::t_(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::t_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::tan() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::tan(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::tan\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::tan_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::tan_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"tan_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::tan_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::tanh() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::tanh(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::tanh\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::tanh_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::tanh_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"tanh_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::tanh_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::transpose(int64_t dim0, int64_t dim1) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::transpose(const_cast<Tensor&>(*this), dim0, dim1);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::transpose\", \"int\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim0, dim1);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::transpose(Dimname dim0, Dimname dim1) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::transpose(const_cast<Tensor&>(*this), dim0, dim1);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::transpose.Dimname(Tensor(a) self, Dimname dim0, Dimname dim1) -> Tensor(a)\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, Dimname>(const_cast<Tensor&>(*this), dim0, dim1);\n#endif\n}\n#endif", "inline Tensor & Tensor::transpose_(int64_t dim0, int64_t dim1) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::transpose_(const_cast<Tensor&>(*this), dim0, dim1);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::transpose_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim0, dim1);\n#endif\n}\n", "inline Tensor Tensor::flip(IntArrayRef dims) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::flip(const_cast<Tensor&>(*this), dims);\n            break;\n        default:\n            AT_ERROR(\"flip not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::flip\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dims);\n#endif\n}\n", "inline Tensor Tensor::roll(IntArrayRef shifts, IntArrayRef dims) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::roll(const_cast<Tensor&>(*this), shifts, dims);\n            break;\n        default:\n            AT_ERROR(\"roll not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::roll\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), shifts, dims);\n#endif\n}\n", "inline Tensor Tensor::rot90(int64_t k, IntArrayRef dims) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rot90(const_cast<Tensor&>(*this), k, dims);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::rot90\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), k, dims);\n#endif\n}\n", "inline Tensor Tensor::trunc() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::trunc(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::trunc\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::trunc_() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::trunc_(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::trunc_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::type_as(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::type_as(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::type_as\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::unsqueeze(int64_t dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::unsqueeze(const_cast<Tensor&>(*this), dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::unsqueeze\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim);\n#endif\n}\n", "inline Tensor & Tensor::unsqueeze_(int64_t dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::unsqueeze_(const_cast<Tensor&>(*this), dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::unsqueeze_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim);\n#endif\n}\n", "inline Tensor Tensor::var(bool unbiased) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::var(const_cast<Tensor&>(*this), unbiased);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::var\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), unbiased);\n#endif\n}\n", "inline Tensor Tensor::var(IntArrayRef dim, bool unbiased, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::var(const_cast<Tensor&>(*this), dim, unbiased, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::var\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, unbiased, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::var(DimnameList dim, bool unbiased, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::var(const_cast<Tensor&>(*this), dim, unbiased, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::var.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, DimnameList, bool, bool>(const_cast<Tensor&>(*this), dim, unbiased, keepdim);\n#endif\n}\n#endif", "inline Tensor Tensor::view_as(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::view_as(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::view_as\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::where(const Tensor & condition, const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::where(condition, const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::where\", \"self\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(condition, *this, other)), condition, const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::norm(c10::optional<Scalar> p, ScalarType dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::norm(const_cast<Tensor&>(*this), p, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, ScalarType dtype) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, c10::optional<Scalar>, ScalarType>(const_cast<Tensor&>(*this), p, dtype);\n#endif\n}\n", "inline Tensor Tensor::norm(Scalar p) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::norm(const_cast<Tensor&>(*this), p);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::norm\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), p);\n#endif\n}\n", "inline Tensor Tensor::norm(c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::norm(const_cast<Tensor&>(*this), p, dim, keepdim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType>(const_cast<Tensor&>(*this), p, dim, keepdim, dtype);\n#endif\n}\n", "inline Tensor Tensor::norm(c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::norm(const_cast<Tensor&>(*this), p, dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::norm\", \"ScalarOpt_dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), p, dim, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::norm(c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::norm(const_cast<Tensor&>(*this), p, dim, keepdim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::norm.names_ScalarOpt_dim_dtype(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, c10::optional<Scalar>, DimnameList, bool, ScalarType>(const_cast<Tensor&>(*this), p, dim, keepdim, dtype);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::norm(c10::optional<Scalar> p, DimnameList dim, bool keepdim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::norm(const_cast<Tensor&>(*this), p, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::norm.names_ScalarOpt_dim(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, c10::optional<Scalar>, DimnameList, bool>(const_cast<Tensor&>(*this), p, dim, keepdim);\n#endif\n}\n#endif", "inline Tensor Tensor::clone() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::clone(const_cast<Tensor&>(*this));\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::clone(const_cast<Tensor&>(*this));\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::clone(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"clone not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::clone\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::resize_as_(const Tensor & the_template) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::resize_as_(const_cast<Tensor&>(*this), the_template);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::resize_as_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, the_template)), const_cast<Tensor&>(*this), the_template);\n#endif\n}\n", "inline Tensor Tensor::pow(Scalar exponent) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::pow(const_cast<Tensor&>(*this), exponent);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::pow(const_cast<Tensor&>(*this), exponent);\n            break;\n        default:\n            AT_ERROR(\"pow not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::pow\", \"Tensor_Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), exponent);\n#endif\n}\n", "inline Tensor & Tensor::zero_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::zero_(const_cast<Tensor&>(*this));\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::zero_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"zero_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::zero_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::sub(const Tensor & other, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::sub(const_cast<Tensor&>(*this), other, alpha);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::sub(const_cast<Tensor&>(*this), other, alpha);\n            break;\n        default:\n            AT_ERROR(\"sub not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sub\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other, alpha);\n#endif\n}\n", "inline Tensor & Tensor::sub_(const Tensor & other, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::sub_(const_cast<Tensor&>(*this), other, alpha);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::sub_(const_cast<Tensor&>(*this), other, alpha);\n            break;\n        default:\n            AT_ERROR(\"sub_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sub_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other, alpha);\n#endif\n}\n", "inline Tensor Tensor::sub(Scalar other, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sub(const_cast<Tensor&>(*this), other, alpha);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sub\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other, alpha);\n#endif\n}\n", "inline Tensor & Tensor::sub_(Scalar other, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sub_(const_cast<Tensor&>(*this), other, alpha);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sub_\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other, alpha);\n#endif\n}\n", "inline Tensor Tensor::addmm(const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::addmm(const_cast<Tensor&>(*this), mat1, mat2, beta, alpha);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::addmm(const_cast<Tensor&>(*this), mat1, mat2, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"addmm not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::addmm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, mat1, mat2)), const_cast<Tensor&>(*this), mat1, mat2, beta, alpha);\n#endif\n}\n", "inline Tensor & Tensor::addmm_(const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::addmm_(const_cast<Tensor&>(*this), mat1, mat2, beta, alpha);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::addmm_(const_cast<Tensor&>(*this), mat1, mat2, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"addmm_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::addmm_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, mat1, mat2)), const_cast<Tensor&>(*this), mat1, mat2, beta, alpha);\n#endif\n}\n", "inline Tensor & Tensor::sparse_resize_(IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::sparse_resize_(const_cast<Tensor&>(*this), size, sparse_dim, dense_dim);\n            break;\n        default:\n            AT_ERROR(\"sparse_resize_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sparse_resize_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, IntArrayRef, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), size, sparse_dim, dense_dim);\n#endif\n}\n", "inline Tensor & Tensor::sparse_resize_and_clear_(IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::sparse_resize_and_clear_(const_cast<Tensor&>(*this), size, sparse_dim, dense_dim);\n            break;\n        default:\n            AT_ERROR(\"sparse_resize_and_clear_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sparse_resize_and_clear_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, IntArrayRef, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), size, sparse_dim, dense_dim);\n#endif\n}\n", "inline Tensor Tensor::sparse_mask(const Tensor & mask) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::sparse_mask(const_cast<Tensor&>(*this), mask);\n            break;\n        default:\n            AT_ERROR(\"sparse_mask not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sparse_mask\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, mask)), const_cast<Tensor&>(*this), mask);\n#endif\n}\n", "inline Tensor Tensor::to_dense() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::to_dense(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"to_dense not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::to_dense\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline int64_t Tensor::sparse_dim() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::sparse_dim(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"sparse_dim not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sparse_dim\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<int64_t, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline int64_t Tensor::_dimI() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::_dimI(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"_dimI not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::_dimI\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<int64_t, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline int64_t Tensor::dense_dim() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::dense_dim(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"dense_dim not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::dense_dim\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<int64_t, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline int64_t Tensor::_dimV() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::_dimV(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"_dimV not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::_dimV\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<int64_t, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline int64_t Tensor::_nnz() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::_nnz(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"_nnz not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::_nnz\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<int64_t, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::coalesce() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::coalesce(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"coalesce not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::coalesce\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline bool Tensor::is_coalesced() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::is_coalesced(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"is_coalesced not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::is_coalesced\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::_indices() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::_indices(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"_indices not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::_indices\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::_values() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::_values(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"_values not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::_values\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::_coalesced_(bool coalesced) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::_coalesced_(const_cast<Tensor&>(*this), coalesced);\n            break;\n        default:\n            AT_ERROR(\"_coalesced_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::_coalesced_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), coalesced);\n#endif\n}\n", "inline Tensor Tensor::indices() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::indices(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"indices not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::indices\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::values() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::values(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"values not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::values\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline int64_t Tensor::numel() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::numel(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::numel\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<int64_t, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline std::vector<Tensor> Tensor::unbind(int64_t dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::unbind(const_cast<Tensor&>(*this), dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::unbind\", \"int\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::vector<Tensor>, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline std::vector<Tensor> Tensor::unbind(Dimname dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::unbind(const_cast<Tensor&>(*this), dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::unbind.Dimname(Tensor(a) self, Dimname dim) -> Tensor(a)[]\");\n    return table->callUnboxed<std::vector<Tensor>, const Tensor &, Dimname>(const_cast<Tensor&>(*this), dim);\n#endif\n}\n#endif", "inline Tensor Tensor::to_sparse(int64_t sparse_dim) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::to_sparse(const_cast<Tensor&>(*this), sparse_dim);\n            break;\n        default:\n            AT_ERROR(\"to_sparse not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::to_sparse\", \"sparse_dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), sparse_dim);\n#endif\n}\n", "inline Tensor Tensor::to_sparse() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::to_sparse(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"to_sparse not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::to_sparse\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::to_mkldnn() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::to_mkldnn(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"to_mkldnn not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::to_mkldnn\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::dequantize() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::dequantize(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"dequantize not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::dequantize\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline double Tensor::q_scale() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::q_scale(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"q_scale not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::q_scale\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<double, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline int64_t Tensor::q_zero_point() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::q_zero_point(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"q_zero_point not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::q_zero_point\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<int64_t, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::q_per_channel_scales() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::q_per_channel_scales(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"q_per_channel_scales not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::q_per_channel_scales\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::q_per_channel_zero_points() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::q_per_channel_zero_points(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"q_per_channel_zero_points not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::q_per_channel_zero_points\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline int64_t Tensor::q_per_channel_axis() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::q_per_channel_axis(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"q_per_channel_axis not implemented for \", at::toString(type_set()));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::q_per_channel_axis(Tensor self) -> int\");\n    return table->callUnboxed<int64_t, const Tensor &>(const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::int_repr() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::int_repr(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"int_repr not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::int_repr\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline QScheme Tensor::qscheme() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::qscheme(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"qscheme not implemented for \", at::toString(type_set()));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::qscheme(Tensor self) -> QScheme\");\n    return table->callUnboxed<QScheme, const Tensor &>(const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::to(const TensorOptions & options, bool non_blocking, bool copy) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::to(const_cast<Tensor&>(*this), options, non_blocking, copy);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::to.dtype_layout(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, bool non_blocking=False, bool copy=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const TensorOptions &, bool, bool>(const_cast<Tensor&>(*this), options, non_blocking, copy);\n#endif\n}\n", "inline Tensor Tensor::to(Device device, ScalarType dtype, bool non_blocking, bool copy) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::to(const_cast<Tensor&>(*this), device, dtype, non_blocking, copy);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::to.device(Tensor self, Device device, ScalarType dtype, bool non_blocking=False, bool copy=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Device, ScalarType, bool, bool>(const_cast<Tensor&>(*this), device, dtype, non_blocking, copy);\n#endif\n}\n", "inline Tensor Tensor::to(ScalarType dtype, bool non_blocking, bool copy) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::to(const_cast<Tensor&>(*this), dtype, non_blocking, copy);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::to.dtype(Tensor self, ScalarType dtype, bool non_blocking=False, bool copy=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, ScalarType, bool, bool>(const_cast<Tensor&>(*this), dtype, non_blocking, copy);\n#endif\n}\n", "inline Tensor Tensor::to(const Tensor & other, bool non_blocking, bool copy) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::to(const_cast<Tensor&>(*this), other, non_blocking, copy);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::to\", \"other\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other, non_blocking, copy);\n#endif\n}\n", "inline Scalar Tensor::item() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::item(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::item\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Scalar, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::set_(Storage source) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::set_(const_cast<Tensor&>(*this), source);\n            break;\n        default:\n            AT_ERROR(\"set_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::set_.source_Storage(Tensor(a!) self, Storage source) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, Storage>(const_cast<Tensor&>(*this), source);\n#endif\n}\n", "inline Tensor & Tensor::set_(Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::set_(const_cast<Tensor&>(*this), source, storage_offset, size, stride);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::set_(const_cast<Tensor&>(*this), source, storage_offset, size, stride);\n            break;\n        default:\n            AT_ERROR(\"set_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::set_.source_Storage_storage_offset(Tensor(a!) self, Storage source, int storage_offset, int[] size, int[] stride=[]) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, Storage, int64_t, IntArrayRef, IntArrayRef>(const_cast<Tensor&>(*this), source, storage_offset, size, stride);\n#endif\n}\n", "inline Tensor & Tensor::set_(const Tensor & source) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::set_(const_cast<Tensor&>(*this), source);\n            break;\n        default:\n            AT_ERROR(\"set_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::set_\", \"source_Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, source)), const_cast<Tensor&>(*this), source);\n#endif\n}\n", "inline Tensor & Tensor::set_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::set_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"set_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::set_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::set_quantizer_(ConstQuantizerPtr quantizer) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::set_quantizer_(const_cast<Tensor&>(*this), quantizer);\n            break;\n        default:\n            AT_ERROR(\"set_quantizer_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::set_quantizer_(Tensor(a!) self, ConstQuantizerPtr quantizer) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, ConstQuantizerPtr>(const_cast<Tensor&>(*this), quantizer);\n#endif\n}\n", "inline bool Tensor::is_set_to(const Tensor & tensor) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::is_set_to(const_cast<Tensor&>(*this), tensor);\n            break;\n        default:\n            AT_ERROR(\"is_set_to not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::is_set_to\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, tensor)), const_cast<Tensor&>(*this), tensor);\n#endif\n}\n", "inline Tensor & Tensor::masked_fill_(const Tensor & mask, Scalar value) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::masked_fill_(const_cast<Tensor&>(*this), mask, value);\n            break;\n        default:\n            AT_ERROR(\"masked_fill_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::masked_fill_\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, mask)), const_cast<Tensor&>(*this), mask, value);\n#endif\n}\n", "inline Tensor Tensor::masked_fill(const Tensor & mask, Scalar value) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::masked_fill(const_cast<Tensor&>(*this), mask, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::masked_fill\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, mask)), const_cast<Tensor&>(*this), mask, value);\n#endif\n}\n", "inline Tensor & Tensor::masked_fill_(const Tensor & mask, const Tensor & value) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::masked_fill_(const_cast<Tensor&>(*this), mask, value);\n            break;\n        default:\n            AT_ERROR(\"masked_fill_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::masked_fill_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, mask, value)), const_cast<Tensor&>(*this), mask, value);\n#endif\n}\n", "inline Tensor Tensor::masked_fill(const Tensor & mask, const Tensor & value) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::masked_fill(const_cast<Tensor&>(*this), mask, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::masked_fill\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, mask, value)), const_cast<Tensor&>(*this), mask, value);\n#endif\n}\n", "inline Tensor & Tensor::masked_scatter_(const Tensor & mask, const Tensor & source) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::masked_scatter_(const_cast<Tensor&>(*this), mask, source);\n            break;\n        default:\n            AT_ERROR(\"masked_scatter_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::masked_scatter_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, mask, source)), const_cast<Tensor&>(*this), mask, source);\n#endif\n}\n", "inline Tensor Tensor::masked_scatter(const Tensor & mask, const Tensor & source) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::masked_scatter(const_cast<Tensor&>(*this), mask, source);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::masked_scatter\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, mask, source)), const_cast<Tensor&>(*this), mask, source);\n#endif\n}\n", "inline Tensor Tensor::view(IntArrayRef size) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::view(const_cast<Tensor&>(*this), size);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::view(const_cast<Tensor&>(*this), size);\n            break;\n        default:\n            AT_ERROR(\"view not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::view\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), size);\n#endif\n}\n", "inline Tensor & Tensor::put_(const Tensor & index, const Tensor & source, bool accumulate) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::put_(const_cast<Tensor&>(*this), index, source, accumulate);\n            break;\n        default:\n            AT_ERROR(\"put_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::put_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, index, source)), const_cast<Tensor&>(*this), index, source, accumulate);\n#endif\n}\n", "inline Tensor & Tensor::index_add_(int64_t dim, const Tensor & index, const Tensor & source) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::index_add_(const_cast<Tensor&>(*this), dim, index, source);\n            break;\n        default:\n            AT_ERROR(\"index_add_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::index_add_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, index, source)), const_cast<Tensor&>(*this), dim, index, source);\n#endif\n}\n", "inline Tensor Tensor::index_add(int64_t dim, const Tensor & index, const Tensor & source) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_add(const_cast<Tensor&>(*this), dim, index, source);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::index_add\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, index, source)), const_cast<Tensor&>(*this), dim, index, source);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::index_add(Dimname dim, const Tensor & index, const Tensor & source) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_add(const_cast<Tensor&>(*this), dim, index, source);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(const_cast<Tensor&>(*this), dim, index, source);\n#endif\n}\n#endif", "inline Tensor & Tensor::index_fill_(int64_t dim, const Tensor & index, Scalar value) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::index_fill_(const_cast<Tensor&>(*this), dim, index, value);\n            break;\n        default:\n            AT_ERROR(\"index_fill_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::index_fill_\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, index)), const_cast<Tensor&>(*this), dim, index, value);\n#endif\n}\n", "inline Tensor Tensor::index_fill(int64_t dim, const Tensor & index, Scalar value) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_fill(const_cast<Tensor&>(*this), dim, index, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::index_fill\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, index)), const_cast<Tensor&>(*this), dim, index, value);\n#endif\n}\n", "inline Tensor & Tensor::index_fill_(int64_t dim, const Tensor & index, const Tensor & value) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::index_fill_(const_cast<Tensor&>(*this), dim, index, value);\n            break;\n        default:\n            AT_ERROR(\"index_fill_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::index_fill_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, index, value)), const_cast<Tensor&>(*this), dim, index, value);\n#endif\n}\n", "inline Tensor Tensor::index_fill(int64_t dim, const Tensor & index, const Tensor & value) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_fill(const_cast<Tensor&>(*this), dim, index, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::index_fill\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, index, value)), const_cast<Tensor&>(*this), dim, index, value);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor & Tensor::index_fill_(Dimname dim, const Tensor & index, Scalar value) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_fill_(const_cast<Tensor&>(*this), dim, index, value);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_fill_.dimname_Scalar(Tensor(a!) self, Dimname dim, Tensor index, Scalar value) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, Dimname, const Tensor &, Scalar>(const_cast<Tensor&>(*this), dim, index, value);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor & Tensor::index_fill_(Dimname dim, const Tensor & index, const Tensor & value) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_fill_(const_cast<Tensor&>(*this), dim, index, value);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_fill_.dimname_Scalar(Tensor(a!) self, Dimname dim, Tensor index, Tensor value) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, Dimname, const Tensor &, const Tensor &>(const_cast<Tensor&>(*this), dim, index, value);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::index_fill(Dimname dim, const Tensor & index, Scalar value) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_fill(const_cast<Tensor&>(*this), dim, index, value);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_fill.dimname_Scalar(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, const Tensor &, Scalar>(const_cast<Tensor&>(*this), dim, index, value);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::index_fill(Dimname dim, const Tensor & index, const Tensor & value) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_fill(const_cast<Tensor&>(*this), dim, index, value);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_fill.dimname_Tensor(Tensor self, Dimname dim, Tensor index, Tensor value) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(const_cast<Tensor&>(*this), dim, index, value);\n#endif\n}\n#endif", "inline Tensor & Tensor::scatter_(int64_t dim, const Tensor & index, const Tensor & src) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::scatter_(const_cast<Tensor&>(*this), dim, index, src);\n            break;\n        default:\n            AT_ERROR(\"scatter_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::scatter_\", \"src\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, index, src)), const_cast<Tensor&>(*this), dim, index, src);\n#endif\n}\n", "inline Tensor Tensor::scatter(int64_t dim, const Tensor & index, const Tensor & src) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::scatter(const_cast<Tensor&>(*this), dim, index, src);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::scatter\", \"src\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, index, src)), const_cast<Tensor&>(*this), dim, index, src);\n#endif\n}\n", "inline Tensor & Tensor::scatter_(int64_t dim, const Tensor & index, Scalar value) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::scatter_(const_cast<Tensor&>(*this), dim, index, value);\n            break;\n        default:\n            AT_ERROR(\"scatter_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::scatter_\", \"value\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, index)), const_cast<Tensor&>(*this), dim, index, value);\n#endif\n}\n", "inline Tensor Tensor::scatter(int64_t dim, const Tensor & index, Scalar value) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::scatter(const_cast<Tensor&>(*this), dim, index, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::scatter\", \"value\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, index)), const_cast<Tensor&>(*this), dim, index, value);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::scatter(Dimname dim, const Tensor & index, const Tensor & src) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::scatter(const_cast<Tensor&>(*this), dim, index, src);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::scatter.dimname_src(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(const_cast<Tensor&>(*this), dim, index, src);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::scatter(Dimname dim, const Tensor & index, Scalar value) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::scatter(const_cast<Tensor&>(*this), dim, index, value);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::scatter.dimname_value(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, const Tensor &, Scalar>(const_cast<Tensor&>(*this), dim, index, value);\n#endif\n}\n#endif", "inline Tensor & Tensor::scatter_add_(int64_t dim, const Tensor & index, const Tensor & src) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::scatter_add_(const_cast<Tensor&>(*this), dim, index, src);\n            break;\n        default:\n            AT_ERROR(\"scatter_add_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::scatter_add_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, index, src)), const_cast<Tensor&>(*this), dim, index, src);\n#endif\n}\n", "inline Tensor Tensor::scatter_add(int64_t dim, const Tensor & index, const Tensor & src) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::scatter_add(const_cast<Tensor&>(*this), dim, index, src);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::scatter_add\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, index, src)), const_cast<Tensor&>(*this), dim, index, src);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::scatter_add(Dimname dim, const Tensor & index, const Tensor & src) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::scatter_add(const_cast<Tensor&>(*this), dim, index, src);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::scatter_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(const_cast<Tensor&>(*this), dim, index, src);\n#endif\n}\n#endif", "inline Tensor & Tensor::lt_(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::lt_(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::lt_\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::lt_(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::lt_(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::lt_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::gt_(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::gt_(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::gt_\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::gt_(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::gt_(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::gt_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::le_(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::le_(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::le_\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::le_(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::le_(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::le_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::ge_(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::ge_(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::ge_\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::ge_(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::ge_(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::ge_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::eq_(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::eq_(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::eq_\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::eq_(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::eq_(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::eq_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::ne_(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::ne_(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::ne_\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::ne_(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::ne_(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::ne_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::__and__(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__and__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__and__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__and__\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::__and__(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__and__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__and__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__and__\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::__iand__(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__iand__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__iand__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__iand__\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::__iand__(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__iand__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__iand__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__iand__\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::__or__(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__or__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__or__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__or__\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::__or__(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__or__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__or__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__or__\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::__ior__(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__ior__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__ior__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__ior__\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::__ior__(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__ior__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__ior__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__ior__\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::__xor__(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__xor__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__xor__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__xor__\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::__xor__(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__xor__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__xor__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__xor__\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::__ixor__(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__ixor__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__ixor__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__ixor__\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::__ixor__(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__ixor__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__ixor__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__ixor__\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::__lshift__(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__lshift__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__lshift__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__lshift__\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::__lshift__(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__lshift__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__lshift__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__lshift__\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::__ilshift__(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__ilshift__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__ilshift__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__ilshift__\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::__ilshift__(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__ilshift__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__ilshift__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__ilshift__\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::__rshift__(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__rshift__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__rshift__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__rshift__\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::__rshift__(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__rshift__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__rshift__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__rshift__\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::__irshift__(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__irshift__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__irshift__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__irshift__\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::__irshift__(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::__irshift__(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"__irshift__ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::__irshift__\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::lgamma_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::lgamma_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"lgamma_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::lgamma_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::atan2_(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::atan2_(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::atan2_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::tril_(int64_t diagonal) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::tril_(const_cast<Tensor&>(*this), diagonal);\n            break;\n        default:\n            AT_ERROR(\"tril_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::tril_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), diagonal);\n#endif\n}\n", "inline Tensor & Tensor::triu_(int64_t diagonal) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::triu_(const_cast<Tensor&>(*this), diagonal);\n            break;\n        default:\n            AT_ERROR(\"triu_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::triu_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), diagonal);\n#endif\n}\n", "inline Tensor & Tensor::digamma_() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::digamma_(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::digamma_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::polygamma_(int64_t n) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::polygamma_(const_cast<Tensor&>(*this), n);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::polygamma_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), n);\n#endif\n}\n", "inline Tensor & Tensor::renorm_(Scalar p, int64_t dim, Scalar maxnorm) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::renorm_(const_cast<Tensor&>(*this), p, dim, maxnorm);\n            break;\n        default:\n            AT_ERROR(\"renorm_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::renorm_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar, int64_t, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), p, dim, maxnorm);\n#endif\n}\n", "inline Tensor & Tensor::pow_(Scalar exponent) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::pow_(const_cast<Tensor&>(*this), exponent);\n            break;\n        default:\n            AT_ERROR(\"pow_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::pow_\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), exponent);\n#endif\n}\n", "inline Tensor & Tensor::pow_(const Tensor & exponent) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::pow_(const_cast<Tensor&>(*this), exponent);\n            break;\n        default:\n            AT_ERROR(\"pow_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::pow_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, exponent)), const_cast<Tensor&>(*this), exponent);\n#endif\n}\n", "inline Tensor & Tensor::lerp_(const Tensor & end, Scalar weight) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::lerp_(const_cast<Tensor&>(*this), end, weight);\n            break;\n        default:\n            AT_ERROR(\"lerp_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::lerp_\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, end)), const_cast<Tensor&>(*this), end, weight);\n#endif\n}\n", "inline Tensor & Tensor::lerp_(const Tensor & end, const Tensor & weight) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::lerp_(const_cast<Tensor&>(*this), end, weight);\n            break;\n        default:\n            AT_ERROR(\"lerp_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::lerp_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, end, weight)), const_cast<Tensor&>(*this), end, weight);\n#endif\n}\n", "inline Tensor & Tensor::fmod_(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::fmod_(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"fmod_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::fmod_\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::fmod_(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::fmod_(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"fmod_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::fmod_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::remainder_(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::remainder_(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"remainder_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::remainder_\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::remainder_(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::remainder_(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"remainder_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::remainder_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor & Tensor::addbmm_(const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::addbmm_(const_cast<Tensor&>(*this), batch1, batch2, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"addbmm_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::addbmm_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, batch1, batch2)), const_cast<Tensor&>(*this), batch1, batch2, beta, alpha);\n#endif\n}\n", "inline Tensor Tensor::addbmm(const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::addbmm(const_cast<Tensor&>(*this), batch1, batch2, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"addbmm not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::addbmm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, batch1, batch2)), const_cast<Tensor&>(*this), batch1, batch2, beta, alpha);\n#endif\n}\n", "inline Tensor & Tensor::addcdiv_(const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::addcdiv_(const_cast<Tensor&>(*this), tensor1, tensor2, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::addcdiv_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, tensor1, tensor2)), const_cast<Tensor&>(*this), tensor1, tensor2, value);\n#endif\n}\n", "inline Tensor & Tensor::random_(int64_t from, int64_t to, Generator * generator) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::random_(const_cast<Tensor&>(*this), from, to, generator);\n            break;\n        default:\n            AT_ERROR(\"random_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::random_\", \"from\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t, int64_t, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), from, to, generator);\n#endif\n}\n", "inline Tensor & Tensor::random_(int64_t to, Generator * generator) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::random_(const_cast<Tensor&>(*this), to, generator);\n            break;\n        default:\n            AT_ERROR(\"random_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::random_\", \"to\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), to, generator);\n#endif\n}\n", "inline Tensor & Tensor::random_(Generator * generator) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::random_(const_cast<Tensor&>(*this), generator);\n            break;\n        default:\n            AT_ERROR(\"random_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::random_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), generator);\n#endif\n}\n", "inline Tensor & Tensor::uniform_(double from, double to, Generator * generator) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::uniform_(const_cast<Tensor&>(*this), from, to, generator);\n            break;\n        default:\n            AT_ERROR(\"uniform_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::uniform_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, double, double, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), from, to, generator);\n#endif\n}\n", "inline Tensor & Tensor::normal_(double mean, double std, Generator * generator) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::normal_(const_cast<Tensor&>(*this), mean, std, generator);\n            break;\n        default:\n            AT_ERROR(\"normal_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::normal_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, double, double, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), mean, std, generator);\n#endif\n}\n", "inline Tensor & Tensor::cauchy_(double median, double sigma, Generator * generator) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::cauchy_(const_cast<Tensor&>(*this), median, sigma, generator);\n            break;\n        default:\n            AT_ERROR(\"cauchy_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::cauchy_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, double, double, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), median, sigma, generator);\n#endif\n}\n", "inline Tensor & Tensor::log_normal_(double mean, double std, Generator * generator) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::log_normal_(const_cast<Tensor&>(*this), mean, std, generator);\n            break;\n        default:\n            AT_ERROR(\"log_normal_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::log_normal_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, double, double, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), mean, std, generator);\n#endif\n}\n", "inline Tensor & Tensor::exponential_(double lambd, Generator * generator) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::exponential_(const_cast<Tensor&>(*this), lambd, generator);\n            break;\n        default:\n            AT_ERROR(\"exponential_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::exponential_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, double, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), lambd, generator);\n#endif\n}\n", "inline Tensor & Tensor::geometric_(double p, Generator * generator) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::geometric_(const_cast<Tensor&>(*this), p, generator);\n            break;\n        default:\n            AT_ERROR(\"geometric_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::geometric_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, double, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), p, generator);\n#endif\n}\n", "inline Tensor Tensor::diag(int64_t diagonal) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::diag(const_cast<Tensor&>(*this), diagonal);\n            break;\n        default:\n            AT_ERROR(\"diag not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::diag\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), diagonal);\n#endif\n}\n", "inline Tensor Tensor::cross(const Tensor & other, c10::optional<int64_t> dim) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cross(const_cast<Tensor&>(*this), other, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::cross\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, c10::optional<int64_t>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other, dim);\n#endif\n}\n", "inline Tensor Tensor::triu(int64_t diagonal) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::triu(const_cast<Tensor&>(*this), diagonal);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::triu\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), diagonal);\n#endif\n}\n", "inline Tensor Tensor::tril(int64_t diagonal) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::tril(const_cast<Tensor&>(*this), diagonal);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::tril\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), diagonal);\n#endif\n}\n", "inline Tensor Tensor::trace() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::trace(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"trace not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::trace\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::ne(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::ne(const_cast<Tensor&>(*this), other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::ne(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"ne not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::ne\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::ne(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::ne(const_cast<Tensor&>(*this), other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::ne(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"ne not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::ne\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::eq(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::eq(const_cast<Tensor&>(*this), other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::eq(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"eq not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::eq\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::eq(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::eq(const_cast<Tensor&>(*this), other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::eq(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"eq not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::eq\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::ge(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::ge(const_cast<Tensor&>(*this), other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::ge(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"ge not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::ge\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::ge(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::ge(const_cast<Tensor&>(*this), other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::ge(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"ge not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::ge\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::le(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::le(const_cast<Tensor&>(*this), other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::le(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"le not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::le\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::le(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::le(const_cast<Tensor&>(*this), other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::le(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"le not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::le\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::gt(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::gt(const_cast<Tensor&>(*this), other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::gt(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"gt not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::gt\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::gt(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::gt(const_cast<Tensor&>(*this), other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::gt(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"gt not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::gt\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::lt(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::lt(const_cast<Tensor&>(*this), other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::lt(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"lt not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::lt\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::lt(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::lt(const_cast<Tensor&>(*this), other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::lt(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"lt not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::lt\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::take(const Tensor & index) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::take(const_cast<Tensor&>(*this), index);\n            break;\n        default:\n            AT_ERROR(\"take not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::take\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, index)), const_cast<Tensor&>(*this), index);\n#endif\n}\n", "inline Tensor Tensor::index_select(int64_t dim, const Tensor & index) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::index_select(const_cast<Tensor&>(*this), dim, index);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::index_select(const_cast<Tensor&>(*this), dim, index);\n            break;\n        default:\n            AT_ERROR(\"index_select not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::index_select\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, index)), const_cast<Tensor&>(*this), dim, index);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::index_select(Dimname dim, const Tensor & index) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_select(const_cast<Tensor&>(*this), dim, index);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_select.dimname(Tensor self, Dimname dim, Tensor index) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, const Tensor &>(const_cast<Tensor&>(*this), dim, index);\n#endif\n}\n#endif", "inline Tensor Tensor::masked_select(const Tensor & mask) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::masked_select(const_cast<Tensor&>(*this), mask);\n            break;\n        default:\n            AT_ERROR(\"masked_select not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::masked_select\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, mask)), const_cast<Tensor&>(*this), mask);\n#endif\n}\n", "inline Tensor Tensor::nonzero() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::nonzero(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"nonzero not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::nonzero\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline std::vector<Tensor> Tensor::nonzero_numpy() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::nonzero_numpy(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::nonzero_numpy\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::vector<Tensor>, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::gather(int64_t dim, const Tensor & index, bool sparse_grad) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::gather(const_cast<Tensor&>(*this), dim, index, sparse_grad);\n            break;\n        default:\n            AT_ERROR(\"gather not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::gather\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, index)), const_cast<Tensor&>(*this), dim, index, sparse_grad);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::gather(Dimname dim, const Tensor & index, bool sparse_grad) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::gather(const_cast<Tensor&>(*this), dim, index, sparse_grad);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::gather.dimname(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, const Tensor &, bool>(const_cast<Tensor&>(*this), dim, index, sparse_grad);\n#endif\n}\n#endif", "inline Tensor Tensor::addcmul(const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::addcmul(const_cast<Tensor&>(*this), tensor1, tensor2, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::addcmul\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, tensor1, tensor2)), const_cast<Tensor&>(*this), tensor1, tensor2, value);\n#endif\n}\n", "inline Tensor & Tensor::addcmul_(const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::addcmul_(const_cast<Tensor&>(*this), tensor1, tensor2, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::addcmul_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, tensor1, tensor2)), const_cast<Tensor&>(*this), tensor1, tensor2, value);\n#endif\n}\n", "inline Tensor Tensor::addcdiv(const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::addcdiv(const_cast<Tensor&>(*this), tensor1, tensor2, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::addcdiv\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, tensor1, tensor2)), const_cast<Tensor&>(*this), tensor1, tensor2, value);\n#endif\n}\n", "inline std::tuple<Tensor,Tensor> Tensor::lstsq(const Tensor & A) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::lstsq(const_cast<Tensor&>(*this), A);\n            break;\n        default:\n            AT_ERROR(\"lstsq not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::lstsq\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, A)), const_cast<Tensor&>(*this), A);\n#endif\n}\n", "inline std::tuple<Tensor,Tensor> Tensor::triangular_solve(const Tensor & A, bool upper, bool transpose, bool unitriangular) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::triangular_solve(const_cast<Tensor&>(*this), A, upper, transpose, unitriangular);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::triangular_solve\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, bool, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, A)), const_cast<Tensor&>(*this), A, upper, transpose, unitriangular);\n#endif\n}\n", "inline std::tuple<Tensor,Tensor> Tensor::symeig(bool eigenvectors, bool upper) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::symeig(const_cast<Tensor&>(*this), eigenvectors, upper);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::symeig\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), eigenvectors, upper);\n#endif\n}\n", "inline std::tuple<Tensor,Tensor> Tensor::eig(bool eigenvectors) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::eig(const_cast<Tensor&>(*this), eigenvectors);\n            break;\n        default:\n            AT_ERROR(\"eig not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::eig\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), eigenvectors);\n#endif\n}\n", "inline std::tuple<Tensor,Tensor,Tensor> Tensor::svd(bool some, bool compute_uv) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::svd(const_cast<Tensor&>(*this), some, compute_uv);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::svd\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), some, compute_uv);\n#endif\n}\n", "inline Tensor Tensor::cholesky(bool upper) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cholesky(const_cast<Tensor&>(*this), upper);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::cholesky\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), upper);\n#endif\n}\n", "inline Tensor Tensor::cholesky_solve(const Tensor & input2, bool upper) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cholesky_solve(const_cast<Tensor&>(*this), input2, upper);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::cholesky_solve\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, input2)), const_cast<Tensor&>(*this), input2, upper);\n#endif\n}\n", "inline std::tuple<Tensor,Tensor> Tensor::solve(const Tensor & A) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::solve(const_cast<Tensor&>(*this), A);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::solve\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, A)), const_cast<Tensor&>(*this), A);\n#endif\n}\n", "inline Tensor Tensor::cholesky_inverse(bool upper) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::cholesky_inverse(const_cast<Tensor&>(*this), upper);\n            break;\n        default:\n            AT_ERROR(\"cholesky_inverse not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::cholesky_inverse\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), upper);\n#endif\n}\n", "inline std::tuple<Tensor,Tensor> Tensor::qr(bool some) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::qr(const_cast<Tensor&>(*this), some);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::qr\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), some);\n#endif\n}\n", "inline std::tuple<Tensor,Tensor> Tensor::geqrf() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::geqrf(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"geqrf not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::geqrf\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::orgqr(const Tensor & input2) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::orgqr(const_cast<Tensor&>(*this), input2);\n            break;\n        default:\n            AT_ERROR(\"orgqr not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::orgqr\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, input2)), const_cast<Tensor&>(*this), input2);\n#endif\n}\n", "inline Tensor Tensor::ormqr(const Tensor & input2, const Tensor & input3, bool left, bool transpose) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::ormqr(const_cast<Tensor&>(*this), input2, input3, left, transpose);\n            break;\n        default:\n            AT_ERROR(\"ormqr not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::ormqr\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, input2, input3)), const_cast<Tensor&>(*this), input2, input3, left, transpose);\n#endif\n}\n", "inline Tensor Tensor::lu_solve(const Tensor & LU_data, const Tensor & LU_pivots) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::lu_solve(const_cast<Tensor&>(*this), LU_data, LU_pivots);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::lu_solve\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, LU_data, LU_pivots)), const_cast<Tensor&>(*this), LU_data, LU_pivots);\n#endif\n}\n", "inline Tensor Tensor::multinomial(int64_t num_samples, bool replacement, Generator * generator) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::multinomial(const_cast<Tensor&>(*this), num_samples, replacement, generator);\n            break;\n        default:\n            AT_ERROR(\"multinomial not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::multinomial\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, bool, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), num_samples, replacement, generator);\n#endif\n}\n", "inline Tensor Tensor::lgamma() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::lgamma(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"lgamma not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::lgamma\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::digamma() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::digamma(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::digamma\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::polygamma(int64_t n) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::polygamma(n, const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::polygamma\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, int64_t, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), n, const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::erfinv() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::erfinv(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"erfinv not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::erfinv\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::erfinv_() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::erfinv_(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"erfinv_ not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::erfinv_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::sign() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sign(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sign\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor & Tensor::sign_() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sign_(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sign_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::dist(const Tensor & other, Scalar p) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::dist(const_cast<Tensor&>(*this), other, p);\n            break;\n        default:\n            AT_ERROR(\"dist not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::dist\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other, p);\n#endif\n}\n", "inline Tensor Tensor::atan2(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::atan2(const_cast<Tensor&>(*this), other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::atan2\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::lerp(const Tensor & end, Scalar weight) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::lerp(const_cast<Tensor&>(*this), end, weight);\n            break;\n        default:\n            AT_ERROR(\"lerp not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::lerp\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, end)), const_cast<Tensor&>(*this), end, weight);\n#endif\n}\n", "inline Tensor Tensor::lerp(const Tensor & end, const Tensor & weight) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::lerp(const_cast<Tensor&>(*this), end, weight);\n            break;\n        default:\n            AT_ERROR(\"lerp not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::lerp\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, end, weight)), const_cast<Tensor&>(*this), end, weight);\n#endif\n}\n", "inline Tensor Tensor::histc(int64_t bins, Scalar min, Scalar max) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::histc(const_cast<Tensor&>(*this), bins, min, max);\n            break;\n        default:\n            AT_ERROR(\"histc not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::histc\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), bins, min, max);\n#endif\n}\n", "inline Tensor Tensor::fmod(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::fmod(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"fmod not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::fmod\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::fmod(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::fmod(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"fmod not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::fmod\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::remainder(Scalar other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::remainder(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"remainder not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::remainder\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::remainder(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::remainder(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"remainder not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::remainder\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::min(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::min(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"min not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::min\", \"other\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::min() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::min(const_cast<Tensor&>(*this));\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::min(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"min not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::min\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::max(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::max(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"max not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::max\", \"other\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::max() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::max(const_cast<Tensor&>(*this));\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::max(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"max not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::max\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::median() const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::median(const_cast<Tensor&>(*this));\n            break;\n        default:\n            AT_ERROR(\"median not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::median\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline std::tuple<Tensor,Tensor> Tensor::sort(int64_t dim, bool descending) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::sort(const_cast<Tensor&>(*this), dim, descending);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::sort(const_cast<Tensor&>(*this), dim, descending);\n            break;\n        default:\n            AT_ERROR(\"sort not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::sort\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, descending);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline std::tuple<Tensor,Tensor> Tensor::sort(Dimname dim, bool descending) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sort(const_cast<Tensor&>(*this), dim, descending);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sort.dimname(Tensor self, Dimname dim, bool descending=False) -> (Tensor values, Tensor indices)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(const_cast<Tensor&>(*this), dim, descending);\n#endif\n}\n#endif", "inline Tensor Tensor::argsort(int64_t dim, bool descending) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::argsort(const_cast<Tensor&>(*this), dim, descending);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::argsort\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dim, descending);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\ninline Tensor Tensor::argsort(Dimname dim, bool descending) const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::argsort(const_cast<Tensor&>(*this), dim, descending);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::argsort.dimname(Tensor self, Dimname dim, bool descending=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, bool>(const_cast<Tensor&>(*this), dim, descending);\n#endif\n}\n#endif", "inline std::tuple<Tensor,Tensor> Tensor::topk(int64_t k, int64_t dim, bool largest, bool sorted) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::topk(const_cast<Tensor&>(*this), k, dim, largest, sorted);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::topk(const_cast<Tensor&>(*this), k, dim, largest, sorted);\n            break;\n        default:\n            AT_ERROR(\"topk not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::topk\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), k, dim, largest, sorted);\n#endif\n}\n", "inline Tensor Tensor::all() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::all(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::all\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::any() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::any(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::any\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n", "inline Tensor Tensor::renorm(Scalar p, int64_t dim, Scalar maxnorm) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::renorm(const_cast<Tensor&>(*this), p, dim, maxnorm);\n            break;\n        default:\n            AT_ERROR(\"renorm not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::renorm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar, int64_t, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), p, dim, maxnorm);\n#endif\n}\n", "inline Tensor Tensor::unfold(int64_t dimension, int64_t size, int64_t step) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::unfold(const_cast<Tensor&>(*this), dimension, size, step);\n            break;\n        default:\n            AT_ERROR(\"unfold not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::unfold\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this), dimension, size, step);\n#endif\n}\n", "inline bool Tensor::equal(const Tensor & other) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::equal(const_cast<Tensor&>(*this), other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::equal(const_cast<Tensor&>(*this), other);\n            break;\n        default:\n            AT_ERROR(\"equal not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::equal\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, other)), const_cast<Tensor&>(*this), other);\n#endif\n}\n", "inline Tensor Tensor::pow(const Tensor & exponent) const {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(type_set()))) {\n        case Backend::CPU:\n            return CPUType::pow(const_cast<Tensor&>(*this), exponent);\n            break;\n        default:\n            AT_ERROR(\"pow not implemented for \", at::toString(type_set()));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::pow\", \"Tensor_Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this, exponent)), const_cast<Tensor&>(*this), exponent);\n#endif\n}\n", "inline Tensor Tensor::alias() const {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::alias(const_cast<Tensor&>(*this));\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton().findSchema({\"aten::alias\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(*this)), const_cast<Tensor&>(*this));\n#endif\n}\n"], "function_declarations": ["static inline Tensor _cast_Byte(const Tensor & self, bool non_blocking=false);\n", "static inline Tensor _cast_Char(const Tensor & self, bool non_blocking=false);\n", "static inline Tensor _cast_Double(const Tensor & self, bool non_blocking=false);\n", "static inline Tensor _cast_Float(const Tensor & self, bool non_blocking=false);\n", "static inline Tensor _cast_Int(const Tensor & self, bool non_blocking=false);\n", "static inline Tensor _cast_Long(const Tensor & self, bool non_blocking=false);\n", "static inline Tensor _cast_Short(const Tensor & self, bool non_blocking=false);\n", "static inline Tensor _cast_Half(const Tensor & self, bool non_blocking=false);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::vector<Tensor> align_tensors(TensorList tensors);\n#endif", "static inline std::tuple<Tensor,Tensor> _cudnn_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool deterministic, bool zero_infinity);\n", "static inline Tensor _cudnn_rnn_flatten_weight(TensorList weight_arr, int64_t weight_stride0, int64_t input_size, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, bool bidirectional);\n", "static inline std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _cudnn_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state);\n", "static inline std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> _cudnn_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, const Tensor & output, const Tensor & grad_output, const Tensor & grad_hy, const Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask);\n", "static inline Tensor _cudnn_init_dropout_state(double dropout, bool train, int64_t dropout_seed, const TensorOptions & options);\n", "static inline int64_t _debug_has_internal_overlap(const Tensor & self);\n", "static inline std::tuple<Tensor,Tensor> _fused_dropout(const Tensor & self, double p, Generator * generator=nullptr);\n", "static inline Tensor _masked_scale(const Tensor & self, const Tensor & mask, double scale);\n", "static inline std::tuple<Tensor,Tensor> _sobol_engine_draw(const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype);\n", "static inline Tensor & _sobol_engine_ff_(Tensor & self, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated);\n", "static inline Tensor & _sobol_engine_scramble_(Tensor & self, const Tensor & ltm, int64_t dimension);\n", "static inline Tensor & _sobol_engine_initialize_state_(Tensor & self, int64_t dimension);\n", "static inline Tensor _reshape_from_tensor(const Tensor & self, const Tensor & shape);\n", "static inline Tensor _shape_as_tensor(const Tensor & self);\n", "static inline Tensor dropout(const Tensor & input, double p, bool train);\n", "static inline Tensor & dropout_(Tensor & self, double p, bool train);\n", "static inline Tensor feature_dropout(const Tensor & input, double p, bool train);\n", "static inline Tensor & feature_dropout_(Tensor & self, double p, bool train);\n", "static inline Tensor alpha_dropout(const Tensor & input, double p, bool train);\n", "static inline Tensor & alpha_dropout_(Tensor & self, double p, bool train);\n", "static inline Tensor feature_alpha_dropout(const Tensor & input, double p, bool train);\n", "static inline Tensor & feature_alpha_dropout_(Tensor & self, double p, bool train);\n", "static inline Tensor abs(const Tensor & self);\n", "static inline Tensor & abs_(Tensor & self);\n", "static inline Tensor & abs_out(Tensor & out, const Tensor & self);\n", "static inline Tensor acos(const Tensor & self);\n", "static inline Tensor & acos_(Tensor & self);\n", "static inline Tensor & acos_out(Tensor & out, const Tensor & self);\n", "static inline Tensor avg_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true);\n", "static inline Tensor adaptive_avg_pool1d(const Tensor & self, IntArrayRef output_size);\n", "static inline std::tuple<Tensor,Tensor> adaptive_max_pool1d(const Tensor & self, IntArrayRef output_size);\n", "static inline Tensor add(const Tensor & self, const Tensor & other, Scalar alpha=1);\n", "static inline Tensor & add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha=1);\n", "static inline Tensor add(const Tensor & self, Scalar other, Scalar alpha=1);\n", "static inline Tensor addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta=1, Scalar alpha=1);\n", "static inline Tensor & addmv_(Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta=1, Scalar alpha=1);\n", "static inline Tensor & addmv_out(Tensor & out, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta=1, Scalar alpha=1);\n", "static inline Tensor addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta=1, Scalar alpha=1);\n", "static inline Tensor & addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta=1, Scalar alpha=1);\n", "static inline Tensor affine_grid_generator(const Tensor & theta, IntArrayRef size, bool align_corners);\n", "static inline Tensor affine_grid_generator_backward(const Tensor & grad, IntArrayRef size, bool align_corners);\n", "static inline Tensor all(const Tensor & self, int64_t dim, bool keepdim=false);\n", "static inline Tensor & all_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor all(const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & all_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "static inline bool allclose(const Tensor & self, const Tensor & other, double rtol=1e-05, double atol=1e-08, bool equal_nan=false);\n", "static inline Tensor any(const Tensor & self, int64_t dim, bool keepdim=false);\n", "static inline Tensor & any_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor any(const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & any_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "static inline Tensor arange(Scalar end, const TensorOptions & options={});\n", "static inline Tensor arange(Scalar start, Scalar end, const TensorOptions & options={});\n", "static inline Tensor arange(Scalar start, Scalar end, Scalar step, const TensorOptions & options={});\n", "static inline Tensor & arange_out(Tensor & out, Scalar end);\n", "static inline Tensor & arange_out(Tensor & out, Scalar start, Scalar end, Scalar step=1);\n", "static inline Tensor _dim_arange(const Tensor & like, int64_t dim);\n", "static inline Tensor argmax(const Tensor & self, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);\n", "static inline Tensor argmin(const Tensor & self, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);\n", "static inline Tensor as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset=c10::nullopt);\n", "static inline Tensor & as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset=c10::nullopt);\n", "static inline Tensor asin(const Tensor & self);\n", "static inline Tensor & asin_(Tensor & self);\n", "static inline Tensor & asin_out(Tensor & out, const Tensor & self);\n", "static inline Tensor atan(const Tensor & self);\n", "static inline Tensor & atan_(Tensor & self);\n", "static inline Tensor & atan_out(Tensor & out, const Tensor & self);\n", "static inline Tensor baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1);\n", "static inline Tensor & _baddbmm_mkl_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1);\n", "static inline Tensor & baddbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1);\n", "static inline Tensor bartlett_window(int64_t window_length, const TensorOptions & options={});\n", "static inline Tensor bartlett_window(int64_t window_length, bool periodic, const TensorOptions & options={});\n", "static inline Tensor batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled);\n", "static inline std::tuple<Tensor,Tensor,Tensor,int64_t> _batch_norm_impl_index(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled);\n", "static inline std::tuple<Tensor,Tensor,Tensor> _batch_norm_impl_index_backward(int64_t impl_index, const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var_transform, bool train, double eps, std::array<bool,3> output_mask);\n", "static inline Tensor bernoulli(const Tensor & self, Generator * generator=nullptr);\n", "static inline Tensor & bernoulli_out(Tensor & out, const Tensor & self, Generator * generator=nullptr);\n", "static inline Tensor bernoulli(const Tensor & self, double p, Generator * generator=nullptr);\n", "static inline Tensor bilinear(const Tensor & input1, const Tensor & input2, const Tensor & weight, const Tensor & bias);\n", "static inline Tensor binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const Tensor & weight={}, const Tensor & pos_weight={}, int64_t reduction=Reduction::Mean);\n", "static inline Tensor binary_cross_entropy_with_logits_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight={}, const Tensor & pos_weight={}, int64_t reduction=Reduction::Mean);\n", "static inline Tensor bincount(const Tensor & self, const Tensor & weights={}, int64_t minlength=0);\n", "static inline Tensor bitwise_not(const Tensor & self);\n", "static inline Tensor & bitwise_not_out(Tensor & out, const Tensor & self);\n", "static inline Tensor logical_not(const Tensor & self);\n", "static inline Tensor & logical_not_out(Tensor & out, const Tensor & self);\n", "static inline Tensor logical_xor(const Tensor & self, const Tensor & other);\n", "static inline Tensor & logical_xor_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "static inline Tensor blackman_window(int64_t window_length, const TensorOptions & options={});\n", "static inline Tensor blackman_window(int64_t window_length, bool periodic, const TensorOptions & options={});\n", "static inline Tensor bmm(const Tensor & self, const Tensor & mat2);\n", "static inline Tensor & bmm_out(Tensor & out, const Tensor & self, const Tensor & mat2);\n", "static inline std::vector<Tensor> broadcast_tensors(TensorList tensors);\n", "static inline Tensor cat(TensorList tensors, int64_t dim=0);\n", "static inline Tensor & cat_out(Tensor & out, TensorList tensors, int64_t dim=0);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor cat(TensorList tensors, Dimname dim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & cat_out(Tensor & out, TensorList tensors, Dimname dim);\n#endif", "static inline Tensor ceil(const Tensor & self);\n", "static inline Tensor & ceil_(Tensor & self);\n", "static inline Tensor & ceil_out(Tensor & out, const Tensor & self);\n", "static inline Tensor chain_matmul(TensorList matrices);\n", "static inline std::vector<Tensor> chunk(const Tensor & self, int64_t chunks, int64_t dim=0);\n", "static inline Tensor clamp(const Tensor & self, c10::optional<Scalar> min=c10::nullopt, c10::optional<Scalar> max=c10::nullopt);\n", "static inline Tensor & clamp_(Tensor & self, c10::optional<Scalar> min=c10::nullopt, c10::optional<Scalar> max=c10::nullopt);\n", "static inline Tensor & clamp_out(Tensor & out, const Tensor & self, c10::optional<Scalar> min=c10::nullopt, c10::optional<Scalar> max=c10::nullopt);\n", "static inline Tensor clamp_max(const Tensor & self, Scalar max);\n", "static inline Tensor & clamp_max_(Tensor & self, Scalar max);\n", "static inline Tensor & clamp_max_out(Tensor & out, const Tensor & self, Scalar max);\n", "static inline Tensor clamp_min(const Tensor & self, Scalar min);\n", "static inline Tensor & clamp_min_(Tensor & self, Scalar min);\n", "static inline Tensor & clamp_min_out(Tensor & out, const Tensor & self, Scalar min);\n", "static inline bool cudnn_is_acceptable(const Tensor & self);\n", "static inline Tensor constant_pad_nd(const Tensor & self, IntArrayRef pad, Scalar value=0);\n", "static inline Tensor convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups);\n", "static inline Tensor convolution_overrideable(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups);\n", "static inline std::tuple<Tensor,Tensor,Tensor> convolution_backward_overrideable(const Tensor & grad_output, const Tensor & input, const Tensor & weight, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, std::array<bool,3> output_mask);\n", "static inline Tensor _convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled);\n", "static inline Tensor _convolution_nogroup(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding);\n", "static inline std::tuple<Tensor,Tensor,Tensor> _convolution_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask);\n", "static inline Tensor conv1d(const Tensor & input, const Tensor & weight, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1, int64_t groups=1);\n", "static inline Tensor conv2d(const Tensor & input, const Tensor & weight, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1, int64_t groups=1);\n", "static inline Tensor conv3d(const Tensor & input, const Tensor & weight, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1, int64_t groups=1);\n", "static inline Tensor conv_tbc(const Tensor & self, const Tensor & weight, const Tensor & bias, int64_t pad=0);\n", "static inline std::tuple<Tensor,Tensor,Tensor> conv_tbc_backward(const Tensor & self, const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t pad);\n", "static inline Tensor conv_transpose1d(const Tensor & input, const Tensor & weight, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, int64_t groups=1, IntArrayRef dilation=1);\n", "static inline Tensor conv_transpose2d(const Tensor & input, const Tensor & weight, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, int64_t groups=1, IntArrayRef dilation=1);\n", "static inline Tensor conv_transpose3d(const Tensor & input, const Tensor & weight, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, int64_t groups=1, IntArrayRef dilation=1);\n", "static inline Tensor _copy_from(const Tensor & self, const Tensor & dst, bool non_blocking=false);\n", "static inline Tensor cos(const Tensor & self);\n", "static inline Tensor & cos_(Tensor & self);\n", "static inline Tensor & cos_out(Tensor & out, const Tensor & self);\n", "static inline Tensor cosh(const Tensor & self);\n", "static inline Tensor & cosh_(Tensor & self);\n", "static inline Tensor & cosh_out(Tensor & out, const Tensor & self);\n", "static inline Tensor cosine_embedding_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin=0.0, int64_t reduction=Reduction::Mean);\n", "static inline Tensor cudnn_affine_grid_generator(const Tensor & theta, int64_t N, int64_t C, int64_t H, int64_t W);\n", "static inline Tensor cudnn_affine_grid_generator_backward(const Tensor & grad, int64_t N, int64_t C, int64_t H, int64_t W);\n", "static inline std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon);\n", "static inline std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon);\n", "static inline Tensor cudnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "static inline Tensor cudnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "static inline std::tuple<Tensor,Tensor,Tensor> cudnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);\n", "static inline Tensor cudnn_convolution_backward_bias(const Tensor & grad_output);\n", "static inline Tensor cudnn_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "static inline Tensor cudnn_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "static inline std::tuple<Tensor,Tensor,Tensor> cudnn_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);\n", "static inline Tensor cudnn_convolution_transpose_backward_bias(const Tensor & grad_output);\n", "static inline Tensor cudnn_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "static inline Tensor cudnn_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "static inline Tensor cudnn_grid_sampler(const Tensor & self, const Tensor & grid);\n", "static inline std::tuple<Tensor,Tensor> cudnn_grid_sampler_backward(const Tensor & self, const Tensor & grid, const Tensor & grad_output);\n", "static inline Tensor cumsum(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);\n", "static inline Tensor & cumsum_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor cumsum(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & cumsum_out(Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "static inline Tensor cumprod(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);\n", "static inline Tensor & cumprod_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor cumprod(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & cumprod_out(Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "static inline Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank=0, int64_t reduction=Reduction::Mean, bool zero_infinity=false);\n", "static inline Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, const Tensor & input_lengths, const Tensor & target_lengths, int64_t blank=0, int64_t reduction=Reduction::Mean, bool zero_infinity=false);\n", "static inline std::tuple<Tensor,Tensor> _ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank=0, bool zero_infinity=false);\n", "static inline Tensor _ctc_loss_backward(const Tensor & grad, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, const Tensor & neg_log_likelihood, const Tensor & log_alpha, int64_t blank, bool zero_infinity=false);\n", "static inline Tensor det(const Tensor & self);\n", "static inline Tensor diag_embed(const Tensor & self, int64_t offset=0, int64_t dim1=-2, int64_t dim2=-1);\n", "static inline Tensor diagflat(const Tensor & self, int64_t offset=0);\n", "static inline Tensor diagonal(const Tensor & self, int64_t offset=0, int64_t dim1=0, int64_t dim2=1);\n", "static inline Tensor div(const Tensor & self, const Tensor & other);\n", "static inline Tensor & div_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "static inline Tensor div(const Tensor & self, Scalar other);\n", "static inline Tensor dot(const Tensor & self, const Tensor & tensor);\n", "static inline Tensor & dot_out(Tensor & out, const Tensor & self, const Tensor & tensor);\n", "static inline Tensor einsum(std::string equation, TensorList tensors);\n", "static inline Tensor embedding(const Tensor & weight, const Tensor & indices, int64_t padding_idx=-1, bool scale_grad_by_freq=false, bool sparse=false);\n", "static inline Tensor embedding_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse);\n", "static inline Tensor embedding_dense_backward(const Tensor & grad_output, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq);\n", "static inline Tensor & embedding_renorm_(Tensor & self, const Tensor & indices, double max_norm, double norm_type);\n", "static inline Tensor embedding_sparse_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq);\n", "static inline std::tuple<Tensor,Tensor,Tensor,Tensor> embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq=false, int64_t mode=0, bool sparse=false, const Tensor & per_sample_weights={});\n", "static inline std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq=false, int64_t mode=0, bool sparse=false, const Tensor & per_sample_weights={});\n", "static inline Tensor _embedding_bag_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights);\n", "static inline Tensor _embedding_bag_sparse_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights);\n", "static inline Tensor _embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights);\n", "static inline Tensor _embedding_bag_per_sample_weights_backward(const Tensor & grad, const Tensor & weight, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, int64_t mode);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor empty(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options={}, c10::optional<MemoryFormat> memory_format=c10::nullopt);\n#endif", "static inline Tensor empty(IntArrayRef size, const TensorOptions & options={}, c10::optional<MemoryFormat> memory_format=c10::nullopt);\n", "static inline Tensor _empty_affine_quantized(IntArrayRef size, const TensorOptions & options={}, double scale=1, int64_t zero_point=0, c10::optional<MemoryFormat> memory_format=MemoryFormat::Contiguous);\n", "static inline Tensor _empty_per_channel_affine_quantized(IntArrayRef size, const Tensor & scales, const Tensor & zero_points, int64_t axis, const TensorOptions & options={}, c10::optional<MemoryFormat> memory_format=MemoryFormat::Contiguous);\n", "static inline Tensor & empty_out(Tensor & out, IntArrayRef size, c10::optional<MemoryFormat> memory_format=c10::nullopt);\n", "static inline Tensor empty_like(const Tensor & self);\n", "static inline Tensor empty_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format=MemoryFormat::Contiguous);\n", "static inline Tensor empty_strided(IntArrayRef size, IntArrayRef stride, const TensorOptions & options={});\n", "static inline Tensor erf(const Tensor & self);\n", "static inline Tensor & erf_(Tensor & self);\n", "static inline Tensor & erf_out(Tensor & out, const Tensor & self);\n", "static inline Tensor erfc(const Tensor & self);\n", "static inline Tensor & erfc_(Tensor & self);\n", "static inline Tensor & erfc_out(Tensor & out, const Tensor & self);\n", "static inline Tensor exp(const Tensor & self);\n", "static inline Tensor & exp_(Tensor & self);\n", "static inline Tensor & exp_out(Tensor & out, const Tensor & self);\n", "static inline Tensor expm1(const Tensor & self);\n", "static inline Tensor & expm1_(Tensor & self);\n", "static inline Tensor & expm1_out(Tensor & out, const Tensor & self);\n", "static inline Tensor eye(int64_t n, const TensorOptions & options={});\n", "static inline Tensor eye(int64_t n, int64_t m, const TensorOptions & options={});\n", "static inline Tensor & eye_out(Tensor & out, int64_t n);\n", "static inline Tensor & eye_out(Tensor & out, int64_t n, int64_t m);\n", "static inline Tensor flatten(const Tensor & self, int64_t start_dim=0, int64_t end_dim=-1);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor flatten(const Tensor & self, int64_t start_dim, int64_t end_dim, Dimname out_dim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor flatten(const Tensor & self, Dimname start_dim, Dimname end_dim, Dimname out_dim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor flatten(const Tensor & self, DimnameList dims, Dimname out_dim);\n#endif", "static inline Tensor & fill_(Tensor & self, Scalar value);\n", "static inline Tensor & fill_(Tensor & self, const Tensor & value);\n", "static inline Tensor floor(const Tensor & self);\n", "static inline Tensor & floor_(Tensor & self);\n", "static inline Tensor & floor_out(Tensor & out, const Tensor & self);\n", "static inline Tensor frac(const Tensor & self);\n", "static inline Tensor & frac_(Tensor & self);\n", "static inline Tensor & frac_out(Tensor & out, const Tensor & self);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor full(IntArrayRef size, Scalar fill_value, c10::optional<DimnameList> names, const TensorOptions & options={});\n#endif", "static inline Tensor full(IntArrayRef size, Scalar fill_value, const TensorOptions & options={});\n", "static inline Tensor & full_out(Tensor & out, IntArrayRef size, Scalar fill_value);\n", "static inline Tensor full_like(const Tensor & self, Scalar fill_value);\n", "static inline Tensor full_like(const Tensor & self, Scalar fill_value, const TensorOptions & options);\n", "static inline Tensor from_file(std::string filename, c10::optional<bool> shared=c10::nullopt, c10::optional<int64_t> size=0, const TensorOptions & options={});\n", "static inline Tensor grid_sampler(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);\n", "static inline Tensor grid_sampler_2d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);\n", "static inline std::tuple<Tensor,Tensor> grid_sampler_2d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);\n", "static inline Tensor grid_sampler_3d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);\n", "static inline std::tuple<Tensor,Tensor> grid_sampler_3d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);\n", "static inline Tensor hann_window(int64_t window_length, const TensorOptions & options={});\n", "static inline Tensor hann_window(int64_t window_length, bool periodic, const TensorOptions & options={});\n", "static inline Tensor hamming_window(int64_t window_length, const TensorOptions & options={});\n", "static inline Tensor hamming_window(int64_t window_length, bool periodic, const TensorOptions & options={});\n", "static inline Tensor hamming_window(int64_t window_length, bool periodic, double alpha, const TensorOptions & options={});\n", "static inline Tensor hamming_window(int64_t window_length, bool periodic, double alpha, double beta, const TensorOptions & options={});\n", "static inline Tensor hinge_embedding_loss(const Tensor & self, const Tensor & target, double margin=1.0, int64_t reduction=Reduction::Mean);\n", "static inline Tensor ger(const Tensor & self, const Tensor & vec2);\n", "static inline Tensor & ger_out(Tensor & out, const Tensor & self, const Tensor & vec2);\n", "static inline Tensor group_norm(const Tensor & input, int64_t num_groups, const Tensor & weight={}, const Tensor & bias={}, double eps=1e-05, bool cudnn_enabled=true);\n", "static inline Tensor fft(const Tensor & self, int64_t signal_ndim, bool normalized=false);\n", "static inline Tensor ifft(const Tensor & self, int64_t signal_ndim, bool normalized=false);\n", "static inline Tensor rfft(const Tensor & self, int64_t signal_ndim, bool normalized=false, bool onesided=true);\n", "static inline Tensor irfft(const Tensor & self, int64_t signal_ndim, bool normalized=false, bool onesided=true, IntArrayRef signal_sizes={});\n", "static inline Tensor _fft_with_size(const Tensor & self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, IntArrayRef checked_signal_sizes, bool normalized, bool onesided, IntArrayRef output_sizes);\n", "static inline int64_t _cufft_get_plan_cache_size(int64_t device_index);\n", "static inline int64_t _cufft_get_plan_cache_max_size(int64_t device_index);\n", "static inline void _cufft_set_plan_cache_max_size(int64_t device_index, int64_t max_size);\n", "static inline void _cufft_clear_plan_cache(int64_t device_index);\n", "static inline Tensor index(const Tensor & self, TensorList indices);\n", "static inline Tensor index_copy(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor index_copy(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source);\n#endif", "static inline Tensor & index_put_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate=false);\n", "static inline Tensor index_put(const Tensor & self, TensorList indices, const Tensor & values, bool accumulate=false);\n", "static inline Tensor & _index_put_impl_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate=false, bool unsafe=false);\n", "static inline Tensor instance_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled);\n", "static inline Tensor inverse(const Tensor & self);\n", "static inline Tensor & inverse_out(Tensor & out, const Tensor & self);\n", "static inline Tensor _inverse_helper(const Tensor & self);\n", "static inline Tensor isclose(const Tensor & self, const Tensor & other, double rtol=1e-05, double atol=1e-08, bool equal_nan=false);\n", "static inline Tensor isnan(const Tensor & self);\n", "static inline bool is_distributed(const Tensor & self);\n", "static inline bool is_floating_point(const Tensor & self);\n", "static inline bool is_complex(const Tensor & self);\n", "static inline bool is_nonzero(const Tensor & self);\n", "static inline bool is_same_size(const Tensor & self, const Tensor & other);\n", "static inline bool is_signed(const Tensor & self);\n", "static inline Tensor kl_div(const Tensor & self, const Tensor & target, int64_t reduction=Reduction::Mean);\n", "static inline Tensor kl_div_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction=Reduction::Mean);\n", "static inline std::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, int64_t dim=-1, bool keepdim=false);\n", "static inline std::tuple<Tensor &,Tensor &> kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim=-1, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, Dimname dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor &,Tensor &> kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, Dimname dim, bool keepdim=false);\n#endif", "static inline Tensor layer_norm(const Tensor & input, IntArrayRef normalized_shape, const Tensor & weight={}, const Tensor & bias={}, double eps=1e-05, bool cudnn_enable=true);\n", "static inline std::tuple<Tensor,Tensor,Tensor> native_layer_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t M, int64_t N, double eps);\n", "static inline std::tuple<Tensor,Tensor,Tensor> native_layer_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & rstd, const Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask);\n", "static inline std::tuple<Tensor,Tensor,Tensor> native_layer_norm_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & input, const Tensor & mean, const Tensor & rstd, const Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask);\n", "static inline Tensor linear(const Tensor & input, const Tensor & weight, const Tensor & bias={});\n", "static inline Tensor mkldnn_linear(const Tensor & input, const Tensor & weight, const Tensor & bias={});\n", "static inline Tensor fbgemm_linear_int8_weight_fp32_activation(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias);\n", "static inline Tensor fbgemm_linear_int8_weight(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias);\n", "static inline std::tuple<Tensor,Tensor,double,int64_t> fbgemm_linear_quantize_weight(const Tensor & input);\n", "static inline Tensor fbgemm_pack_gemm_matrix_fp16(const Tensor & input);\n", "static inline Tensor fbgemm_linear_fp16_weight_fp32_activation(const Tensor & input, const Tensor & packed_weight, const Tensor & bias);\n", "static inline Tensor fbgemm_linear_fp16_weight(const Tensor & input, const Tensor & packed_weight, const Tensor & bias);\n", "static inline Tensor fbgemm_pack_quantized_matrix(const Tensor & input);\n", "static inline Tensor fbgemm_pack_quantized_matrix(const Tensor & input, int64_t K, int64_t N);\n", "static inline Tensor linspace(Scalar start, Scalar end, int64_t steps=100, const TensorOptions & options={});\n", "static inline Tensor & linspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps=100);\n", "static inline Tensor log(const Tensor & self);\n", "static inline Tensor & log_(Tensor & self);\n", "static inline Tensor & log_out(Tensor & out, const Tensor & self);\n", "static inline Tensor log10(const Tensor & self);\n", "static inline Tensor & log10_(Tensor & self);\n", "static inline Tensor & log10_out(Tensor & out, const Tensor & self);\n", "static inline Tensor log1p(const Tensor & self);\n", "static inline Tensor & log1p_(Tensor & self);\n", "static inline Tensor & log1p_out(Tensor & out, const Tensor & self);\n", "static inline Tensor log2(const Tensor & self);\n", "static inline Tensor & log2_(Tensor & self);\n", "static inline Tensor & log2_out(Tensor & out, const Tensor & self);\n", "static inline Tensor logdet(const Tensor & self);\n", "static inline Tensor logspace(Scalar start, Scalar end, int64_t steps=100, double base=10.0, const TensorOptions & options={});\n", "static inline Tensor & logspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps=100, double base=10.0);\n", "static inline Tensor log_softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor log_softmax(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "static inline Tensor _log_softmax(const Tensor & self, int64_t dim, bool half_to_float);\n", "static inline Tensor _log_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self);\n", "static inline Tensor logsumexp(const Tensor & self, IntArrayRef dim, bool keepdim=false);\n", "static inline Tensor & logsumexp_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor logsumexp(const Tensor & self, DimnameList dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & logsumexp_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim=false);\n#endif", "static inline Tensor margin_ranking_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin=0.0, int64_t reduction=Reduction::Mean);\n", "static inline Tensor matmul(const Tensor & self, const Tensor & other);\n", "static inline Tensor & matmul_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "static inline Tensor matrix_rank(const Tensor & self, double tol, bool symmetric=false);\n", "static inline Tensor matrix_rank(const Tensor & self, bool symmetric=false);\n", "static inline Tensor matrix_power(const Tensor & self, int64_t n);\n", "static inline std::tuple<Tensor,Tensor> max(const Tensor & self, int64_t dim, bool keepdim=false);\n", "static inline std::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, int64_t dim, bool keepdim=false);\n", "static inline Tensor max_values(const Tensor & self, IntArrayRef dim, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor,Tensor> max(const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor max_values(const Tensor & self, DimnameList dim, bool keepdim=false);\n#endif", "static inline std::tuple<Tensor,Tensor> max_pool1d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "static inline Tensor max_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "static inline Tensor max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "static inline Tensor mkldnn_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "static inline Tensor quantized_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "static inline Tensor max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "static inline Tensor mean(const Tensor & self, c10::optional<ScalarType> dtype=c10::nullopt);\n", "static inline Tensor mean(const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n", "static inline Tensor & mean_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor mean(const Tensor & self, DimnameList dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & mean_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "static inline std::tuple<Tensor,Tensor> median(const Tensor & self, int64_t dim, bool keepdim=false);\n", "static inline std::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor,Tensor> median(const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "static inline std::tuple<Tensor,Tensor> min(const Tensor & self, int64_t dim, bool keepdim=false);\n", "static inline std::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim=false);\n", "static inline Tensor min_values(const Tensor & self, IntArrayRef dim, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor,Tensor> min(const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor min_values(const Tensor & self, DimnameList dim, bool keepdim=false);\n#endif", "static inline Tensor mkldnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups);\n", "static inline Tensor mkldnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined);\n", "static inline std::tuple<Tensor,Tensor> mkldnn_convolution_backward_weights(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined);\n", "static inline std::tuple<Tensor,Tensor,Tensor> mkldnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, std::array<bool,3> output_mask);\n", "static inline std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon);\n", "static inline std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon);\n", "static inline Tensor miopen_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "static inline Tensor miopen_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "static inline std::tuple<Tensor,Tensor,Tensor> miopen_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);\n", "static inline Tensor miopen_convolution_backward_bias(const Tensor & grad_output);\n", "static inline Tensor miopen_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "static inline Tensor miopen_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "static inline std::tuple<Tensor,Tensor,Tensor> miopen_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);\n", "static inline Tensor miopen_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "static inline Tensor miopen_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "static inline Tensor miopen_depthwise_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "static inline Tensor miopen_depthwise_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "static inline std::tuple<Tensor,Tensor,Tensor> miopen_depthwise_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);\n", "static inline Tensor miopen_depthwise_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "static inline std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> miopen_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & hx, const Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state);\n", "static inline std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> miopen_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, const Tensor & output, const Tensor & grad_output, const Tensor & grad_hy, const Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask);\n", "static inline Tensor mm(const Tensor & self, const Tensor & mat2);\n", "static inline Tensor & mm_out(Tensor & out, const Tensor & self, const Tensor & mat2);\n", "static inline Tensor _sparse_mm(const Tensor & sparse, const Tensor & dense);\n", "static inline std::tuple<Tensor,Tensor> mode(const Tensor & self, int64_t dim=-1, bool keepdim=false);\n", "static inline std::tuple<Tensor &,Tensor &> mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim=-1, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor,Tensor> mode(const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor &,Tensor &> mode_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "static inline Tensor mul(const Tensor & self, const Tensor & other);\n", "static inline Tensor & mul_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "static inline Tensor mul(const Tensor & self, Scalar other);\n", "static inline Tensor mv(const Tensor & self, const Tensor & vec);\n", "static inline Tensor & mv_out(Tensor & out, const Tensor & self, const Tensor & vec);\n", "static inline Tensor mvlgamma(const Tensor & self, int64_t p);\n", "static inline Tensor narrow(const Tensor & self, int64_t dim, int64_t start, int64_t length);\n", "static inline std::tuple<Tensor,Tensor,Tensor> native_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps);\n", "static inline std::tuple<Tensor,Tensor> batch_norm_stats(const Tensor & input, double eps);\n", "static inline Tensor batch_norm_elemt(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & mean, const Tensor & invstd, double eps);\n", "static inline std::tuple<Tensor,Tensor> batch_norm_gather_stats(const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & running_mean, const Tensor & running_var, double momentum, double eps, int64_t count);\n", "static inline std::tuple<Tensor,Tensor> batch_norm_gather_stats_with_counts(const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & running_mean, const Tensor & running_var, double momentum, double eps, IntArrayRef counts);\n", "static inline std::tuple<Tensor,Tensor,Tensor> native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask);\n", "static inline std::tuple<Tensor,Tensor,Tensor,Tensor> batch_norm_backward_reduce(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & weight, bool input_g, bool weight_g, bool bias_g);\n", "static inline Tensor batch_norm_backward_elemt(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & weight, const Tensor & mean_dy, const Tensor & mean_dy_xmu);\n", "static inline std::tuple<Tensor,Tensor> batch_norm_update_stats(const Tensor & input, const Tensor & running_mean, const Tensor & running_var, double momentum);\n", "static inline bool _nnpack_available();\n", "static inline Tensor _nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef padding);\n", "static inline std::tuple<Tensor,Tensor,Tensor> _nnpack_spatial_convolution_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, std::array<bool,3> output_mask);\n", "static inline Tensor _nnpack_spatial_convolution_backward_input(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding);\n", "static inline Tensor _nnpack_spatial_convolution_backward_weight(const Tensor & input, IntArrayRef weightsize, const Tensor & grad_output, IntArrayRef padding);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor ones(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options={});\n#endif", "static inline Tensor ones(IntArrayRef size, const TensorOptions & options={});\n", "static inline Tensor & ones_out(Tensor & out, IntArrayRef size);\n", "static inline Tensor ones_like(const Tensor & self);\n", "static inline Tensor ones_like(const Tensor & self, const TensorOptions & options);\n", "static inline Tensor pairwise_distance(const Tensor & x1, const Tensor & x2, double p=2, double eps=1e-06, bool keepdim=false);\n", "static inline Tensor cdist(const Tensor & x1, const Tensor & x2, double p=2);\n", "static inline Tensor _cdist_backward(const Tensor & grad, const Tensor & x1, const Tensor & x2, double p, const Tensor & cdist);\n", "static inline Tensor pdist(const Tensor & self, double p=2);\n", "static inline Tensor _pdist_forward(const Tensor & self, double p=2);\n", "static inline Tensor _pdist_backward(const Tensor & grad, const Tensor & self, double p, const Tensor & pdist);\n", "static inline Tensor cosine_similarity(const Tensor & x1, const Tensor & x2, int64_t dim=1, double eps=1e-08);\n", "static inline Tensor pixel_shuffle(const Tensor & self, int64_t upscale_factor);\n", "static inline Tensor pinverse(const Tensor & self, double rcond=1e-15);\n", "static inline Tensor poisson_nll_loss(const Tensor & input, const Tensor & target, bool log_input, bool full, double eps, int64_t reduction);\n", "static inline Tensor scalar_tensor(Scalar s, const TensorOptions & options={});\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor rand(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options={});\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor rand(IntArrayRef size, Generator * generator, c10::optional<DimnameList> names, const TensorOptions & options={});\n#endif", "static inline Tensor rand(IntArrayRef size, const TensorOptions & options={});\n", "static inline Tensor rand(IntArrayRef size, Generator * generator, const TensorOptions & options={});\n", "static inline Tensor & rand_out(Tensor & out, IntArrayRef size);\n", "static inline Tensor & rand_out(Tensor & out, IntArrayRef size, Generator * generator);\n", "static inline Tensor rand_like(const Tensor & self);\n", "static inline Tensor rand_like(const Tensor & self, const TensorOptions & options);\n", "static inline Tensor randint(int64_t high, IntArrayRef size, const TensorOptions & options={});\n", "static inline Tensor randint(int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options={});\n", "static inline Tensor randint(int64_t low, int64_t high, IntArrayRef size, const TensorOptions & options={});\n", "static inline Tensor randint(int64_t low, int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options={});\n", "static inline Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size);\n", "static inline Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size, Generator * generator);\n", "static inline Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size);\n", "static inline Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size, Generator * generator);\n", "static inline Tensor randint_like(const Tensor & self, int64_t high);\n", "static inline Tensor randint_like(const Tensor & self, int64_t low, int64_t high);\n", "static inline Tensor randint_like(const Tensor & self, int64_t high, const TensorOptions & options);\n", "static inline Tensor randint_like(const Tensor & self, int64_t low, int64_t high, const TensorOptions & options);\n", "static inline Tensor randn(IntArrayRef size, const TensorOptions & options={});\n", "static inline Tensor randn(IntArrayRef size, Generator * generator, const TensorOptions & options={});\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor randn(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options={});\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor randn(IntArrayRef size, Generator * generator, c10::optional<DimnameList> names, const TensorOptions & options={});\n#endif", "static inline Tensor & randn_out(Tensor & out, IntArrayRef size);\n", "static inline Tensor & randn_out(Tensor & out, IntArrayRef size, Generator * generator);\n", "static inline Tensor randn_like(const Tensor & self);\n", "static inline Tensor randn_like(const Tensor & self, const TensorOptions & options);\n", "static inline Tensor randperm(int64_t n, const TensorOptions & options={});\n", "static inline Tensor randperm(int64_t n, Generator * generator, const TensorOptions & options={});\n", "static inline Tensor & randperm_out(Tensor & out, int64_t n);\n", "static inline Tensor & randperm_out(Tensor & out, int64_t n, Generator * generator);\n", "static inline Tensor range(Scalar start, Scalar end, Scalar step=1, const TensorOptions & options={});\n", "static inline Tensor range(Scalar start, Scalar end, const TensorOptions & options={});\n", "static inline Tensor & range_out(Tensor & out, Scalar start, Scalar end, Scalar step=1);\n", "static inline Tensor reciprocal(const Tensor & self);\n", "static inline Tensor & reciprocal_(Tensor & self);\n", "static inline Tensor & reciprocal_out(Tensor & out, const Tensor & self);\n", "static inline Tensor neg(const Tensor & self);\n", "static inline Tensor & neg_(Tensor & self);\n", "static inline Tensor & neg_out(Tensor & out, const Tensor & self);\n", "static inline Tensor repeat_interleave(const Tensor & repeats);\n", "static inline Tensor repeat_interleave(const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim=c10::nullopt);\n", "static inline Tensor repeat_interleave(const Tensor & self, int64_t repeats, c10::optional<int64_t> dim=c10::nullopt);\n", "static inline Tensor reshape(const Tensor & self, IntArrayRef shape);\n", "static inline Tensor _mkldnn_reshape(const Tensor & self, IntArrayRef shape);\n", "static inline Tensor round(const Tensor & self);\n", "static inline Tensor & round_(Tensor & self);\n", "static inline Tensor & round_out(Tensor & out, const Tensor & self);\n", "static inline Tensor rrelu(const Tensor & self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=false, Generator * generator=nullptr);\n", "static inline Tensor & rrelu_(Tensor & self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=false, Generator * generator=nullptr);\n", "static inline Tensor relu(const Tensor & self);\n", "static inline Tensor & relu_(Tensor & self);\n", "static inline Tensor prelu(const Tensor & self, const Tensor & weight);\n", "static inline std::tuple<Tensor,Tensor> prelu_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight);\n", "static inline Tensor gelu(const Tensor & self);\n", "static inline Tensor gelu_backward(const Tensor & grad, const Tensor & self);\n", "static inline Tensor hardshrink(const Tensor & self, Scalar lambd=0.5);\n", "static inline Tensor hardshrink_backward(const Tensor & grad_out, const Tensor & self, Scalar lambd);\n", "static inline Tensor rsqrt(const Tensor & self);\n", "static inline Tensor & rsqrt_(Tensor & self);\n", "static inline Tensor & rsqrt_out(Tensor & out, const Tensor & self);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor select(const Tensor & self, Dimname dim, int64_t index);\n#endif", "static inline Tensor select(const Tensor & self, int64_t dim, int64_t index);\n", "static inline Tensor selu(const Tensor & self);\n", "static inline Tensor & selu_(Tensor & self);\n", "static inline Tensor celu(const Tensor & self, Scalar alpha=1.0);\n", "static inline Tensor & celu_(Tensor & self, Scalar alpha=1.0);\n", "static inline Tensor sigmoid(const Tensor & self);\n", "static inline Tensor & sigmoid_(Tensor & self);\n", "static inline Tensor & sigmoid_out(Tensor & out, const Tensor & self);\n", "static inline Tensor sin(const Tensor & self);\n", "static inline Tensor & sin_(Tensor & self);\n", "static inline Tensor & sin_out(Tensor & out, const Tensor & self);\n", "static inline Tensor sinh(const Tensor & self);\n", "static inline Tensor & sinh_(Tensor & self);\n", "static inline Tensor & sinh_out(Tensor & out, const Tensor & self);\n", "static inline Tensor detach(const Tensor & self);\n", "static inline Tensor & detach_(Tensor & self);\n", "static inline int64_t size(const Tensor & self, int64_t dim);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline int64_t size(const Tensor & self, Dimname dim);\n#endif", "static inline Tensor slice(const Tensor & self, int64_t dim=0, int64_t start=0, int64_t end=9223372036854775807, int64_t step=1);\n", "static inline std::tuple<Tensor,Tensor> slogdet(const Tensor & self);\n", "static inline Tensor smm(const Tensor & self, const Tensor & mat2);\n", "static inline Tensor softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor softmax(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "static inline Tensor _softmax(const Tensor & self, int64_t dim, bool half_to_float);\n", "static inline Tensor _softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self);\n", "static inline std::vector<Tensor> split(const Tensor & self, int64_t split_size, int64_t dim=0);\n", "static inline std::vector<Tensor> split_with_sizes(const Tensor & self, IntArrayRef split_sizes, int64_t dim=0);\n", "static inline Tensor squeeze(const Tensor & self);\n", "static inline Tensor squeeze(const Tensor & self, int64_t dim);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor squeeze(const Tensor & self, Dimname dim);\n#endif", "static inline Tensor sspaddmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);\n", "static inline Tensor & sspaddmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);\n", "static inline Tensor stack(TensorList tensors, int64_t dim=0);\n", "static inline Tensor & stack_out(Tensor & out, TensorList tensors, int64_t dim=0);\n", "static inline Tensor stft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length=c10::nullopt, c10::optional<int64_t> win_length=c10::nullopt, const Tensor & window={}, bool normalized=false, bool onesided=true);\n", "static inline int64_t stride(const Tensor & self, int64_t dim);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline int64_t stride(const Tensor & self, Dimname dim);\n#endif", "static inline Tensor sum(const Tensor & self, c10::optional<ScalarType> dtype=c10::nullopt);\n", "static inline Tensor sum(const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor sum(const Tensor & self, DimnameList dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "static inline Tensor & sum_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & sum_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "static inline Tensor sqrt(const Tensor & self);\n", "static inline Tensor & sqrt_(Tensor & self);\n", "static inline Tensor & sqrt_out(Tensor & out, const Tensor & self);\n", "static inline Tensor std(const Tensor & self, bool unbiased=true);\n", "static inline Tensor std(const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);\n", "static inline std::tuple<Tensor,Tensor> std_mean(const Tensor & self, bool unbiased=true);\n", "static inline std::tuple<Tensor,Tensor> std_mean(const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor,Tensor> std_mean(const Tensor & self, DimnameList dim, bool unbiased=true, bool keepdim=false);\n#endif", "static inline Tensor & std_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor std(const Tensor & self, DimnameList dim, bool unbiased=true, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & std_out(Tensor & out, const Tensor & self, DimnameList dim, bool unbiased=true, bool keepdim=false);\n#endif", "static inline Tensor prod(const Tensor & self, c10::optional<ScalarType> dtype=c10::nullopt);\n", "static inline Tensor prod(const Tensor & self, int64_t dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n", "static inline Tensor & prod_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor prod(const Tensor & self, Dimname dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & prod_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "static inline Tensor t(const Tensor & self);\n", "static inline Tensor tan(const Tensor & self);\n", "static inline Tensor & tan_(Tensor & self);\n", "static inline Tensor & tan_out(Tensor & out, const Tensor & self);\n", "static inline Tensor tanh(const Tensor & self);\n", "static inline Tensor & tanh_(Tensor & self);\n", "static inline Tensor & tanh_out(Tensor & out, const Tensor & self);\n", "static inline Tensor tensordot(const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other);\n", "static inline Tensor threshold(const Tensor & self, Scalar threshold, Scalar value);\n", "static inline Tensor & threshold_(Tensor & self, Scalar threshold, Scalar value);\n", "static inline Tensor & threshold_out(Tensor & out, const Tensor & self, Scalar threshold, Scalar value);\n", "static inline Tensor threshold_backward(const Tensor & grad_output, const Tensor & self, Scalar threshold);\n", "static inline Tensor transpose(const Tensor & self, int64_t dim0, int64_t dim1);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor transpose(const Tensor & self, Dimname dim0, Dimname dim1);\n#endif", "static inline Tensor _mkldnn_transpose(const Tensor & self, int64_t dim0, int64_t dim1);\n", "static inline Tensor & _mkldnn_transpose_(Tensor & self, int64_t dim0, int64_t dim1);\n", "static inline Tensor one_hot(const Tensor & self, int64_t num_classes=-1);\n", "static inline Tensor flip(const Tensor & self, IntArrayRef dims);\n", "static inline Tensor roll(const Tensor & self, IntArrayRef shifts, IntArrayRef dims={});\n", "static inline Tensor rot90(const Tensor & self, int64_t k=1, IntArrayRef dims={0,1});\n", "static inline Tensor trapz(const Tensor & y, const Tensor & x, int64_t dim=-1);\n", "static inline Tensor trapz(const Tensor & y, double dx=1, int64_t dim=-1);\n", "static inline Tensor _trilinear(const Tensor & i1, const Tensor & i2, const Tensor & i3, IntArrayRef expand1, IntArrayRef expand2, IntArrayRef expand3, IntArrayRef sumdim, int64_t unroll_dim=1);\n", "static inline Tensor triplet_margin_loss(const Tensor & anchor, const Tensor & positive, const Tensor & negative, double margin=1.0, double p=2, double eps=1e-06, bool swap=false, int64_t reduction=Reduction::Mean);\n", "static inline Tensor trunc(const Tensor & self);\n", "static inline Tensor & trunc_(Tensor & self);\n", "static inline Tensor & trunc_out(Tensor & out, const Tensor & self);\n", "static inline bool _has_compatible_shallow_copy_type(const Tensor & self, const Tensor & from);\n", "static inline std::tuple<Tensor,Tensor> _unique(const Tensor & self, bool sorted=true, bool return_inverse=false);\n", "static inline std::tuple<Tensor,Tensor,Tensor> unique_dim(const Tensor & self, int64_t dim, bool sorted=true, bool return_inverse=false, bool return_counts=false);\n", "static inline std::tuple<Tensor,Tensor,Tensor> unique_consecutive(const Tensor & self, bool return_inverse=false, bool return_counts=false, c10::optional<int64_t> dim=c10::nullopt);\n", "static inline std::tuple<Tensor,Tensor,Tensor> unique_dim_consecutive(const Tensor & self, int64_t dim, bool return_inverse=false, bool return_counts=false);\n", "static inline std::tuple<Tensor,Tensor,Tensor> _unique2(const Tensor & self, bool sorted=true, bool return_inverse=false, bool return_counts=false);\n", "static inline Tensor _unsafe_view(const Tensor & self, IntArrayRef size);\n", "static inline Tensor unsqueeze(const Tensor & self, int64_t dim);\n", "static inline Tensor var(const Tensor & self, bool unbiased=true);\n", "static inline Tensor var(const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);\n", "static inline Tensor & var_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor var(const Tensor & self, DimnameList dim, bool unbiased=true, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & var_out(Tensor & out, const Tensor & self, DimnameList dim, bool unbiased=true, bool keepdim=false);\n#endif", "static inline std::tuple<Tensor,Tensor> var_mean(const Tensor & self, bool unbiased=true);\n", "static inline std::tuple<Tensor,Tensor> var_mean(const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor,Tensor> var_mean(const Tensor & self, DimnameList dim, bool unbiased=true, bool keepdim=false);\n#endif", "static inline Tensor where(const Tensor & condition, const Tensor & self, const Tensor & other);\n", "static inline std::vector<Tensor> where(const Tensor & condition);\n", "static inline Tensor _s_where(const Tensor & condition, const Tensor & self, const Tensor & other);\n", "static inline Tensor norm_except_dim(const Tensor & v, int64_t pow=2, int64_t dim=0);\n", "static inline Tensor _weight_norm(const Tensor & v, const Tensor & g, int64_t dim=0);\n", "static inline std::tuple<Tensor,Tensor> _weight_norm_cuda_interface(const Tensor & v, const Tensor & g, int64_t dim=0);\n", "static inline std::tuple<Tensor,Tensor> _weight_norm_cuda_interface_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim);\n", "static inline std::tuple<Tensor,Tensor> _weight_norm_differentiable_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor zeros(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options={});\n#endif", "static inline Tensor zeros(IntArrayRef size, const TensorOptions & options={});\n", "static inline Tensor & zeros_out(Tensor & out, IntArrayRef size);\n", "static inline Tensor zeros_like(const Tensor & self);\n", "static inline Tensor zeros_like(const Tensor & self, const TensorOptions & options);\n", "static inline Tensor _standard_gamma_grad(const Tensor & self, const Tensor & output);\n", "static inline Tensor _standard_gamma(const Tensor & self, Generator * generator=nullptr);\n", "static inline Tensor _dirichlet_grad(const Tensor & x, const Tensor & alpha, const Tensor & total);\n", "static inline Tensor _sample_dirichlet(const Tensor & self, Generator * generator=nullptr);\n", "static inline Tensor poisson(const Tensor & self, Generator * generator=nullptr);\n", "static inline Tensor native_norm(const Tensor & self, Scalar p=2);\n", "static inline Tensor _sparse_sum(const Tensor & self);\n", "static inline Tensor _sparse_sum(const Tensor & self, ScalarType dtype);\n", "static inline Tensor _sparse_sum(const Tensor & self, IntArrayRef dim);\n", "static inline Tensor _sparse_sum(const Tensor & self, IntArrayRef dim, ScalarType dtype);\n", "static inline Tensor _sparse_sum_backward(const Tensor & grad, const Tensor & self, IntArrayRef dim);\n", "static inline Tensor norm(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype);\n", "static inline Tensor norm(const Tensor & self, Scalar p=2);\n", "static inline Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype);\n", "static inline Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim=false);\n", "static inline Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype);\n", "static inline Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor norm(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor norm(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim=false);\n#endif", "static inline Tensor frobenius_norm(const Tensor & self);\n", "static inline Tensor frobenius_norm(const Tensor & self, IntArrayRef dim, bool keepdim=false);\n", "static inline Tensor & frobenius_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false);\n", "static inline Tensor nuclear_norm(const Tensor & self, bool keepdim=false);\n", "static inline Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, bool keepdim=false);\n", "static inline Tensor nuclear_norm(const Tensor & self, IntArrayRef dim, bool keepdim=false);\n", "static inline Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false);\n", "static inline Tensor clone(const Tensor & self);\n", "static inline Tensor & resize_as_(Tensor & self, const Tensor & the_template);\n", "static inline Tensor & pow_out(Tensor & out, const Tensor & self, Scalar exponent);\n", "static inline Tensor pow(const Tensor & self, Scalar exponent);\n", "static inline Tensor & zero_(Tensor & self);\n", "static inline Tensor & sub_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha=1);\n", "static inline Tensor sub(const Tensor & self, const Tensor & other, Scalar alpha=1);\n", "static inline Tensor sub(const Tensor & self, Scalar other, Scalar alpha=1);\n", "static inline Tensor rsub(const Tensor & self, const Tensor & other, Scalar alpha=1);\n", "static inline Tensor rsub(const Tensor & self, Scalar other, Scalar alpha=1);\n", "static inline Tensor _sparse_addmm(const Tensor & self, const Tensor & sparse, const Tensor & dense, Scalar beta=1, Scalar alpha=1);\n", "static inline Tensor & addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);\n", "static inline Tensor addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);\n", "static inline Tensor sparse_coo_tensor(IntArrayRef size, const TensorOptions & options);\n", "static inline Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, const TensorOptions & options={});\n", "static inline Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options={});\n", "static inline Tensor _sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options={});\n", "static inline Tensor _sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const TensorOptions & options);\n", "static inline Tensor _sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const Tensor & indices, const Tensor & values, const TensorOptions & options);\n", "static inline Tensor to_dense_backward(const Tensor & grad, const Tensor & input);\n", "static inline Tensor & hspmm_out(Tensor & out, const Tensor & mat1, const Tensor & mat2);\n", "static inline Tensor hspmm(const Tensor & mat1, const Tensor & mat2);\n", "static inline Tensor & copy_sparse_to_sparse_(Tensor & self, const Tensor & src, bool non_blocking=false);\n", "static inline int64_t numel(const Tensor & self);\n", "static inline std::vector<Tensor> unbind(const Tensor & self, int64_t dim=0);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::vector<Tensor> unbind(const Tensor & self, Dimname dim);\n#endif", "static inline Tensor mkldnn_reorder_conv2d_weight(const Tensor & self, IntArrayRef padding=0, IntArrayRef stride=1, IntArrayRef dilation=1, int64_t groups=1);\n", "static inline Tensor to_mkldnn_backward(const Tensor & grad, const Tensor & input);\n", "static inline Tensor quantize_per_tensor(const Tensor & self, double scale, int64_t zero_point, ScalarType dtype);\n", "static inline Tensor quantize_per_channel(const Tensor & self, const Tensor & scales, const Tensor & zero_points, int64_t axis, ScalarType dtype);\n", "static inline Tensor dequantize(const Tensor & self);\n", "static inline double q_scale(const Tensor & self);\n", "static inline int64_t q_zero_point(const Tensor & self);\n", "static inline Tensor q_per_channel_scales(const Tensor & self);\n", "static inline Tensor q_per_channel_zero_points(const Tensor & self);\n", "static inline int64_t q_per_channel_axis(const Tensor & self);\n", "static inline Tensor int_repr(const Tensor & self);\n", "static inline Tensor _make_per_tensor_quantized_tensor(const Tensor & self, double scale, int64_t zero_point);\n", "static inline Tensor _make_per_channel_quantized_tensor(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis);\n", "static inline Tensor fake_quantize_per_tensor_affine(const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max);\n", "static inline Tensor fake_quantize_per_tensor_affine_backward(const Tensor & grad, const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max);\n", "static inline Tensor fake_quantize_per_channel_affine(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max);\n", "static inline Tensor fake_quantize_per_channel_affine_backward(const Tensor & grad, const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max);\n", "static inline std::vector<Tensor> meshgrid(TensorList tensors);\n", "static inline Tensor cartesian_prod(TensorList tensors);\n", "static inline Tensor combinations(const Tensor & self, int64_t r=2, bool with_replacement=false);\n", "static inline ScalarType result_type(const Tensor & tensor, const Tensor & other);\n", "static inline ScalarType result_type(const Tensor & tensor, Scalar other);\n", "static inline ScalarType result_type(Scalar scalar, const Tensor & tensor);\n", "static inline ScalarType result_type(Scalar scalar1, Scalar scalar2);\n", "static inline bool can_cast(ScalarType from, ScalarType to);\n", "static inline ScalarType promote_types(ScalarType type1, ScalarType type2);\n", "static inline Scalar _local_scalar_dense(const Tensor & self);\n", "static inline std::tuple<Tensor,Tensor,Tensor> _thnn_fused_lstm_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & cx, const Tensor & input_bias={}, const Tensor & hidden_bias={});\n", "static inline std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & cx, const Tensor & cy, const Tensor & workspace, bool has_bias);\n", "static inline std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & input_bias, const Tensor & hidden_bias, const Tensor & cx, const Tensor & cy);\n", "static inline std::tuple<Tensor,Tensor> _thnn_fused_gru_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias={}, const Tensor & hidden_bias={});\n", "static inline std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_gru_cell_backward(const Tensor & grad_hy, const Tensor & workspace, bool has_bias);\n", "static inline std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_gru_cell_backward(const Tensor & grad_hy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias);\n", "static inline std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);\n", "static inline std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);\n", "static inline std::tuple<Tensor,Tensor> gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);\n", "static inline std::tuple<Tensor,Tensor> gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);\n", "static inline std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);\n", "static inline std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);\n", "static inline std::tuple<Tensor,Tensor> rnn_relu(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);\n", "static inline std::tuple<Tensor,Tensor> rnn_relu(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);\n", "static inline std::tuple<Tensor,Tensor> lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih={}, const Tensor & b_hh={});\n", "static inline Tensor gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih={}, const Tensor & b_hh={});\n", "static inline Tensor rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih={}, const Tensor & b_hh={});\n", "static inline Tensor rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih={}, const Tensor & b_hh={});\n", "static inline std::tuple<Tensor,Tensor,Tensor> quantized_lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first, c10::optional<ScalarType> dtype=c10::nullopt, bool use_dynamic=false);\n", "static inline std::tuple<Tensor,Tensor> quantized_gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);\n", "static inline std::tuple<Tensor,Tensor> quantized_gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);\n", "static inline std::tuple<Tensor,Tensor> quantized_lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh);\n", "static inline Tensor quantized_gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh);\n", "static inline Tensor quantized_rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh);\n", "static inline Tensor quantized_rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh);\n", "static inline std::tuple<Tensor,Tensor> _pack_padded_sequence(const Tensor & input, const Tensor & lengths, bool batch_first);\n", "static inline Tensor _pack_padded_sequence_backward(const Tensor & grad, IntArrayRef input_size, const Tensor & batch_sizes, bool batch_first);\n", "static inline std::tuple<Tensor,Tensor> _pad_packed_sequence(const Tensor & data, const Tensor & batch_sizes, bool batch_first, Scalar padding_value, int64_t total_length);\n", "static inline Tensor masked_fill(const Tensor & self, const Tensor & mask, Scalar value);\n", "static inline Tensor masked_fill(const Tensor & self, const Tensor & mask, const Tensor & value);\n", "static inline Tensor masked_scatter(const Tensor & self, const Tensor & mask, const Tensor & source);\n", "static inline Tensor index_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor index_add(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source);\n#endif", "static inline Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, Scalar value);\n", "static inline Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & value);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor index_fill(const Tensor & self, Dimname dim, const Tensor & index, Scalar value);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor index_fill(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & value);\n#endif", "static inline Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src);\n", "static inline Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, Scalar value);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor scatter(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor scatter(const Tensor & self, Dimname dim, const Tensor & index, Scalar value);\n#endif", "static inline Tensor scatter_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor scatter_add(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src);\n#endif", "static inline Tensor __and__(const Tensor & self, Scalar other);\n", "static inline Tensor __and__(const Tensor & self, const Tensor & other);\n", "static inline Tensor __or__(const Tensor & self, Scalar other);\n", "static inline Tensor __or__(const Tensor & self, const Tensor & other);\n", "static inline Tensor __xor__(const Tensor & self, Scalar other);\n", "static inline Tensor __xor__(const Tensor & self, const Tensor & other);\n", "static inline Tensor __lshift__(const Tensor & self, Scalar other);\n", "static inline Tensor __lshift__(const Tensor & self, const Tensor & other);\n", "static inline Tensor __rshift__(const Tensor & self, Scalar other);\n", "static inline Tensor __rshift__(const Tensor & self, const Tensor & other);\n", "static inline Tensor & addbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1);\n", "static inline Tensor addbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1);\n", "static inline Tensor & diag_out(Tensor & out, const Tensor & self, int64_t diagonal=0);\n", "static inline Tensor diag(const Tensor & self, int64_t diagonal=0);\n", "static inline Tensor & cross_out(Tensor & out, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim=c10::nullopt);\n", "static inline Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim=c10::nullopt);\n", "static inline Tensor & triu_out(Tensor & out, const Tensor & self, int64_t diagonal=0);\n", "static inline Tensor triu(const Tensor & self, int64_t diagonal=0);\n", "static inline Tensor & tril_out(Tensor & out, const Tensor & self, int64_t diagonal=0);\n", "static inline Tensor tril(const Tensor & self, int64_t diagonal=0);\n", "static inline Tensor tril_indices(int64_t row, int64_t col, int64_t offset=0, const TensorOptions & options=at::kLong);\n", "static inline Tensor triu_indices(int64_t row, int64_t col, int64_t offset=0, const TensorOptions & options=at::kLong);\n", "static inline Tensor trace(const Tensor & self);\n", "static inline Tensor & ne_out(Tensor & out, const Tensor & self, Scalar other);\n", "static inline Tensor ne(const Tensor & self, Scalar other);\n", "static inline Tensor & ne_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "static inline Tensor ne(const Tensor & self, const Tensor & other);\n", "static inline Tensor & eq_out(Tensor & out, const Tensor & self, Scalar other);\n", "static inline Tensor eq(const Tensor & self, Scalar other);\n", "static inline Tensor & eq_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "static inline Tensor eq(const Tensor & self, const Tensor & other);\n", "static inline Tensor & ge_out(Tensor & out, const Tensor & self, Scalar other);\n", "static inline Tensor ge(const Tensor & self, Scalar other);\n", "static inline Tensor & ge_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "static inline Tensor ge(const Tensor & self, const Tensor & other);\n", "static inline Tensor & le_out(Tensor & out, const Tensor & self, Scalar other);\n", "static inline Tensor le(const Tensor & self, Scalar other);\n", "static inline Tensor & le_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "static inline Tensor le(const Tensor & self, const Tensor & other);\n", "static inline Tensor & gt_out(Tensor & out, const Tensor & self, Scalar other);\n", "static inline Tensor gt(const Tensor & self, Scalar other);\n", "static inline Tensor & gt_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "static inline Tensor gt(const Tensor & self, const Tensor & other);\n", "static inline Tensor & lt_out(Tensor & out, const Tensor & self, Scalar other);\n", "static inline Tensor lt(const Tensor & self, Scalar other);\n", "static inline Tensor & lt_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "static inline Tensor lt(const Tensor & self, const Tensor & other);\n", "static inline Tensor & take_out(Tensor & out, const Tensor & self, const Tensor & index);\n", "static inline Tensor take(const Tensor & self, const Tensor & index);\n", "static inline Tensor & index_select_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index);\n", "static inline Tensor index_select(const Tensor & self, int64_t dim, const Tensor & index);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & index_select_out(Tensor & out, const Tensor & self, Dimname dim, const Tensor & index);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor index_select(const Tensor & self, Dimname dim, const Tensor & index);\n#endif", "static inline Tensor & masked_select_out(Tensor & out, const Tensor & self, const Tensor & mask);\n", "static inline Tensor masked_select(const Tensor & self, const Tensor & mask);\n", "static inline Tensor & nonzero_out(Tensor & out, const Tensor & self);\n", "static inline Tensor nonzero(const Tensor & self);\n", "static inline std::vector<Tensor> nonzero_numpy(const Tensor & self);\n", "static inline Tensor & gather_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad=false);\n", "static inline Tensor gather(const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad=false);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & gather_out(Tensor & out, const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor gather(const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad=false);\n#endif", "static inline Tensor _gather_sparse_backward(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & grad);\n", "static inline Tensor & addcmul_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value=1);\n", "static inline Tensor addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value=1);\n", "static inline Tensor & addcdiv_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value=1);\n", "static inline Tensor addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value=1);\n", "static inline std::tuple<Tensor &,Tensor &> lstsq_out(Tensor & X, Tensor & qr, const Tensor & self, const Tensor & A);\n", "static inline std::tuple<Tensor,Tensor> lstsq(const Tensor & self, const Tensor & A);\n", "static inline std::tuple<Tensor &,Tensor &> triangular_solve_out(Tensor & X, Tensor & M, const Tensor & self, const Tensor & A, bool upper=true, bool transpose=false, bool unitriangular=false);\n", "static inline std::tuple<Tensor,Tensor> triangular_solve(const Tensor & self, const Tensor & A, bool upper=true, bool transpose=false, bool unitriangular=false);\n", "static inline std::tuple<Tensor,Tensor> _triangular_solve_helper(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular);\n", "static inline std::tuple<Tensor &,Tensor &> symeig_out(Tensor & e, Tensor & V, const Tensor & self, bool eigenvectors=false, bool upper=true);\n", "static inline std::tuple<Tensor,Tensor> symeig(const Tensor & self, bool eigenvectors=false, bool upper=true);\n", "static inline std::tuple<Tensor,Tensor> _symeig_helper(const Tensor & self, bool eigenvectors, bool upper);\n", "static inline std::tuple<Tensor &,Tensor &> eig_out(Tensor & e, Tensor & v, const Tensor & self, bool eigenvectors=false);\n", "static inline std::tuple<Tensor,Tensor> eig(const Tensor & self, bool eigenvectors=false);\n", "static inline std::tuple<Tensor &,Tensor &,Tensor &> svd_out(Tensor & U, Tensor & S, Tensor & V, const Tensor & self, bool some=true, bool compute_uv=true);\n", "static inline std::tuple<Tensor,Tensor,Tensor> svd(const Tensor & self, bool some=true, bool compute_uv=true);\n", "static inline std::tuple<Tensor,Tensor,Tensor> _svd_helper(const Tensor & self, bool some, bool compute_uv);\n", "static inline Tensor & cholesky_out(Tensor & out, const Tensor & self, bool upper=false);\n", "static inline Tensor cholesky(const Tensor & self, bool upper=false);\n", "static inline Tensor _cholesky_helper(const Tensor & self, bool upper);\n", "static inline Tensor & cholesky_solve_out(Tensor & out, const Tensor & self, const Tensor & input2, bool upper=false);\n", "static inline Tensor cholesky_solve(const Tensor & self, const Tensor & input2, bool upper=false);\n", "static inline Tensor _cholesky_solve_helper(const Tensor & self, const Tensor & A, bool upper);\n", "static inline std::tuple<Tensor,Tensor> solve(const Tensor & self, const Tensor & A);\n", "static inline std::tuple<Tensor &,Tensor &> solve_out(Tensor & solution, Tensor & lu, const Tensor & self, const Tensor & A);\n", "static inline std::tuple<Tensor,Tensor> _solve_helper(const Tensor & self, const Tensor & A);\n", "static inline Tensor & cholesky_inverse_out(Tensor & out, const Tensor & self, bool upper=false);\n", "static inline Tensor cholesky_inverse(const Tensor & self, bool upper=false);\n", "static inline std::tuple<Tensor &,Tensor &> qr_out(Tensor & Q, Tensor & R, const Tensor & self, bool some=true);\n", "static inline std::tuple<Tensor,Tensor> qr(const Tensor & self, bool some=true);\n", "static inline std::tuple<Tensor,Tensor> _qr_helper(const Tensor & self, bool some);\n", "static inline std::tuple<Tensor &,Tensor &> geqrf_out(Tensor & a, Tensor & tau, const Tensor & self);\n", "static inline std::tuple<Tensor,Tensor> geqrf(const Tensor & self);\n", "static inline Tensor & orgqr_out(Tensor & out, const Tensor & self, const Tensor & input2);\n", "static inline Tensor orgqr(const Tensor & self, const Tensor & input2);\n", "static inline Tensor & ormqr_out(Tensor & out, const Tensor & self, const Tensor & input2, const Tensor & input3, bool left=true, bool transpose=false);\n", "static inline Tensor ormqr(const Tensor & self, const Tensor & input2, const Tensor & input3, bool left=true, bool transpose=false);\n", "static inline std::tuple<Tensor,Tensor,Tensor> _lu_with_info(const Tensor & self, bool pivot=true, bool check_errors=true);\n", "static inline Tensor & lu_solve_out(Tensor & out, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots);\n", "static inline Tensor lu_solve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots);\n", "static inline Tensor _lu_solve_helper(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots);\n", "static inline Tensor & multinomial_out(Tensor & out, const Tensor & self, int64_t num_samples, bool replacement=false, Generator * generator=nullptr);\n", "static inline Tensor multinomial(const Tensor & self, int64_t num_samples, bool replacement=false, Generator * generator=nullptr);\n", "static inline std::tuple<Tensor,Tensor> _multinomial_alias_setup(const Tensor & probs);\n", "static inline Tensor _multinomial_alias_draw(const Tensor & J, const Tensor & q, int64_t num_samples, Generator * generator=nullptr);\n", "static inline Tensor & lgamma_out(Tensor & out, const Tensor & self);\n", "static inline Tensor lgamma(const Tensor & self);\n", "static inline Tensor & digamma_out(Tensor & out, const Tensor & self);\n", "static inline Tensor digamma(const Tensor & self);\n", "static inline Tensor & polygamma_out(Tensor & out, int64_t n, const Tensor & self);\n", "static inline Tensor polygamma(int64_t n, const Tensor & self);\n", "static inline Tensor erfinv(const Tensor & self);\n", "static inline Tensor & erfinv_out(Tensor & out, const Tensor & self);\n", "static inline Tensor sign(const Tensor & self);\n", "static inline Tensor & sign_out(Tensor & out, const Tensor & self);\n", "static inline Tensor dist(const Tensor & self, const Tensor & other, Scalar p=2);\n", "static inline Tensor & atan2_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "static inline Tensor atan2(const Tensor & self, const Tensor & other);\n", "static inline Tensor & lerp_out(Tensor & out, const Tensor & self, const Tensor & end, Scalar weight);\n", "static inline Tensor & lerp_out(Tensor & out, const Tensor & self, const Tensor & end, const Tensor & weight);\n", "static inline Tensor lerp(const Tensor & self, const Tensor & end, Scalar weight);\n", "static inline Tensor lerp(const Tensor & self, const Tensor & end, const Tensor & weight);\n", "static inline Tensor & histc_out(Tensor & out, const Tensor & self, int64_t bins=100, Scalar min=0, Scalar max=0);\n", "static inline Tensor histc(const Tensor & self, int64_t bins=100, Scalar min=0, Scalar max=0);\n", "static inline Tensor & fmod_out(Tensor & out, const Tensor & self, Scalar other);\n", "static inline Tensor fmod(const Tensor & self, Scalar other);\n", "static inline Tensor & fmod_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "static inline Tensor fmod(const Tensor & self, const Tensor & other);\n", "static inline Tensor & remainder_out(Tensor & out, const Tensor & self, Scalar other);\n", "static inline Tensor remainder(const Tensor & self, Scalar other);\n", "static inline Tensor & remainder_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "static inline Tensor remainder(const Tensor & self, const Tensor & other);\n", "static inline Tensor & min_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "static inline Tensor min(const Tensor & self, const Tensor & other);\n", "static inline Tensor min(const Tensor & self);\n", "static inline Tensor & max_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "static inline Tensor max(const Tensor & self, const Tensor & other);\n", "static inline Tensor max(const Tensor & self);\n", "static inline Tensor median(const Tensor & self);\n", "static inline std::tuple<Tensor &,Tensor &> sort_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim=-1, bool descending=false);\n", "static inline std::tuple<Tensor,Tensor> sort(const Tensor & self, int64_t dim=-1, bool descending=false);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor &,Tensor &> sort_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool descending=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor,Tensor> sort(const Tensor & self, Dimname dim, bool descending=false);\n#endif", "static inline Tensor argsort(const Tensor & self, int64_t dim=-1, bool descending=false);\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor argsort(const Tensor & self, Dimname dim, bool descending=false);\n#endif", "static inline std::tuple<Tensor &,Tensor &> topk_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim=-1, bool largest=true, bool sorted=true);\n", "static inline std::tuple<Tensor,Tensor> topk(const Tensor & self, int64_t k, int64_t dim=-1, bool largest=true, bool sorted=true);\n", "static inline Tensor all(const Tensor & self);\n", "static inline Tensor any(const Tensor & self);\n", "static inline Tensor & renorm_out(Tensor & out, const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm);\n", "static inline Tensor renorm(const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm);\n", "static inline bool equal(const Tensor & self, const Tensor & other);\n", "static inline Tensor & pow_out(Tensor & out, const Tensor & self, const Tensor & exponent);\n", "static inline Tensor pow(const Tensor & self, const Tensor & exponent);\n", "static inline Tensor & pow_out(Tensor & out, Scalar self, const Tensor & exponent);\n", "static inline Tensor pow(Scalar self, const Tensor & exponent);\n", "static inline Tensor & normal_out(Tensor & out, const Tensor & mean, double std=1, Generator * generator=nullptr);\n", "static inline Tensor normal(const Tensor & mean, double std=1, Generator * generator=nullptr);\n", "static inline Tensor & normal_out(Tensor & out, double mean, const Tensor & std, Generator * generator=nullptr);\n", "static inline Tensor normal(double mean, const Tensor & std, Generator * generator=nullptr);\n", "static inline Tensor & normal_out(Tensor & out, const Tensor & mean, const Tensor & std, Generator * generator=nullptr);\n", "static inline Tensor normal(const Tensor & mean, const Tensor & std, Generator * generator=nullptr);\n", "static inline Tensor normal(double mean, double std, IntArrayRef size, Generator * generator=nullptr, const TensorOptions & options={});\n", "static inline Tensor & normal_out(Tensor & out, double mean, double std, IntArrayRef size, Generator * generator=nullptr);\n", "static inline Tensor alias(const Tensor & self);\n", "static inline Tensor _addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta=1, Scalar alpha=1);\n", "static inline Tensor & _addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta=1, Scalar alpha=1);\n", "static inline Tensor & _addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta=1, Scalar alpha=1);\n", "static inline Tensor & _index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);\n", "static inline Tensor _cumsum(const Tensor & self, int64_t dim);\n", "static inline Tensor & _cumsum_out(Tensor & out, const Tensor & self, int64_t dim);\n", "static inline Tensor _cumprod(const Tensor & self, int64_t dim);\n", "static inline Tensor & _cumprod_out(Tensor & out, const Tensor & self, int64_t dim);\n", "static inline Tensor _var(const Tensor & self, bool unbiased=true);\n", "static inline Tensor _std(const Tensor & self, bool unbiased=true);\n", "static inline Tensor _cat(TensorList tensors, int64_t dim=0);\n", "static inline Tensor & _cat_out(Tensor & out, TensorList tensors, int64_t dim=0);\n", "static inline std::tuple<Tensor,Tensor> _mode(const Tensor & self, int64_t dim=-1, bool keepdim=false);\n", "static inline std::tuple<Tensor &,Tensor &> _mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim=-1, bool keepdim=false);\n", "static inline std::tuple<Tensor,Tensor> _max(const Tensor & self, int64_t dim, bool keepdim=false);\n", "static inline std::tuple<Tensor &,Tensor &> _max_out(Tensor & max, Tensor & max_indices, const Tensor & self, int64_t dim, bool keepdim=false);\n", "static inline std::tuple<Tensor,Tensor> _min(const Tensor & self, int64_t dim, bool keepdim=false);\n", "static inline std::tuple<Tensor &,Tensor &> _min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim=false);\n", "static inline Tensor & binary_cross_entropy_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight={}, int64_t reduction=Reduction::Mean);\n", "static inline Tensor binary_cross_entropy(const Tensor & self, const Tensor & target, const Tensor & weight={}, int64_t reduction=Reduction::Mean);\n", "static inline Tensor & binary_cross_entropy_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight={}, int64_t reduction=Reduction::Mean);\n", "static inline Tensor binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight={}, int64_t reduction=Reduction::Mean);\n", "static inline Tensor & mse_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction=Reduction::Mean);\n", "static inline Tensor mse_loss(const Tensor & self, const Tensor & target, int64_t reduction=Reduction::Mean);\n", "static inline Tensor & mse_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);\n", "static inline Tensor mse_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);\n", "static inline Tensor & l1_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction=Reduction::Mean);\n", "static inline Tensor l1_loss(const Tensor & self, const Tensor & target, int64_t reduction=Reduction::Mean);\n", "static inline Tensor & l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);\n", "static inline Tensor l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);\n", "static inline Tensor & multi_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, Scalar p=1, Scalar margin=1, const Tensor & weight={}, int64_t reduction=Reduction::Mean);\n", "static inline Tensor multi_margin_loss(const Tensor & self, const Tensor & target, Scalar p=1, Scalar margin=1, const Tensor & weight={}, int64_t reduction=Reduction::Mean);\n", "static inline Tensor & multi_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight={}, int64_t reduction=Reduction::Mean);\n", "static inline Tensor multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight={}, int64_t reduction=Reduction::Mean);\n", "static inline Tensor & multilabel_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction=Reduction::Mean);\n", "static inline Tensor multilabel_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction=Reduction::Mean);\n", "static inline std::tuple<Tensor &,Tensor &> multilabel_margin_loss_forward_out(Tensor & output, Tensor & is_target, const Tensor & self, const Tensor & target, int64_t reduction);\n", "static inline std::tuple<Tensor,Tensor> multilabel_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction);\n", "static inline Tensor & multilabel_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target);\n", "static inline Tensor multilabel_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target);\n", "static inline Tensor & nll_loss_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight={}, int64_t reduction=Reduction::Mean, int64_t ignore_index=-100);\n", "static inline Tensor nll_loss(const Tensor & self, const Tensor & target, const Tensor & weight={}, int64_t reduction=Reduction::Mean, int64_t ignore_index=-100);\n", "static inline std::tuple<Tensor &,Tensor &> nll_loss_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index);\n", "static inline std::tuple<Tensor,Tensor> nll_loss_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index);\n", "static inline Tensor & nll_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight);\n", "static inline Tensor nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight);\n", "static inline Tensor & nll_loss2d_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight={}, int64_t reduction=Reduction::Mean, int64_t ignore_index=-100);\n", "static inline Tensor nll_loss2d(const Tensor & self, const Tensor & target, const Tensor & weight={}, int64_t reduction=Reduction::Mean, int64_t ignore_index=-100);\n", "static inline std::tuple<Tensor &,Tensor &> nll_loss2d_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index);\n", "static inline std::tuple<Tensor,Tensor> nll_loss2d_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index);\n", "static inline Tensor & nll_loss2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight);\n", "static inline Tensor nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight);\n", "static inline Tensor & smooth_l1_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction=Reduction::Mean);\n", "static inline Tensor smooth_l1_loss(const Tensor & self, const Tensor & target, int64_t reduction=Reduction::Mean);\n", "static inline Tensor & smooth_l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);\n", "static inline Tensor smooth_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);\n", "static inline Tensor & soft_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction=Reduction::Mean);\n", "static inline Tensor soft_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction=Reduction::Mean);\n", "static inline Tensor & soft_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);\n", "static inline Tensor soft_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction);\n", "static inline Tensor & elu_out(Tensor & out, const Tensor & self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1);\n", "static inline Tensor elu(const Tensor & self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1);\n", "static inline Tensor & elu_backward_out(Tensor & grad_input, const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output);\n", "static inline Tensor elu_backward(const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output);\n", "static inline Tensor & elu_(Tensor & self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1);\n", "static inline Tensor & glu_out(Tensor & out, const Tensor & self, int64_t dim=-1);\n", "static inline Tensor glu(const Tensor & self, int64_t dim=-1);\n", "static inline Tensor & glu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, int64_t dim);\n", "static inline Tensor glu_backward(const Tensor & grad_output, const Tensor & self, int64_t dim);\n", "static inline Tensor & hardtanh_out(Tensor & out, const Tensor & self, Scalar min_val=-1, Scalar max_val=1);\n", "static inline Tensor hardtanh(const Tensor & self, Scalar min_val=-1, Scalar max_val=1);\n", "static inline Tensor & hardtanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val);\n", "static inline Tensor hardtanh_backward(const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val);\n", "static inline Tensor & hardtanh_(Tensor & self, Scalar min_val=-1, Scalar max_val=1);\n", "static inline Tensor & leaky_relu_out(Tensor & out, const Tensor & self, Scalar negative_slope=0.01);\n", "static inline Tensor leaky_relu(const Tensor & self, Scalar negative_slope=0.01);\n", "static inline Tensor & leaky_relu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar negative_slope);\n", "static inline Tensor leaky_relu_backward(const Tensor & grad_output, const Tensor & self, Scalar negative_slope);\n", "static inline Tensor & leaky_relu_(Tensor & self, Scalar negative_slope=0.01);\n", "static inline Tensor & log_sigmoid_out(Tensor & out, const Tensor & self);\n", "static inline Tensor log_sigmoid(const Tensor & self);\n", "static inline std::tuple<Tensor &,Tensor &> log_sigmoid_forward_out(Tensor & output, Tensor & buffer, const Tensor & self);\n", "static inline std::tuple<Tensor,Tensor> log_sigmoid_forward(const Tensor & self);\n", "static inline Tensor & log_sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & buffer);\n", "static inline Tensor log_sigmoid_backward(const Tensor & grad_output, const Tensor & self, const Tensor & buffer);\n", "static inline Tensor & rrelu_with_noise_out(Tensor & out, const Tensor & self, const Tensor & noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=false, Generator * generator=nullptr);\n", "static inline Tensor rrelu_with_noise(const Tensor & self, const Tensor & noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=false, Generator * generator=nullptr);\n", "static inline Tensor & rrelu_with_noise_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training);\n", "static inline Tensor rrelu_with_noise_backward(const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training);\n", "static inline Tensor & rrelu_with_noise_(Tensor & self, const Tensor & noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=false, Generator * generator=nullptr);\n", "static inline Tensor & softplus_out(Tensor & out, const Tensor & self, Scalar beta=1, Scalar threshold=20);\n", "static inline Tensor softplus(const Tensor & self, Scalar beta=1, Scalar threshold=20);\n", "static inline Tensor & softplus_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output);\n", "static inline Tensor softplus_backward(const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output);\n", "static inline Tensor & softshrink_out(Tensor & out, const Tensor & self, Scalar lambd=0.5);\n", "static inline Tensor softshrink(const Tensor & self, Scalar lambd=0.5);\n", "static inline Tensor & softshrink_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar lambd);\n", "static inline Tensor softshrink_backward(const Tensor & grad_output, const Tensor & self, Scalar lambd);\n", "static inline Tensor & adaptive_avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size);\n", "static inline Tensor adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size);\n", "static inline Tensor mkldnn_adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size);\n", "static inline Tensor _adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size);\n", "static inline Tensor _adaptive_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self);\n", "static inline Tensor & adaptive_avg_pool3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size);\n", "static inline Tensor adaptive_avg_pool3d(const Tensor & self, IntArrayRef output_size);\n", "static inline Tensor & adaptive_avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self);\n", "static inline Tensor adaptive_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self);\n", "static inline std::tuple<Tensor &,Tensor &> adaptive_max_pool2d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size);\n", "static inline std::tuple<Tensor,Tensor> adaptive_max_pool2d(const Tensor & self, IntArrayRef output_size);\n", "static inline Tensor & adaptive_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices);\n", "static inline Tensor adaptive_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices);\n", "static inline std::tuple<Tensor &,Tensor &> adaptive_max_pool3d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size);\n", "static inline std::tuple<Tensor,Tensor> adaptive_max_pool3d(const Tensor & self, IntArrayRef output_size);\n", "static inline Tensor & adaptive_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices);\n", "static inline Tensor adaptive_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices);\n", "static inline Tensor & avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);\n", "static inline Tensor avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);\n", "static inline Tensor & avg_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);\n", "static inline Tensor avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);\n", "static inline Tensor & avg_pool3d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);\n", "static inline Tensor avg_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);\n", "static inline Tensor & avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);\n", "static inline Tensor avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);\n", "static inline std::tuple<Tensor &,Tensor &> fractional_max_pool2d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);\n", "static inline std::tuple<Tensor,Tensor> fractional_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);\n", "static inline Tensor & fractional_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);\n", "static inline Tensor fractional_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);\n", "static inline std::tuple<Tensor &,Tensor &> fractional_max_pool3d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);\n", "static inline std::tuple<Tensor,Tensor> fractional_max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);\n", "static inline Tensor & fractional_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);\n", "static inline Tensor fractional_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);\n", "static inline std::tuple<Tensor &,Tensor &> max_pool2d_with_indices_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "static inline std::tuple<Tensor,Tensor> max_pool2d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "static inline Tensor & max_pool2d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);\n", "static inline Tensor max_pool2d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);\n", "static inline std::tuple<Tensor &,Tensor &> max_pool3d_with_indices_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "static inline std::tuple<Tensor,Tensor> max_pool3d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "static inline Tensor & max_pool3d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);\n", "static inline Tensor max_pool3d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);\n", "static inline Tensor & max_unpool2d_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size);\n", "static inline Tensor max_unpool2d(const Tensor & self, const Tensor & indices, IntArrayRef output_size);\n", "static inline Tensor & max_unpool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size);\n", "static inline Tensor max_unpool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size);\n", "static inline Tensor & max_unpool3d_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);\n", "static inline Tensor max_unpool3d(const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);\n", "static inline Tensor & max_unpool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);\n", "static inline Tensor max_unpool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);\n", "static inline Tensor & reflection_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding);\n", "static inline Tensor reflection_pad1d(const Tensor & self, IntArrayRef padding);\n", "static inline Tensor & reflection_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "static inline Tensor reflection_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "static inline Tensor & reflection_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding);\n", "static inline Tensor reflection_pad2d(const Tensor & self, IntArrayRef padding);\n", "static inline Tensor & reflection_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "static inline Tensor reflection_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "static inline Tensor & replication_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding);\n", "static inline Tensor replication_pad1d(const Tensor & self, IntArrayRef padding);\n", "static inline Tensor & replication_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "static inline Tensor replication_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "static inline Tensor & replication_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding);\n", "static inline Tensor replication_pad2d(const Tensor & self, IntArrayRef padding);\n", "static inline Tensor & replication_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "static inline Tensor replication_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "static inline Tensor & replication_pad3d_out(Tensor & out, const Tensor & self, IntArrayRef padding);\n", "static inline Tensor replication_pad3d(const Tensor & self, IntArrayRef padding);\n", "static inline Tensor & replication_pad3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "static inline Tensor replication_pad3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "static inline Tensor & upsample_linear1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "static inline Tensor upsample_linear1d(const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "static inline Tensor & upsample_linear1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "static inline Tensor upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "static inline Tensor & upsample_bilinear2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "static inline Tensor upsample_bilinear2d(const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "static inline Tensor & upsample_bilinear2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "static inline Tensor upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "static inline Tensor & upsample_bicubic2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "static inline Tensor upsample_bicubic2d(const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "static inline Tensor & upsample_bicubic2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "static inline Tensor upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "static inline Tensor & upsample_trilinear3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "static inline Tensor upsample_trilinear3d(const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "static inline Tensor & upsample_trilinear3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "static inline Tensor upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "static inline Tensor & upsample_nearest1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size);\n", "static inline Tensor upsample_nearest1d(const Tensor & self, IntArrayRef output_size);\n", "static inline Tensor & upsample_nearest1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size);\n", "static inline Tensor upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size);\n", "static inline Tensor & upsample_nearest2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size);\n", "static inline Tensor upsample_nearest2d(const Tensor & self, IntArrayRef output_size);\n", "static inline Tensor & upsample_nearest2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size);\n", "static inline Tensor upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size);\n", "static inline Tensor & upsample_nearest3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size);\n", "static inline Tensor upsample_nearest3d(const Tensor & self, IntArrayRef output_size);\n", "static inline Tensor & upsample_nearest3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size);\n", "static inline Tensor upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size);\n", "static inline Tensor & sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output);\n", "static inline Tensor sigmoid_backward(const Tensor & grad_output, const Tensor & output);\n", "static inline Tensor & tanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output);\n", "static inline Tensor tanh_backward(const Tensor & grad_output, const Tensor & output);\n", "static inline Tensor & slow_conv_transpose2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);\n", "static inline Tensor slow_conv_transpose2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);\n", "static inline std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones);\n", "static inline std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask);\n", "static inline Tensor & slow_conv_transpose3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);\n", "static inline Tensor slow_conv_transpose3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);\n", "static inline std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input);\n", "static inline std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask);\n", "static inline Tensor & thnn_conv2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0);\n", "static inline Tensor thnn_conv2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0);\n", "static inline std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding);\n", "static inline std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding);\n", "static inline std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input);\n", "static inline std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask);\n", "static inline Tensor & thnn_conv_depthwise2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1);\n", "static inline Tensor thnn_conv_depthwise2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1);\n", "static inline Tensor & thnn_conv_depthwise2d_forward_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation);\n", "static inline Tensor thnn_conv_depthwise2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation);\n", "static inline std::tuple<Tensor &,Tensor &> thnn_conv_depthwise2d_backward_out(Tensor & grad_input, Tensor & grad_weight, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation);\n", "static inline std::tuple<Tensor,Tensor> thnn_conv_depthwise2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,2> output_mask);\n", "static inline Tensor & thnn_conv3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0);\n", "static inline Tensor thnn_conv3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0);\n", "static inline std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv3d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding);\n", "static inline std::tuple<Tensor,Tensor,Tensor> thnn_conv3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding);\n", "static inline std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input);\n", "static inline std::tuple<Tensor,Tensor,Tensor> thnn_conv3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask);\n", "static inline Tensor slow_conv_dilated2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1);\n", "static inline std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask);\n", "static inline Tensor slow_conv_dilated3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1);\n", "static inline std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask);\n", "static inline Tensor & col2im_out(Tensor & out, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "static inline Tensor col2im(const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "static inline Tensor & col2im_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "static inline Tensor col2im_backward(const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "static inline Tensor & im2col_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "static inline Tensor im2col(const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "static inline Tensor & im2col_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "static inline Tensor im2col_backward(const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "static inline Tensor & rivergold_test_out(Tensor & out, const Tensor & self);\n", "static inline Tensor rivergold_test(const Tensor & self);\n"], "function_definitions": ["static inline Tensor _cast_Byte(const Tensor & self, bool non_blocking) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_cast_Byte(self, non_blocking);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_cast_Byte\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, non_blocking);\n#endif\n}\n", "static inline Tensor _cast_Char(const Tensor & self, bool non_blocking) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_cast_Char(self, non_blocking);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_cast_Char\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, non_blocking);\n#endif\n}\n", "static inline Tensor _cast_Double(const Tensor & self, bool non_blocking) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_cast_Double(self, non_blocking);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_cast_Double\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, non_blocking);\n#endif\n}\n", "static inline Tensor _cast_Float(const Tensor & self, bool non_blocking) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_cast_Float(self, non_blocking);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_cast_Float\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, non_blocking);\n#endif\n}\n", "static inline Tensor _cast_Int(const Tensor & self, bool non_blocking) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_cast_Int(self, non_blocking);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_cast_Int\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, non_blocking);\n#endif\n}\n", "static inline Tensor _cast_Long(const Tensor & self, bool non_blocking) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_cast_Long(self, non_blocking);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_cast_Long\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, non_blocking);\n#endif\n}\n", "static inline Tensor _cast_Short(const Tensor & self, bool non_blocking) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_cast_Short(self, non_blocking);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_cast_Short\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, non_blocking);\n#endif\n}\n", "static inline Tensor _cast_Half(const Tensor & self, bool non_blocking) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_cast_Half(self, non_blocking);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_cast_Half\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, non_blocking);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::vector<Tensor> align_tensors(TensorList tensors) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::align_tensors(tensors);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::align_tensors\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::vector<Tensor>, TensorList>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(tensors)), tensors);\n#endif\n}\n#endif", "static inline std::tuple<Tensor,Tensor> _cudnn_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool deterministic, bool zero_infinity) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(log_probs, targets)))) {\n    \n        default:\n            AT_ERROR(\"_cudnn_ctc_loss not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(log_probs, targets)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_cudnn_ctc_loss\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(log_probs, targets)), log_probs, targets, input_lengths, target_lengths, blank, deterministic, zero_infinity);\n#endif\n}\n", "static inline Tensor _cudnn_rnn_flatten_weight(TensorList weight_arr, int64_t weight_stride0, int64_t input_size, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, bool bidirectional) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(weight_arr)))) {\n    \n        default:\n            AT_ERROR(\"_cudnn_rnn_flatten_weight not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(weight_arr)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_cudnn_rnn_flatten_weight\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, TensorList, int64_t, int64_t, int64_t, int64_t, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(weight_arr)), weight_arr, weight_stride0, input_size, mode, hidden_size, num_layers, batch_first, bidirectional);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _cudnn_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, weight, weight_buf, hx, cx, dropout_state)))) {\n    \n        default:\n            AT_ERROR(\"_cudnn_rnn not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input, weight, weight_buf, hx, cx, dropout_state)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_cudnn_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor? weight_buf, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor>, const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const Tensor &>(input, weight, weight_stride0, weight_buf, hx, cx, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> _cudnn_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, const Tensor & output, const Tensor & grad_output, const Tensor & grad_hy, const Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, weight, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, dropout_state, reserve)))) {\n    \n        default:\n            AT_ERROR(\"_cudnn_rnn_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input, weight, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, dropout_state, reserve)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_cudnn_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>>, const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,4>>(input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask);\n#endif\n}\n", "static inline Tensor _cudnn_init_dropout_state(double dropout, bool train, int64_t dropout_seed, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(options)))) {\n    \n        default:\n            AT_ERROR(\"_cudnn_init_dropout_state not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(options)));\n    }\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::_cudnn_init_dropout_state(float dropout, bool train, int dropout_seed, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\");\n    return table->callUnboxed<Tensor, double, bool, int64_t, const TensorOptions &>(dropout, train, dropout_seed, options);\n#endif\n}\n", "static inline int64_t _debug_has_internal_overlap(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_debug_has_internal_overlap(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_debug_has_internal_overlap\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<int64_t, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> _fused_dropout(const Tensor & self, double p, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n    \n        default:\n            AT_ERROR(\"_fused_dropout not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_fused_dropout\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, double, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, p, generator);\n#endif\n}\n", "static inline Tensor _masked_scale(const Tensor & self, const Tensor & mask, double scale) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mask)))) {\n    \n        default:\n            AT_ERROR(\"_masked_scale not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, mask)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_masked_scale\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, double>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mask)), self, mask, scale);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> _sobol_engine_draw(const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_sobol_engine_draw(quasi, n, sobolstate, dimension, num_generated, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_sobol_engine_draw(Tensor quasi, int n, Tensor sobolstate, int dimension, int num_generated, ScalarType? dtype) -> (Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, const Tensor &, int64_t, int64_t, c10::optional<ScalarType>>(quasi, n, sobolstate, dimension, num_generated, dtype);\n#endif\n}\n", "static inline Tensor & _sobol_engine_ff_(Tensor & self, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_sobol_engine_ff_(self, n, sobolstate, dimension, num_generated);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_sobol_engine_ff_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t, const Tensor &, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, sobolstate)), self, n, sobolstate, dimension, num_generated);\n#endif\n}\n", "static inline Tensor & _sobol_engine_scramble_(Tensor & self, const Tensor & ltm, int64_t dimension) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_sobol_engine_scramble_(self, ltm, dimension);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_sobol_engine_scramble_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, ltm)), self, ltm, dimension);\n#endif\n}\n", "static inline Tensor & _sobol_engine_initialize_state_(Tensor & self, int64_t dimension) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_sobol_engine_initialize_state_(self, dimension);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_sobol_engine_initialize_state_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dimension);\n#endif\n}\n", "static inline Tensor _reshape_from_tensor(const Tensor & self, const Tensor & shape) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_reshape_from_tensor(self, shape);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_reshape_from_tensor\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, shape)), self, shape);\n#endif\n}\n", "static inline Tensor _shape_as_tensor(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_shape_as_tensor(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_shape_as_tensor\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor dropout(const Tensor & input, double p, bool train) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::dropout(input, p, train);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::dropout\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, double, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input)), input, p, train);\n#endif\n}\n", "static inline Tensor & dropout_(Tensor & self, double p, bool train) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::dropout_(self, p, train);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::dropout_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, double, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, p, train);\n#endif\n}\n", "static inline Tensor feature_dropout(const Tensor & input, double p, bool train) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::feature_dropout(input, p, train);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::feature_dropout\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, double, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input)), input, p, train);\n#endif\n}\n", "static inline Tensor & feature_dropout_(Tensor & self, double p, bool train) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::feature_dropout_(self, p, train);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::feature_dropout_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, double, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, p, train);\n#endif\n}\n", "static inline Tensor alpha_dropout(const Tensor & input, double p, bool train) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::alpha_dropout(input, p, train);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::alpha_dropout\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, double, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input)), input, p, train);\n#endif\n}\n", "static inline Tensor & alpha_dropout_(Tensor & self, double p, bool train) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::alpha_dropout_(self, p, train);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::alpha_dropout_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, double, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, p, train);\n#endif\n}\n", "static inline Tensor feature_alpha_dropout(const Tensor & input, double p, bool train) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::feature_alpha_dropout(input, p, train);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::feature_alpha_dropout\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, double, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input)), input, p, train);\n#endif\n}\n", "static inline Tensor & feature_alpha_dropout_(Tensor & self, double p, bool train) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::feature_alpha_dropout_(self, p, train);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::feature_alpha_dropout_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, double, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, p, train);\n#endif\n}\n", "static inline Tensor abs(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::abs(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::abs\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & abs_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::abs_(self);\n            break;\n        default:\n            AT_ERROR(\"abs_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::abs_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & abs_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::abs_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"abs_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::abs.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor acos(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::acos(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::acos\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & acos_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::acos_(self);\n            break;\n        default:\n            AT_ERROR(\"acos_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::acos_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & acos_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::acos_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"acos_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::acos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor avg_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::avg_pool1d(self, kernel_size, stride, padding, ceil_mode, count_include_pad);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::avg_pool1d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, kernel_size, stride, padding, ceil_mode, count_include_pad);\n#endif\n}\n", "static inline Tensor adaptive_avg_pool1d(const Tensor & self, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::adaptive_avg_pool1d(self, output_size);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::adaptive_avg_pool1d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, output_size);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> adaptive_max_pool1d(const Tensor & self, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::adaptive_max_pool1d(self, output_size);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::adaptive_max_pool1d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, output_size);\n#endif\n}\n", "static inline Tensor add(const Tensor & self, const Tensor & other, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::add(self, other, alpha);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::add(self, other, alpha);\n            break;\n        default:\n            AT_ERROR(\"add not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::add\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other, alpha);\n#endif\n}\n", "static inline Tensor & add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, other)))) {\n        case Backend::CPU:\n            return CPUType::add_out(out, self, other, alpha);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::add_out(out, self, other, alpha);\n            break;\n        default:\n            AT_ERROR(\"add_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, other)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar>(out, self, other, alpha);\n#endif\n}\n", "static inline Tensor add(const Tensor & self, Scalar other, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::add(self, other, alpha);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::add\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, other, alpha);\n#endif\n}\n", "static inline Tensor addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mat, vec)))) {\n        case Backend::CPU:\n            return CPUType::addmv(self, mat, vec, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"addmv not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, mat, vec)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::addmv\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mat, vec)), self, mat, vec, beta, alpha);\n#endif\n}\n", "static inline Tensor & addmv_(Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mat, vec)))) {\n        case Backend::CPU:\n            return CPUType::addmv_(self, mat, vec, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"addmv_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, mat, vec)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::addmv_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mat, vec)), self, mat, vec, beta, alpha);\n#endif\n}\n", "static inline Tensor & addmv_out(Tensor & out, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, mat, vec)))) {\n        case Backend::CPU:\n            return CPUType::addmv_out(out, self, mat, vec, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"addmv_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, mat, vec)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::addmv.out(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(out, self, mat, vec, beta, alpha);\n#endif\n}\n", "static inline Tensor addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::addr(self, vec1, vec2, beta, alpha);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::addr\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, vec1, vec2)), self, vec1, vec2, beta, alpha);\n#endif\n}\n", "static inline Tensor & addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::addr_out(out, self, vec1, vec2, beta, alpha);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(out, self, vec1, vec2, beta, alpha);\n#endif\n}\n", "static inline Tensor affine_grid_generator(const Tensor & theta, IntArrayRef size, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::affine_grid_generator(theta, size, align_corners);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::affine_grid_generator\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(theta)), theta, size, align_corners);\n#endif\n}\n", "static inline Tensor affine_grid_generator_backward(const Tensor & grad, IntArrayRef size, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::affine_grid_generator_backward(grad, size, align_corners);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::affine_grid_generator_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad)), grad, size, align_corners);\n#endif\n}\n", "static inline Tensor all(const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::all(self, dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::all\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, keepdim);\n#endif\n}\n", "static inline Tensor & all_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::all_out(out, self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::all.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, int64_t, bool>(out, self, dim, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor all(const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::all(self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::all.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, bool>(self, dim, keepdim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & all_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::all_out(out, self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::all.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Dimname, bool>(out, self, dim, keepdim);\n#endif\n}\n#endif", "static inline bool allclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::allclose(self, other, rtol, atol, equal_nan);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::allclose\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &, const Tensor &, double, double, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other, rtol, atol, equal_nan);\n#endif\n}\n", "static inline Tensor any(const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::any(self, dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::any\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, keepdim);\n#endif\n}\n", "static inline Tensor & any_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::any_out(out, self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::any.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, int64_t, bool>(out, self, dim, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor any(const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::any(self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::any.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, bool>(self, dim, keepdim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & any_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::any_out(out, self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::any.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Dimname, bool>(out, self, dim, keepdim);\n#endif\n}\n#endif", "static inline Tensor arange(Scalar end, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::arange(end, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::arange(Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, Scalar, const TensorOptions &>(end, options);\n#endif\n}\n", "static inline Tensor arange(Scalar start, Scalar end, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::arange(start, end, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::arange.start(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, Scalar, Scalar, const TensorOptions &>(start, end, options);\n#endif\n}\n", "static inline Tensor arange(Scalar start, Scalar end, Scalar step, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::arange(start, end, step, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::arange.start_step(Scalar start, Scalar end, Scalar step, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, Scalar, Scalar, Scalar, const TensorOptions &>(start, end, step, options);\n#endif\n}\n", "static inline Tensor & arange_out(Tensor & out, Scalar end) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::arange_out(out, end);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::arange.out(Scalar end, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, Scalar>(out, end);\n#endif\n}\n", "static inline Tensor & arange_out(Tensor & out, Scalar start, Scalar end, Scalar step) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out)))) {\n        case Backend::CPU:\n            return CPUType::arange_out(out, start, end, step);\n            break;\n        default:\n            AT_ERROR(\"arange_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::arange.start_out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, Scalar, Scalar, Scalar>(out, start, end, step);\n#endif\n}\n", "static inline Tensor _dim_arange(const Tensor & like, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_dim_arange(like, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_dim_arange\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(like)), like, dim);\n#endif\n}\n", "static inline Tensor argmax(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::argmax(self, dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::argmax\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, c10::optional<int64_t>, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, keepdim);\n#endif\n}\n", "static inline Tensor argmin(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::argmin(self, dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::argmin\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, c10::optional<int64_t>, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, keepdim);\n#endif\n}\n", "static inline Tensor as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::as_strided(self, size, stride, storage_offset);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::as_strided(self, size, stride, storage_offset);\n            break;\n        default:\n            AT_ERROR(\"as_strided not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::as_strided\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, size, stride, storage_offset);\n#endif\n}\n", "static inline Tensor & as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::as_strided_(self, size, stride, storage_offset);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::as_strided_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, size, stride, storage_offset);\n#endif\n}\n", "static inline Tensor asin(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::asin(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::asin\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & asin_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::asin_(self);\n            break;\n        default:\n            AT_ERROR(\"asin_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::asin_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & asin_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::asin_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"asin_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::asin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor atan(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::atan(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::atan\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & atan_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::atan_(self);\n            break;\n        default:\n            AT_ERROR(\"atan_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::atan_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & atan_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::atan_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"atan_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::atan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, batch1, batch2)))) {\n        case Backend::CPU:\n            return CPUType::baddbmm(self, batch1, batch2, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"baddbmm not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, batch1, batch2)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::baddbmm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, batch1, batch2)), self, batch1, batch2, beta, alpha);\n#endif\n}\n", "static inline Tensor & _baddbmm_mkl_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_baddbmm_mkl_(self, batch1, batch2, beta, alpha);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_baddbmm_mkl_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, batch1, batch2)), self, batch1, batch2, beta, alpha);\n#endif\n}\n", "static inline Tensor & baddbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, batch1, batch2)))) {\n        case Backend::CPU:\n            return CPUType::baddbmm_out(out, self, batch1, batch2, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"baddbmm_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, batch1, batch2)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::baddbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(out, self, batch1, batch2, beta, alpha);\n#endif\n}\n", "static inline Tensor bartlett_window(int64_t window_length, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::bartlett_window(window_length, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::bartlett_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, const TensorOptions &>(window_length, options);\n#endif\n}\n", "static inline Tensor bartlett_window(int64_t window_length, bool periodic, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::bartlett_window(window_length, periodic, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::bartlett_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, bool, const TensorOptions &>(window_length, periodic, options);\n#endif\n}\n", "static inline Tensor batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::batch_norm(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double, bool>(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor,int64_t> _batch_norm_impl_index(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_batch_norm_impl_index(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_batch_norm_impl_index(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor, Tensor, Tensor, int)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor,int64_t>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double, bool>(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> _batch_norm_impl_index_backward(int64_t impl_index, const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var_transform, bool train, double eps, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_batch_norm_impl_index_backward(impl_index, input, grad_output, weight, running_mean, running_var, save_mean, save_var_transform, train, eps, output_mask);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_batch_norm_impl_index_backward(int impl_index, Tensor input, Tensor grad_output, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var_transform, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor>, int64_t, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, std::array<bool,3>>(impl_index, input, grad_output, weight, running_mean, running_var, save_mean, save_var_transform, train, eps, output_mask);\n#endif\n}\n", "static inline Tensor bernoulli(const Tensor & self, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::bernoulli(self, generator);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::bernoulli\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, generator);\n#endif\n}\n", "static inline Tensor & bernoulli_out(Tensor & out, const Tensor & self, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::bernoulli_out(out, self, generator);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::bernoulli.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Generator *>(out, self, generator);\n#endif\n}\n", "static inline Tensor bernoulli(const Tensor & self, double p, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::bernoulli(self, p, generator);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::bernoulli\", \"p\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, double, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, p, generator);\n#endif\n}\n", "static inline Tensor bilinear(const Tensor & input1, const Tensor & input2, const Tensor & weight, const Tensor & bias) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::bilinear(input1, input2, weight, bias);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::bilinear(Tensor input1, Tensor input2, Tensor weight, Tensor? bias) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &>(input1, input2, weight, bias);\n#endif\n}\n", "static inline Tensor binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::binary_cross_entropy_with_logits(self, target, weight, pos_weight, reduction);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::binary_cross_entropy_with_logits(Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(self, target, weight, pos_weight, reduction);\n#endif\n}\n", "static inline Tensor binary_cross_entropy_with_logits_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::binary_cross_entropy_with_logits_backward(grad_output, self, target, weight, pos_weight, reduction);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::binary_cross_entropy_with_logits_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(grad_output, self, target, weight, pos_weight, reduction);\n#endif\n}\n", "static inline Tensor bincount(const Tensor & self, const Tensor & weights, int64_t minlength) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, weights)))) {\n        case Backend::CPU:\n            return CPUType::bincount(self, weights, minlength);\n            break;\n        default:\n            AT_ERROR(\"bincount not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, weights)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::bincount(Tensor self, Tensor? weights=None, int minlength=0) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t>(self, weights, minlength);\n#endif\n}\n", "static inline Tensor bitwise_not(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::bitwise_not(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::bitwise_not\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & bitwise_not_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::bitwise_not_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"bitwise_not_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::bitwise_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor logical_not(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::logical_not(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::logical_not\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & logical_not_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::logical_not_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"logical_not_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::logical_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor logical_xor(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::logical_xor(self, other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::logical_xor\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor & logical_xor_out(Tensor & out, const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, other)))) {\n        case Backend::CPU:\n            return CPUType::logical_xor_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"logical_xor_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, other)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::logical_xor.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, other);\n#endif\n}\n", "static inline Tensor blackman_window(int64_t window_length, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::blackman_window(window_length, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::blackman_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, const TensorOptions &>(window_length, options);\n#endif\n}\n", "static inline Tensor blackman_window(int64_t window_length, bool periodic, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::blackman_window(window_length, periodic, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::blackman_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, bool, const TensorOptions &>(window_length, periodic, options);\n#endif\n}\n", "static inline Tensor bmm(const Tensor & self, const Tensor & mat2) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mat2)))) {\n        case Backend::CPU:\n            return CPUType::bmm(self, mat2);\n            break;\n        default:\n            AT_ERROR(\"bmm not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, mat2)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::bmm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mat2)), self, mat2);\n#endif\n}\n", "static inline Tensor & bmm_out(Tensor & out, const Tensor & self, const Tensor & mat2) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, mat2)))) {\n        case Backend::CPU:\n            return CPUType::bmm_out(out, self, mat2);\n            break;\n        default:\n            AT_ERROR(\"bmm_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, mat2)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::bmm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, mat2);\n#endif\n}\n", "static inline std::vector<Tensor> broadcast_tensors(TensorList tensors) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::broadcast_tensors(tensors);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::broadcast_tensors\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::vector<Tensor>, TensorList>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(tensors)), tensors);\n#endif\n}\n", "static inline Tensor cat(TensorList tensors, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cat(tensors, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cat\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, TensorList, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(tensors)), tensors, dim);\n#endif\n}\n", "static inline Tensor & cat_out(Tensor & out, TensorList tensors, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cat_out(out, tensors, dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, TensorList, int64_t>(out, tensors, dim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor cat(TensorList tensors, Dimname dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cat(tensors, dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cat.names(Tensor[] tensors, Dimname dim) -> Tensor\");\n    return table->callUnboxed<Tensor, TensorList, Dimname>(tensors, dim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & cat_out(Tensor & out, TensorList tensors, Dimname dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cat_out(out, tensors, dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cat.names_out(Tensor[] tensors, Dimname dim, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, TensorList, Dimname>(out, tensors, dim);\n#endif\n}\n#endif", "static inline Tensor ceil(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::ceil(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::ceil\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & ceil_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::ceil_(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::ceil_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & ceil_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::ceil_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"ceil_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::ceil.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor chain_matmul(TensorList matrices) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::chain_matmul(matrices);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::chain_matmul\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, TensorList>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(matrices)), matrices);\n#endif\n}\n", "static inline std::vector<Tensor> chunk(const Tensor & self, int64_t chunks, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::chunk(self, chunks, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::chunk\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::vector<Tensor>, const Tensor &, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, chunks, dim);\n#endif\n}\n", "static inline Tensor clamp(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::clamp(self, min, max);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::clamp\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, min, max);\n#endif\n}\n", "static inline Tensor & clamp_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::clamp_(self, min, max);\n            break;\n        default:\n            AT_ERROR(\"clamp_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::clamp_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, c10::optional<Scalar>, c10::optional<Scalar>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, min, max);\n#endif\n}\n", "static inline Tensor & clamp_out(Tensor & out, const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::clamp_out(out, self, min, max);\n            break;\n        default:\n            AT_ERROR(\"clamp_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::clamp.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>>(out, self, min, max);\n#endif\n}\n", "static inline Tensor clamp_max(const Tensor & self, Scalar max) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::clamp_max(self, max);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::clamp_max\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, max);\n#endif\n}\n", "static inline Tensor & clamp_max_(Tensor & self, Scalar max) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::clamp_max_(self, max);\n            break;\n        default:\n            AT_ERROR(\"clamp_max_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::clamp_max_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, max);\n#endif\n}\n", "static inline Tensor & clamp_max_out(Tensor & out, const Tensor & self, Scalar max) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::clamp_max_out(out, self, max);\n            break;\n        default:\n            AT_ERROR(\"clamp_max_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::clamp_max.out(Tensor self, Scalar max, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar>(out, self, max);\n#endif\n}\n", "static inline Tensor clamp_min(const Tensor & self, Scalar min) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::clamp_min(self, min);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::clamp_min\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, min);\n#endif\n}\n", "static inline Tensor & clamp_min_(Tensor & self, Scalar min) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::clamp_min_(self, min);\n            break;\n        default:\n            AT_ERROR(\"clamp_min_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::clamp_min_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, min);\n#endif\n}\n", "static inline Tensor & clamp_min_out(Tensor & out, const Tensor & self, Scalar min) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::clamp_min_out(out, self, min);\n            break;\n        default:\n            AT_ERROR(\"clamp_min_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::clamp_min.out(Tensor self, Scalar min, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar>(out, self, min);\n#endif\n}\n", "static inline bool cudnn_is_acceptable(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cudnn_is_acceptable(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cudnn_is_acceptable\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor constant_pad_nd(const Tensor & self, IntArrayRef pad, Scalar value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::constant_pad_nd(self, pad, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::constant_pad_nd\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, pad, value);\n#endif\n}\n", "static inline Tensor convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::convolution(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t>(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);\n#endif\n}\n", "static inline Tensor convolution_overrideable(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::convolution_overrideable(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::convolution_overrideable(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t>(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> convolution_backward_overrideable(const Tensor & grad_output, const Tensor & input, const Tensor & weight, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::convolution_backward_overrideable(grad_output, input, weight, stride, padding, dilation, transposed, output_padding, groups, output_mask);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::convolution_backward_overrideable(Tensor grad_output, Tensor input, Tensor weight, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, std::array<bool,3>>(grad_output, input, weight, stride, padding, dilation, transposed, output_padding, groups, output_mask);\n#endif\n}\n", "static inline Tensor _convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_convolution(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool>(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled);\n#endif\n}\n", "static inline Tensor _convolution_nogroup(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_convolution_nogroup(input, weight, bias, stride, padding, dilation, transposed, output_padding);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_convolution_nogroup(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef>(input, weight, bias, stride, padding, dilation, transposed, output_padding);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> _convolution_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_convolution_double_backward(ggI, ggW, ggb, gO, weight, self, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, output_mask);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_convolution_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor weight, Tensor self, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool, std::array<bool,3>>(ggI, ggW, ggb, gO, weight, self, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, output_mask);\n#endif\n}\n", "static inline Tensor conv1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::conv1d(input, weight, bias, stride, padding, dilation, groups);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::conv1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] dilation=1, int groups=1) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(input, weight, bias, stride, padding, dilation, groups);\n#endif\n}\n", "static inline Tensor conv2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::conv2d(input, weight, bias, stride, padding, dilation, groups);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::conv2d(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, int groups=1) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(input, weight, bias, stride, padding, dilation, groups);\n#endif\n}\n", "static inline Tensor conv3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::conv3d(input, weight, bias, stride, padding, dilation, groups);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::conv3d(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1, int groups=1) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(input, weight, bias, stride, padding, dilation, groups);\n#endif\n}\n", "static inline Tensor conv_tbc(const Tensor & self, const Tensor & weight, const Tensor & bias, int64_t pad) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::conv_tbc(self, weight, bias, pad);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::conv_tbc\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)), self, weight, bias, pad);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> conv_tbc_backward(const Tensor & self, const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t pad) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::conv_tbc_backward(self, input, weight, bias, pad);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::conv_tbc_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, input, weight, bias)), self, input, weight, bias, pad);\n#endif\n}\n", "static inline Tensor conv_transpose1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::conv_transpose1d(input, weight, bias, stride, padding, output_padding, groups, dilation);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::conv_transpose1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] output_padding=0, int groups=1, int[1] dilation=1) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef>(input, weight, bias, stride, padding, output_padding, groups, dilation);\n#endif\n}\n", "static inline Tensor conv_transpose2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::conv_transpose2d(input, weight, bias, stride, padding, output_padding, groups, dilation);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::conv_transpose2d.input(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int groups=1, int[2] dilation=1) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef>(input, weight, bias, stride, padding, output_padding, groups, dilation);\n#endif\n}\n", "static inline Tensor conv_transpose3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::conv_transpose3d(input, weight, bias, stride, padding, output_padding, groups, dilation);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::conv_transpose3d.input(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int groups=1, int[3] dilation=1) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef>(input, weight, bias, stride, padding, output_padding, groups, dilation);\n#endif\n}\n", "static inline Tensor _copy_from(const Tensor & self, const Tensor & dst, bool non_blocking) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, dst)))) {\n    \n        default:\n            AT_ERROR(\"_copy_from not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, dst)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_copy_from\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, dst)), self, dst, non_blocking);\n#endif\n}\n", "static inline Tensor cos(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cos(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cos\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & cos_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::cos_(self);\n            break;\n        default:\n            AT_ERROR(\"cos_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cos_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & cos_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::cos_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"cos_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor cosh(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cosh(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cosh\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & cosh_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::cosh_(self);\n            break;\n        default:\n            AT_ERROR(\"cosh_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cosh_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & cosh_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::cosh_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"cosh_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor cosine_embedding_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cosine_embedding_loss(input1, input2, target, margin, reduction);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cosine_embedding_loss\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, double, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input1, input2, target)), input1, input2, target, margin, reduction);\n#endif\n}\n", "static inline Tensor cudnn_affine_grid_generator(const Tensor & theta, int64_t N, int64_t C, int64_t H, int64_t W) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(theta)))) {\n    \n        default:\n            AT_ERROR(\"cudnn_affine_grid_generator not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(theta)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cudnn_affine_grid_generator\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, int64_t, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(theta)), theta, N, C, H, W);\n#endif\n}\n", "static inline Tensor cudnn_affine_grid_generator_backward(const Tensor & grad, int64_t N, int64_t C, int64_t H, int64_t W) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad)))) {\n    \n        default:\n            AT_ERROR(\"cudnn_affine_grid_generator_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cudnn_affine_grid_generator_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, int64_t, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad)), grad, N, C, H, W);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, weight, bias, running_mean, running_var)))) {\n    \n        default:\n            AT_ERROR(\"cudnn_batch_norm not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input, weight, bias, running_mean, running_var)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cudnn_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double>(input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, grad_output, weight, running_mean, running_var, save_mean, save_var)))) {\n    \n        default:\n            AT_ERROR(\"cudnn_batch_norm_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input, grad_output, weight, running_mean, running_var, save_mean, save_var)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cudnn_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon) -> (Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, double>(input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon);\n#endif\n}\n", "static inline Tensor cudnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)))) {\n    \n        default:\n            AT_ERROR(\"cudnn_convolution not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cudnn_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic);\n#endif\n}\n", "static inline Tensor cudnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, weight)))) {\n    \n        default:\n            AT_ERROR(\"cudnn_convolution_backward_input not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, weight)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cudnn_convolution_backward_input\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, weight)), self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> cudnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, grad_output, weight)))) {\n    \n        default:\n            AT_ERROR(\"cudnn_convolution_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, grad_output, weight)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cudnn_convolution_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, grad_output, weight)), self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask);\n#endif\n}\n", "static inline Tensor cudnn_convolution_backward_bias(const Tensor & grad_output) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)))) {\n    \n        default:\n            AT_ERROR(\"cudnn_convolution_backward_bias not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cudnn_convolution_backward_bias\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)), grad_output);\n#endif\n}\n", "static inline Tensor cudnn_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)))) {\n    \n        default:\n            AT_ERROR(\"cudnn_convolution_backward_weight not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cudnn_convolution_backward_weight\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);\n#endif\n}\n", "static inline Tensor cudnn_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)))) {\n    \n        default:\n            AT_ERROR(\"cudnn_convolution_transpose not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cudnn_convolution_transpose(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> cudnn_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, grad_output, weight)))) {\n    \n        default:\n            AT_ERROR(\"cudnn_convolution_transpose_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, grad_output, weight)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cudnn_convolution_transpose_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, grad_output, weight)), self, grad_output, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, output_mask);\n#endif\n}\n", "static inline Tensor cudnn_convolution_transpose_backward_bias(const Tensor & grad_output) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)))) {\n    \n        default:\n            AT_ERROR(\"cudnn_convolution_transpose_backward_bias not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cudnn_convolution_transpose_backward_bias\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)), grad_output);\n#endif\n}\n", "static inline Tensor cudnn_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, weight)))) {\n    \n        default:\n            AT_ERROR(\"cudnn_convolution_transpose_backward_input not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, weight)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cudnn_convolution_transpose_backward_input\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, weight)), grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);\n#endif\n}\n", "static inline Tensor cudnn_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)))) {\n    \n        default:\n            AT_ERROR(\"cudnn_convolution_transpose_backward_weight not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cudnn_convolution_transpose_backward_weight\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);\n#endif\n}\n", "static inline Tensor cudnn_grid_sampler(const Tensor & self, const Tensor & grid) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, grid)))) {\n    \n        default:\n            AT_ERROR(\"cudnn_grid_sampler not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, grid)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cudnn_grid_sampler\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, grid)), self, grid);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> cudnn_grid_sampler_backward(const Tensor & self, const Tensor & grid, const Tensor & grad_output) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, grid, grad_output)))) {\n    \n        default:\n            AT_ERROR(\"cudnn_grid_sampler_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, grid, grad_output)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cudnn_grid_sampler_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, grid, grad_output)), self, grid, grad_output);\n#endif\n}\n", "static inline Tensor cumsum(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cumsum(self, dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cumsum(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(self, dim, dtype);\n#endif\n}\n", "static inline Tensor & cumsum_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cumsum_out(out, self, dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cumsum.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>>(out, self, dim, dtype);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor cumsum(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cumsum(self, dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cumsum.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(self, dim, dtype);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & cumsum_out(Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cumsum_out(out, self, dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cumsum.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Dimname, c10::optional<ScalarType>>(out, self, dim, dtype);\n#endif\n}\n#endif", "static inline Tensor cumprod(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cumprod(self, dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cumprod(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(self, dim, dtype);\n#endif\n}\n", "static inline Tensor & cumprod_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cumprod_out(out, self, dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cumprod.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>>(out, self, dim, dtype);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor cumprod(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cumprod(self, dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cumprod.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(self, dim, dtype);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & cumprod_out(Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cumprod_out(out, self, dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cumprod.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Dimname, c10::optional<ScalarType>>(out, self, dim, dtype);\n#endif\n}\n#endif", "static inline Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::ctc_loss(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::ctc_loss\", \"IntList\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(log_probs, targets)), log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);\n#endif\n}\n", "static inline Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, const Tensor & input_lengths, const Tensor & target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::ctc_loss(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::ctc_loss\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(log_probs, targets, input_lengths, target_lengths)), log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> _ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool zero_infinity) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(log_probs, targets)))) {\n        case Backend::CPU:\n            return CPUType::_ctc_loss(log_probs, targets, input_lengths, target_lengths, blank, zero_infinity);\n            break;\n        default:\n            AT_ERROR(\"_ctc_loss not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(log_probs, targets)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_ctc_loss\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(log_probs, targets)), log_probs, targets, input_lengths, target_lengths, blank, zero_infinity);\n#endif\n}\n", "static inline Tensor _ctc_loss_backward(const Tensor & grad, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, const Tensor & neg_log_likelihood, const Tensor & log_alpha, int64_t blank, bool zero_infinity) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, log_probs, targets, neg_log_likelihood, log_alpha)))) {\n        case Backend::CPU:\n            return CPUType::_ctc_loss_backward(grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity);\n            break;\n        default:\n            AT_ERROR(\"_ctc_loss_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad, log_probs, targets, neg_log_likelihood, log_alpha)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_ctc_loss_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, log_probs, targets, neg_log_likelihood, log_alpha)), grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity);\n#endif\n}\n", "static inline Tensor det(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::det(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::det\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor diag_embed(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::diag_embed(self, offset, dim1, dim2);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::diag_embed\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, offset, dim1, dim2);\n#endif\n}\n", "static inline Tensor diagflat(const Tensor & self, int64_t offset) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::diagflat(self, offset);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::diagflat\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, offset);\n#endif\n}\n", "static inline Tensor diagonal(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::diagonal(self, offset, dim1, dim2);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::diagonal\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, offset, dim1, dim2);\n#endif\n}\n", "static inline Tensor div(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::div(self, other);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::div(self, other);\n            break;\n        default:\n            AT_ERROR(\"div not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::div\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor & div_out(Tensor & out, const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, other)))) {\n        case Backend::CPU:\n            return CPUType::div_out(out, self, other);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::div_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"div_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, other)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::div.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, other);\n#endif\n}\n", "static inline Tensor div(const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::div(self, other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::div\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, other);\n#endif\n}\n", "static inline Tensor dot(const Tensor & self, const Tensor & tensor) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, tensor)))) {\n        case Backend::CPU:\n            return CPUType::dot(self, tensor);\n            break;\n        default:\n            AT_ERROR(\"dot not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, tensor)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::dot\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, tensor)), self, tensor);\n#endif\n}\n", "static inline Tensor & dot_out(Tensor & out, const Tensor & self, const Tensor & tensor) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::dot_out(out, self, tensor);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::dot.out(Tensor self, Tensor tensor, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, tensor);\n#endif\n}\n", "static inline Tensor einsum(std::string equation, TensorList tensors) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::einsum(equation, tensors);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::einsum\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, std::string, TensorList>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(tensors)), equation, tensors);\n#endif\n}\n", "static inline Tensor embedding(const Tensor & weight, const Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::embedding(weight, indices, padding_idx, scale_grad_by_freq, sparse);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::embedding\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(weight, indices)), weight, indices, padding_idx, scale_grad_by_freq, sparse);\n#endif\n}\n", "static inline Tensor embedding_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::embedding_backward(grad, indices, num_weights, padding_idx, scale_grad_by_freq, sparse);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::embedding_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, indices)), grad, indices, num_weights, padding_idx, scale_grad_by_freq, sparse);\n#endif\n}\n", "static inline Tensor embedding_dense_backward(const Tensor & grad_output, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, indices)))) {\n        case Backend::CPU:\n            return CPUType::embedding_dense_backward(grad_output, indices, num_weights, padding_idx, scale_grad_by_freq);\n            break;\n        default:\n            AT_ERROR(\"embedding_dense_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, indices)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::embedding_dense_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, indices)), grad_output, indices, num_weights, padding_idx, scale_grad_by_freq);\n#endif\n}\n", "static inline Tensor & embedding_renorm_(Tensor & self, const Tensor & indices, double max_norm, double norm_type) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, indices)))) {\n        case Backend::CPU:\n            return CPUType::embedding_renorm_(self, indices, max_norm, norm_type);\n            break;\n        default:\n            AT_ERROR(\"embedding_renorm_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, indices)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::embedding_renorm_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, double, double>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, indices)), self, indices, max_norm, norm_type);\n#endif\n}\n", "static inline Tensor embedding_sparse_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::embedding_sparse_backward(grad, indices, num_weights, padding_idx, scale_grad_by_freq);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::embedding_sparse_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, indices)), grad, indices, num_weights, padding_idx, scale_grad_by_freq);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor,Tensor> embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::embedding_bag(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None) -> (Tensor, Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const Tensor &>(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(weight, indices, offsets, per_sample_weights)))) {\n        case Backend::CPU:\n            return CPUType::_embedding_bag(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights);\n            break;\n        default:\n            AT_ERROR(\"_embedding_bag not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(weight, indices, offsets, per_sample_weights)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None) -> (Tensor, Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const Tensor &>(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights);\n#endif\n}\n", "static inline Tensor _embedding_bag_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_embedding_bag_backward(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, sparse, per_sample_weights);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, bool, const Tensor &>(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, sparse, per_sample_weights);\n#endif\n}\n", "static inline Tensor _embedding_bag_sparse_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_embedding_bag_sparse_backward(grad, indices, offsets, offset2bag, bag_size, num_weights, scale_grad_by_freq, mode, per_sample_weights);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_embedding_bag_sparse_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, const Tensor &>(grad, indices, offsets, offset2bag, bag_size, num_weights, scale_grad_by_freq, mode, per_sample_weights);\n#endif\n}\n", "static inline Tensor _embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, indices, offsets, offset2bag, bag_size, maximum_indices, per_sample_weights)))) {\n        case Backend::CPU:\n            return CPUType::_embedding_bag_dense_backward(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, per_sample_weights);\n            break;\n        default:\n            AT_ERROR(\"_embedding_bag_dense_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad, indices, offsets, offset2bag, bag_size, maximum_indices, per_sample_weights)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_embedding_bag_dense_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, const Tensor &>(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, per_sample_weights);\n#endif\n}\n", "static inline Tensor _embedding_bag_per_sample_weights_backward(const Tensor & grad, const Tensor & weight, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, int64_t mode) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, weight, indices, offsets, offset2bag)))) {\n        case Backend::CPU:\n            return CPUType::_embedding_bag_per_sample_weights_backward(grad, weight, indices, offsets, offset2bag, mode);\n            break;\n        default:\n            AT_ERROR(\"_embedding_bag_per_sample_weights_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad, weight, indices, offsets, offset2bag)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_embedding_bag_per_sample_weights_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, weight, indices, offsets, offset2bag)), grad, weight, indices, offsets, offset2bag, mode);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor empty(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::empty(size, names, options, memory_format);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::empty.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, c10::optional<DimnameList>, const TensorOptions &, c10::optional<MemoryFormat>>(size, names, options, memory_format);\n#endif\n}\n#endif", "static inline Tensor empty(IntArrayRef size, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(options)))) {\n        case Backend::CPU:\n            return CPUType::empty(size, options, memory_format);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::empty(size, options, memory_format);\n            break;\n        default:\n            AT_ERROR(\"empty not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(options)));\n    }\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::empty.memory_format(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, const TensorOptions &, c10::optional<MemoryFormat>>(size, options, memory_format);\n#endif\n}\n", "static inline Tensor _empty_affine_quantized(IntArrayRef size, const TensorOptions & options, double scale, int64_t zero_point, c10::optional<MemoryFormat> memory_format) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(options)))) {\n        case Backend::CPU:\n            return CPUType::_empty_affine_quantized(size, options, scale, zero_point, memory_format);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::_empty_affine_quantized(size, options, scale, zero_point, memory_format);\n            break;\n        default:\n            AT_ERROR(\"_empty_affine_quantized not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(options)));\n    }\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::_empty_affine_quantized(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, float scale=1, int zero_point=0, MemoryFormat? memory_format=contiguous_format) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, const TensorOptions &, double, int64_t, c10::optional<MemoryFormat>>(size, options, scale, zero_point, memory_format);\n#endif\n}\n", "static inline Tensor _empty_per_channel_affine_quantized(IntArrayRef size, const Tensor & scales, const Tensor & zero_points, int64_t axis, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(scales, zero_points, options)))) {\n        case Backend::CPU:\n            return CPUType::_empty_per_channel_affine_quantized(size, scales, zero_points, axis, options, memory_format);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::_empty_per_channel_affine_quantized(size, scales, zero_points, axis, options, memory_format);\n            break;\n        default:\n            AT_ERROR(\"_empty_per_channel_affine_quantized not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(scales, zero_points, options)));\n    }\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(scales, zero_points, options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::_empty_per_channel_affine_quantized(int[] size, *, Tensor scales, Tensor zero_points, int axis, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=contiguous_format) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, const Tensor &, const Tensor &, int64_t, const TensorOptions &, c10::optional<MemoryFormat>>(size, scales, zero_points, axis, options, memory_format);\n#endif\n}\n", "static inline Tensor & empty_out(Tensor & out, IntArrayRef size, c10::optional<MemoryFormat> memory_format) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::empty_out(out, size, memory_format);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::empty.out(int[] size, *, MemoryFormat? memory_format=None, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, IntArrayRef, c10::optional<MemoryFormat>>(out, size, memory_format);\n#endif\n}\n", "static inline Tensor empty_like(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::empty_like(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::empty_like\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor empty_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::empty_like(self, options, memory_format);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(self, options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::empty_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, MemoryFormat? memory_format=contiguous_format) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const TensorOptions &, c10::optional<MemoryFormat>>(self, options, memory_format);\n#endif\n}\n", "static inline Tensor empty_strided(IntArrayRef size, IntArrayRef stride, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(options)))) {\n        case Backend::CPU:\n            return CPUType::empty_strided(size, stride, options);\n            break;\n        default:\n            AT_ERROR(\"empty_strided not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(options)));\n    }\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::empty_strided(int[] size, int[] stride, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, IntArrayRef, const TensorOptions &>(size, stride, options);\n#endif\n}\n", "static inline Tensor erf(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::erf(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::erf\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & erf_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::erf_(self);\n            break;\n        default:\n            AT_ERROR(\"erf_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::erf_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & erf_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::erf_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"erf_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::erf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor erfc(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::erfc(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::erfc\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & erfc_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::erfc_(self);\n            break;\n        default:\n            AT_ERROR(\"erfc_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::erfc_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & erfc_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::erfc_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"erfc_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::erfc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor exp(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::exp(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::exp\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & exp_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::exp_(self);\n            break;\n        default:\n            AT_ERROR(\"exp_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::exp_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & exp_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::exp_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"exp_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::exp.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor expm1(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::expm1(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::expm1\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & expm1_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::expm1_(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::expm1_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & expm1_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::expm1_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"expm1_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::expm1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor eye(int64_t n, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::eye(n, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::eye(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, const TensorOptions &>(n, options);\n#endif\n}\n", "static inline Tensor eye(int64_t n, int64_t m, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::eye(n, m, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::eye.m(int n, int m, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, int64_t, const TensorOptions &>(n, m, options);\n#endif\n}\n", "static inline Tensor & eye_out(Tensor & out, int64_t n) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out)))) {\n        case Backend::CPU:\n            return CPUType::eye_out(out, n);\n            break;\n        default:\n            AT_ERROR(\"eye_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::eye.out(int n, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, int64_t>(out, n);\n#endif\n}\n", "static inline Tensor & eye_out(Tensor & out, int64_t n, int64_t m) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out)))) {\n        case Backend::CPU:\n            return CPUType::eye_out(out, n, m);\n            break;\n        default:\n            AT_ERROR(\"eye_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::eye.m_out(int n, int m, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, int64_t, int64_t>(out, n, m);\n#endif\n}\n", "static inline Tensor flatten(const Tensor & self, int64_t start_dim, int64_t end_dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::flatten(self, start_dim, end_dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::flatten\", \"using_ints\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, start_dim, end_dim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor flatten(const Tensor & self, int64_t start_dim, int64_t end_dim, Dimname out_dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::flatten(self, start_dim, end_dim, out_dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::flatten.named_out_dim(Tensor self, int start_dim, int end_dim, Dimname out_dim) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, int64_t, int64_t, Dimname>(self, start_dim, end_dim, out_dim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor flatten(const Tensor & self, Dimname start_dim, Dimname end_dim, Dimname out_dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::flatten(self, start_dim, end_dim, out_dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::flatten.using_names(Tensor self, Dimname start_dim, Dimname end_dim, Dimname out_dim) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, Dimname, Dimname>(self, start_dim, end_dim, out_dim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor flatten(const Tensor & self, DimnameList dims, Dimname out_dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::flatten(self, dims, out_dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::flatten.DimnameList(Tensor self, DimnameList dims, Dimname out_dim) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, DimnameList, Dimname>(self, dims, out_dim);\n#endif\n}\n#endif", "static inline Tensor & fill_(Tensor & self, Scalar value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::fill_(self, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fill_\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, value);\n#endif\n}\n", "static inline Tensor & fill_(Tensor & self, const Tensor & value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::fill_(self, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fill_\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, value)), self, value);\n#endif\n}\n", "static inline Tensor floor(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::floor(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::floor\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & floor_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::floor_(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::floor_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & floor_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::floor_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"floor_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::floor.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor frac(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::frac(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::frac\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & frac_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::frac_(self);\n            break;\n        default:\n            AT_ERROR(\"frac_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::frac_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & frac_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::frac_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"frac_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::frac.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor full(IntArrayRef size, Scalar fill_value, c10::optional<DimnameList> names, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::full(size, fill_value, names, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::full.names(int[] size, Scalar fill_value, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, Scalar, c10::optional<DimnameList>, const TensorOptions &>(size, fill_value, names, options);\n#endif\n}\n#endif", "static inline Tensor full(IntArrayRef size, Scalar fill_value, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::full(size, fill_value, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::full(int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, Scalar, const TensorOptions &>(size, fill_value, options);\n#endif\n}\n", "static inline Tensor & full_out(Tensor & out, IntArrayRef size, Scalar fill_value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::full_out(out, size, fill_value);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::full.out(int[] size, Scalar fill_value, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, IntArrayRef, Scalar>(out, size, fill_value);\n#endif\n}\n", "static inline Tensor full_like(const Tensor & self, Scalar fill_value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::full_like(self, fill_value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::full_like\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, fill_value);\n#endif\n}\n", "static inline Tensor full_like(const Tensor & self, Scalar fill_value, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::full_like(self, fill_value, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(self, options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::full_like.dtype(Tensor self, Scalar fill_value, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Scalar, const TensorOptions &>(self, fill_value, options);\n#endif\n}\n", "static inline Tensor from_file(std::string filename, c10::optional<bool> shared, c10::optional<int64_t> size, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(options)))) {\n        case Backend::CPU:\n            return CPUType::from_file(filename, shared, size, options);\n            break;\n        default:\n            AT_ERROR(\"from_file not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(options)));\n    }\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::from_file(str filename, bool? shared=None, int? size=0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, std::string, c10::optional<bool>, c10::optional<int64_t>, const TensorOptions &>(filename, shared, size, options);\n#endif\n}\n", "static inline Tensor grid_sampler(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::grid_sampler(input, grid, interpolation_mode, padding_mode, align_corners);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::grid_sampler\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, grid)), input, grid, interpolation_mode, padding_mode, align_corners);\n#endif\n}\n", "static inline Tensor grid_sampler_2d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, grid)))) {\n        case Backend::CPU:\n            return CPUType::grid_sampler_2d(input, grid, interpolation_mode, padding_mode, align_corners);\n            break;\n        default:\n            AT_ERROR(\"grid_sampler_2d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input, grid)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::grid_sampler_2d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, grid)), input, grid, interpolation_mode, padding_mode, align_corners);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> grid_sampler_2d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, input, grid)))) {\n        case Backend::CPU:\n            return CPUType::grid_sampler_2d_backward(grad_output, input, grid, interpolation_mode, padding_mode, align_corners);\n            break;\n        default:\n            AT_ERROR(\"grid_sampler_2d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, input, grid)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::grid_sampler_2d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, input, grid)), grad_output, input, grid, interpolation_mode, padding_mode, align_corners);\n#endif\n}\n", "static inline Tensor grid_sampler_3d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, grid)))) {\n        case Backend::CPU:\n            return CPUType::grid_sampler_3d(input, grid, interpolation_mode, padding_mode, align_corners);\n            break;\n        default:\n            AT_ERROR(\"grid_sampler_3d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input, grid)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::grid_sampler_3d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, grid)), input, grid, interpolation_mode, padding_mode, align_corners);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> grid_sampler_3d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, input, grid)))) {\n        case Backend::CPU:\n            return CPUType::grid_sampler_3d_backward(grad_output, input, grid, interpolation_mode, padding_mode, align_corners);\n            break;\n        default:\n            AT_ERROR(\"grid_sampler_3d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, input, grid)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::grid_sampler_3d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, input, grid)), grad_output, input, grid, interpolation_mode, padding_mode, align_corners);\n#endif\n}\n", "static inline Tensor hann_window(int64_t window_length, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::hann_window(window_length, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::hann_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, const TensorOptions &>(window_length, options);\n#endif\n}\n", "static inline Tensor hann_window(int64_t window_length, bool periodic, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::hann_window(window_length, periodic, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::hann_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, bool, const TensorOptions &>(window_length, periodic, options);\n#endif\n}\n", "static inline Tensor hamming_window(int64_t window_length, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::hamming_window(window_length, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::hamming_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, const TensorOptions &>(window_length, options);\n#endif\n}\n", "static inline Tensor hamming_window(int64_t window_length, bool periodic, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::hamming_window(window_length, periodic, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::hamming_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, bool, const TensorOptions &>(window_length, periodic, options);\n#endif\n}\n", "static inline Tensor hamming_window(int64_t window_length, bool periodic, double alpha, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::hamming_window(window_length, periodic, alpha, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::hamming_window.periodic_alpha(int window_length, bool periodic, float alpha, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, bool, double, const TensorOptions &>(window_length, periodic, alpha, options);\n#endif\n}\n", "static inline Tensor hamming_window(int64_t window_length, bool periodic, double alpha, double beta, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::hamming_window(window_length, periodic, alpha, beta, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::hamming_window.periodic_alpha_beta(int window_length, bool periodic, float alpha, float beta, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, bool, double, double, const TensorOptions &>(window_length, periodic, alpha, beta, options);\n#endif\n}\n", "static inline Tensor hinge_embedding_loss(const Tensor & self, const Tensor & target, double margin, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::hinge_embedding_loss(self, target, margin, reduction);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::hinge_embedding_loss\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, double, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, target)), self, target, margin, reduction);\n#endif\n}\n", "static inline Tensor ger(const Tensor & self, const Tensor & vec2) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, vec2)))) {\n        case Backend::CPU:\n            return CPUType::ger(self, vec2);\n            break;\n        default:\n            AT_ERROR(\"ger not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, vec2)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::ger\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, vec2)), self, vec2);\n#endif\n}\n", "static inline Tensor & ger_out(Tensor & out, const Tensor & self, const Tensor & vec2) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, vec2)))) {\n        case Backend::CPU:\n            return CPUType::ger_out(out, self, vec2);\n            break;\n        default:\n            AT_ERROR(\"ger_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, vec2)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::ger.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, vec2);\n#endif\n}\n", "static inline Tensor group_norm(const Tensor & input, int64_t num_groups, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enabled) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::group_norm(input, num_groups, weight, bias, eps, cudnn_enabled);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::group_norm(Tensor input, int num_groups, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enabled=True) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &, double, bool>(input, num_groups, weight, bias, eps, cudnn_enabled);\n#endif\n}\n", "static inline Tensor fft(const Tensor & self, int64_t signal_ndim, bool normalized) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::fft(self, signal_ndim, normalized);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fft\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, signal_ndim, normalized);\n#endif\n}\n", "static inline Tensor ifft(const Tensor & self, int64_t signal_ndim, bool normalized) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::ifft(self, signal_ndim, normalized);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::ifft\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, signal_ndim, normalized);\n#endif\n}\n", "static inline Tensor rfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rfft(self, signal_ndim, normalized, onesided);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::rfft\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, signal_ndim, normalized, onesided);\n#endif\n}\n", "static inline Tensor irfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided, IntArrayRef signal_sizes) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::irfft(self, signal_ndim, normalized, onesided, signal_sizes);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::irfft\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, bool, bool, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, signal_ndim, normalized, onesided, signal_sizes);\n#endif\n}\n", "static inline Tensor _fft_with_size(const Tensor & self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, IntArrayRef checked_signal_sizes, bool normalized, bool onesided, IntArrayRef output_sizes) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_fft_with_size(self, signal_ndim, complex_input, complex_output, inverse, checked_signal_sizes, normalized, onesided, output_sizes);\n            break;\n        default:\n            AT_ERROR(\"_fft_with_size not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_fft_with_size\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, bool, bool, bool, IntArrayRef, bool, bool, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, signal_ndim, complex_input, complex_output, inverse, checked_signal_sizes, normalized, onesided, output_sizes);\n#endif\n}\n", "static inline int64_t _cufft_get_plan_cache_size(int64_t device_index) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_cufft_get_plan_cache_size(device_index);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_cufft_get_plan_cache_size\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set()), device_index);\n#endif\n}\n", "static inline int64_t _cufft_get_plan_cache_max_size(int64_t device_index) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_cufft_get_plan_cache_max_size(device_index);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_cufft_get_plan_cache_max_size\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set()), device_index);\n#endif\n}\n", "static inline void _cufft_set_plan_cache_max_size(int64_t device_index, int64_t max_size) {\n#ifdef USE_STATIC_DISPATCH\n     TypeDefault::_cufft_set_plan_cache_max_size(device_index, max_size);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_cufft_set_plan_cache_max_size(int device_index, int max_size) -> void\");\n    return table->callUnboxed<void, int64_t, int64_t>(device_index, max_size);\n#endif\n}\n", "static inline void _cufft_clear_plan_cache(int64_t device_index) {\n#ifdef USE_STATIC_DISPATCH\n     TypeDefault::_cufft_clear_plan_cache(device_index);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_cufft_clear_plan_cache(int device_index) -> void\");\n    return table->callUnboxed<void, int64_t>(device_index);\n#endif\n}\n", "static inline Tensor index(const Tensor & self, TensorList indices) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index(self, indices);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index.Tensor(Tensor self, Tensor?[] indices) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, TensorList>(self, indices);\n#endif\n}\n", "static inline Tensor index_copy(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_copy(self, dim, index, source);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::index_copy\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, index, source)), self, dim, index, source);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor index_copy(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_copy(self, dim, index, source);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_copy.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(self, dim, index, source);\n#endif\n}\n#endif", "static inline Tensor & index_put_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_put_(self, indices, values, accumulate);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_put_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, TensorList, const Tensor &, bool>(self, indices, values, accumulate);\n#endif\n}\n", "static inline Tensor index_put(const Tensor & self, TensorList indices, const Tensor & values, bool accumulate) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_put(self, indices, values, accumulate);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_put(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, TensorList, const Tensor &, bool>(self, indices, values, accumulate);\n#endif\n}\n", "static inline Tensor & _index_put_impl_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate, bool unsafe) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_index_put_impl_(self, indices, values, accumulate, unsafe);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_index_put_impl_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, TensorList, const Tensor &, bool, bool>(self, indices, values, accumulate, unsafe);\n#endif\n}\n", "static inline Tensor instance_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::instance_norm(input, weight, bias, running_mean, running_var, use_input_stats, momentum, eps, cudnn_enabled);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::instance_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool use_input_stats, float momentum, float eps, bool cudnn_enabled) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double, bool>(input, weight, bias, running_mean, running_var, use_input_stats, momentum, eps, cudnn_enabled);\n#endif\n}\n", "static inline Tensor inverse(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::inverse(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::inverse\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & inverse_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::inverse_out(out, self);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::inverse.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor _inverse_helper(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_inverse_helper(self);\n            break;\n        default:\n            AT_ERROR(\"_inverse_helper not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_inverse_helper\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor isclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::isclose(self, other, rtol, atol, equal_nan);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::isclose\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, double, double, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other, rtol, atol, equal_nan);\n#endif\n}\n", "static inline Tensor isnan(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::isnan(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::isnan\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline bool is_distributed(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::is_distributed(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::is_distributed\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline bool is_floating_point(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::is_floating_point(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::is_floating_point\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline bool is_complex(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::is_complex(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::is_complex\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline bool is_nonzero(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::is_nonzero(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::is_nonzero\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline bool is_same_size(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::is_same_size(self, other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::is_same_size\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline bool is_signed(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::is_signed(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::is_signed\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor kl_div(const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::kl_div(self, target, reduction);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::kl_div\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, target)), self, target, reduction);\n#endif\n}\n", "static inline Tensor kl_div_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target)))) {\n        case Backend::CPU:\n            return CPUType::kl_div_backward(grad_output, self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"kl_div_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::kl_div_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target)), grad_output, self, target, reduction);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::kthvalue(self, k, dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::kthvalue\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, k, dim, keepdim);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(values, indices, self)))) {\n        case Backend::CPU:\n            return CPUType::kthvalue_out(values, indices, self, k, dim, keepdim);\n            break;\n        default:\n            AT_ERROR(\"kthvalue_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(values, indices, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::kthvalue.values(Tensor self, int k, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, int64_t, int64_t, bool>(values, indices, self, k, dim, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, Dimname dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::kthvalue(self, k, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::kthvalue.dimname(Tensor self, int k, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, Dimname, bool>(self, k, dim, keepdim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor &,Tensor &> kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, Dimname dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::kthvalue_out(values, indices, self, k, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::kthvalue.dimname_out(Tensor self, int k, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, int64_t, Dimname, bool>(values, indices, self, k, dim, keepdim);\n#endif\n}\n#endif", "static inline Tensor layer_norm(const Tensor & input, IntArrayRef normalized_shape, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enable) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::layer_norm(input, normalized_shape, weight, bias, eps, cudnn_enable);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::layer_norm(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enable=True) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, IntArrayRef, const Tensor &, const Tensor &, double, bool>(input, normalized_shape, weight, bias, eps, cudnn_enable);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> native_layer_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t M, int64_t N, double eps) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, weight, bias)))) {\n        case Backend::CPU:\n            return CPUType::native_layer_norm(input, weight, bias, M, N, eps);\n            break;\n        default:\n            AT_ERROR(\"native_layer_norm not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::native_layer_norm(Tensor input, Tensor? weight, Tensor? bias, int M, int N, float eps) -> (Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, double>(input, weight, bias, M, N, eps);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> native_layer_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & rstd, const Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_out, input, mean, rstd, weight)))) {\n        case Backend::CPU:\n            return CPUType::native_layer_norm_backward(grad_out, input, mean, rstd, weight, M, N, output_mask);\n            break;\n        default:\n            AT_ERROR(\"native_layer_norm_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_out, input, mean, rstd, weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::native_layer_norm_backward(Tensor grad_out, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int M, int N, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, std::array<bool,3>>(grad_out, input, mean, rstd, weight, M, N, output_mask);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> native_layer_norm_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & input, const Tensor & mean, const Tensor & rstd, const Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(ggI, ggW, ggb, gO, input, mean, rstd, weight)))) {\n        case Backend::CPU:\n            return CPUType::native_layer_norm_double_backward(ggI, ggW, ggb, gO, input, mean, rstd, weight, M, N, output_mask);\n            break;\n        default:\n            AT_ERROR(\"native_layer_norm_double_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(ggI, ggW, ggb, gO, input, mean, rstd, weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::native_layer_norm_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int M, int N, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, std::array<bool,3>>(ggI, ggW, ggb, gO, input, mean, rstd, weight, M, N, output_mask);\n#endif\n}\n", "static inline Tensor linear(const Tensor & input, const Tensor & weight, const Tensor & bias) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::linear(input, weight, bias);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(input, weight, bias);\n#endif\n}\n", "static inline Tensor mkldnn_linear(const Tensor & input, const Tensor & weight, const Tensor & bias) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, weight, bias)))) {\n    \n        default:\n            AT_ERROR(\"mkldnn_linear not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mkldnn_linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(input, weight, bias);\n#endif\n}\n", "static inline Tensor fbgemm_linear_int8_weight_fp32_activation(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::fbgemm_linear_int8_weight_fp32_activation(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fbgemm_linear_int8_weight_fp32_activation\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, weight, packed, col_offsets, bias)), input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);\n#endif\n}\n", "static inline Tensor fbgemm_linear_int8_weight(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::fbgemm_linear_int8_weight(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fbgemm_linear_int8_weight\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, weight, packed, col_offsets, bias)), input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,double,int64_t> fbgemm_linear_quantize_weight(const Tensor & input) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::fbgemm_linear_quantize_weight(input);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fbgemm_linear_quantize_weight\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,double,int64_t>, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input)), input);\n#endif\n}\n", "static inline Tensor fbgemm_pack_gemm_matrix_fp16(const Tensor & input) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::fbgemm_pack_gemm_matrix_fp16(input);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fbgemm_pack_gemm_matrix_fp16\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input)), input);\n#endif\n}\n", "static inline Tensor fbgemm_linear_fp16_weight_fp32_activation(const Tensor & input, const Tensor & packed_weight, const Tensor & bias) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::fbgemm_linear_fp16_weight_fp32_activation(input, packed_weight, bias);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fbgemm_linear_fp16_weight_fp32_activation\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, packed_weight, bias)), input, packed_weight, bias);\n#endif\n}\n", "static inline Tensor fbgemm_linear_fp16_weight(const Tensor & input, const Tensor & packed_weight, const Tensor & bias) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::fbgemm_linear_fp16_weight(input, packed_weight, bias);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fbgemm_linear_fp16_weight\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, packed_weight, bias)), input, packed_weight, bias);\n#endif\n}\n", "static inline Tensor fbgemm_pack_quantized_matrix(const Tensor & input) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::fbgemm_pack_quantized_matrix(input);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fbgemm_pack_quantized_matrix\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input)), input);\n#endif\n}\n", "static inline Tensor fbgemm_pack_quantized_matrix(const Tensor & input, int64_t K, int64_t N) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::fbgemm_pack_quantized_matrix(input, K, N);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fbgemm_pack_quantized_matrix\", \"KN\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input)), input, K, N);\n#endif\n}\n", "static inline Tensor linspace(Scalar start, Scalar end, int64_t steps, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::linspace(start, end, steps, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::linspace(Scalar start, Scalar end, int steps=100, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, Scalar, Scalar, int64_t, const TensorOptions &>(start, end, steps, options);\n#endif\n}\n", "static inline Tensor & linspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out)))) {\n        case Backend::CPU:\n            return CPUType::linspace_out(out, start, end, steps);\n            break;\n        default:\n            AT_ERROR(\"linspace_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::linspace.out(Scalar start, Scalar end, int steps=100, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, Scalar, Scalar, int64_t>(out, start, end, steps);\n#endif\n}\n", "static inline Tensor log(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::log(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::log\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & log_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::log_(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::log_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & log_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::log_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"log_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::log.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor log10(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::log10(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::log10\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & log10_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::log10_(self);\n            break;\n        default:\n            AT_ERROR(\"log10_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::log10_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & log10_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::log10_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"log10_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::log10.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor log1p(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::log1p(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::log1p\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & log1p_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::log1p_(self);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::log1p_(self);\n            break;\n        default:\n            AT_ERROR(\"log1p_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::log1p_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & log1p_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::log1p_out(out, self);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::log1p_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"log1p_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::log1p.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor log2(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::log2(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::log2\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & log2_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::log2_(self);\n            break;\n        default:\n            AT_ERROR(\"log2_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::log2_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & log2_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::log2_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"log2_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::log2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor logdet(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::logdet(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::logdet\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor logspace(Scalar start, Scalar end, int64_t steps, double base, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::logspace(start, end, steps, base, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::logspace(Scalar start, Scalar end, int steps=100, float base=10.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, Scalar, Scalar, int64_t, double, const TensorOptions &>(start, end, steps, base, options);\n#endif\n}\n", "static inline Tensor & logspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps, double base) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out)))) {\n        case Backend::CPU:\n            return CPUType::logspace_out(out, start, end, steps, base);\n            break;\n        default:\n            AT_ERROR(\"logspace_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::logspace.out(Scalar start, Scalar end, int steps=100, float base=10.0, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, Scalar, Scalar, int64_t, double>(out, start, end, steps, base);\n#endif\n}\n", "static inline Tensor log_softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::log_softmax(self, dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::log_softmax(Tensor self, int dim, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(self, dim, dtype);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor log_softmax(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::log_softmax(self, dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::log_softmax(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(self, dim, dtype);\n#endif\n}\n#endif", "static inline Tensor _log_softmax(const Tensor & self, int64_t dim, bool half_to_float) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_log_softmax(self, dim, half_to_float);\n            break;\n        default:\n            AT_ERROR(\"_log_softmax not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_log_softmax\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, half_to_float);\n#endif\n}\n", "static inline Tensor _log_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, output, self)))) {\n        case Backend::CPU:\n            return CPUType::_log_softmax_backward_data(grad_output, output, dim, self);\n            break;\n        default:\n            AT_ERROR(\"_log_softmax_backward_data not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_log_softmax_backward_data\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, output, self)), grad_output, output, dim, self);\n#endif\n}\n", "static inline Tensor logsumexp(const Tensor & self, IntArrayRef dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::logsumexp(self, dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::logsumexp\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, keepdim);\n#endif\n}\n", "static inline Tensor & logsumexp_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::logsumexp_out(out, self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, bool>(out, self, dim, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor logsumexp(const Tensor & self, DimnameList dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::logsumexp(self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::logsumexp.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, DimnameList, bool>(self, dim, keepdim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & logsumexp_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::logsumexp_out(out, self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::logsumexp.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, DimnameList, bool>(out, self, dim, keepdim);\n#endif\n}\n#endif", "static inline Tensor margin_ranking_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::margin_ranking_loss(input1, input2, target, margin, reduction);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::margin_ranking_loss\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, double, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input1, input2, target)), input1, input2, target, margin, reduction);\n#endif\n}\n", "static inline Tensor matmul(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::matmul(self, other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::matmul\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor & matmul_out(Tensor & out, const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::matmul_out(out, self, other);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, other);\n#endif\n}\n", "static inline Tensor matrix_rank(const Tensor & self, double tol, bool symmetric) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::matrix_rank(self, tol, symmetric);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::matrix_rank\", \"tol\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, double, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, tol, symmetric);\n#endif\n}\n", "static inline Tensor matrix_rank(const Tensor & self, bool symmetric) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::matrix_rank(self, symmetric);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::matrix_rank\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, symmetric);\n#endif\n}\n", "static inline Tensor matrix_power(const Tensor & self, int64_t n) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::matrix_power(self, n);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::matrix_power\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, n);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> max(const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::max(self, dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::max\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, keepdim);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::max_out(max, max_values, self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::max.dim_max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, int64_t, bool>(max, max_values, self, dim, keepdim);\n#endif\n}\n", "static inline Tensor max_values(const Tensor & self, IntArrayRef dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::max_values(self, dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::max_values\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor,Tensor> max(const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::max(self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::max.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(self, dim, keepdim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::max_out(max, max_values, self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::max.names_dim_max(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, Dimname, bool>(max, max_values, self, dim, keepdim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor max_values(const Tensor & self, DimnameList dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::max_values(self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::max_values.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, DimnameList, bool>(self, dim, keepdim);\n#endif\n}\n#endif", "static inline std::tuple<Tensor,Tensor> max_pool1d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::max_pool1d_with_indices(self, kernel_size, stride, padding, dilation, ceil_mode);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::max_pool1d_with_indices\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, kernel_size, stride, padding, dilation, ceil_mode);\n#endif\n}\n", "static inline Tensor max_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::max_pool1d(self, kernel_size, stride, padding, dilation, ceil_mode);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::max_pool1d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, kernel_size, stride, padding, dilation, ceil_mode);\n#endif\n}\n", "static inline Tensor max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::max_pool2d(self, kernel_size, stride, padding, dilation, ceil_mode);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::max_pool2d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, kernel_size, stride, padding, dilation, ceil_mode);\n#endif\n}\n", "static inline Tensor mkldnn_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n    \n        default:\n            AT_ERROR(\"mkldnn_max_pool2d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::mkldnn_max_pool2d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, kernel_size, stride, padding, dilation, ceil_mode);\n#endif\n}\n", "static inline Tensor quantized_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::quantized_max_pool2d(self, kernel_size, stride, padding, dilation, ceil_mode);\n            break;\n        default:\n            AT_ERROR(\"quantized_max_pool2d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::quantized_max_pool2d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, kernel_size, stride, padding, dilation, ceil_mode);\n#endif\n}\n", "static inline Tensor max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::max_pool3d(self, kernel_size, stride, padding, dilation, ceil_mode);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::max_pool3d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, kernel_size, stride, padding, dilation, ceil_mode);\n#endif\n}\n", "static inline Tensor mean(const Tensor & self, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::mean(self, dtype);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::mean(self, dtype);\n            break;\n        default:\n            AT_ERROR(\"mean not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mean(Tensor self, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, c10::optional<ScalarType>>(self, dtype);\n#endif\n}\n", "static inline Tensor mean(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::mean(self, dim, keepdim, dtype);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::mean(self, dim, keepdim, dtype);\n            break;\n        default:\n            AT_ERROR(\"mean not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mean.dim(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>>(self, dim, keepdim, dtype);\n#endif\n}\n", "static inline Tensor & mean_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::mean_out(out, self, dim, keepdim, dtype);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::mean_out(out, self, dim, keepdim, dtype);\n            break;\n        default:\n            AT_ERROR(\"mean_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mean.out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>>(out, self, dim, keepdim, dtype);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor mean(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::mean(self, dim, keepdim, dtype);\n            break;\n        default:\n            AT_ERROR(\"mean not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mean.names_dim(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, DimnameList, bool, c10::optional<ScalarType>>(self, dim, keepdim, dtype);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & mean_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::mean_out(out, self, dim, keepdim, dtype);\n            break;\n        default:\n            AT_ERROR(\"mean_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mean.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, DimnameList, bool, c10::optional<ScalarType>>(out, self, dim, keepdim, dtype);\n#endif\n}\n#endif", "static inline std::tuple<Tensor,Tensor> median(const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::median(self, dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::median\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, keepdim);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::median_out(values, indices, self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::median.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, int64_t, bool>(values, indices, self, dim, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor,Tensor> median(const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::median(self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::median.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(self, dim, keepdim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::median_out(values, indices, self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::median.names_dim_values(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, Dimname, bool>(values, indices, self, dim, keepdim);\n#endif\n}\n#endif", "static inline std::tuple<Tensor,Tensor> min(const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::min(self, dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::min\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, keepdim);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::min_out(min, min_indices, self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::min.dim_min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, int64_t, bool>(min, min_indices, self, dim, keepdim);\n#endif\n}\n", "static inline Tensor min_values(const Tensor & self, IntArrayRef dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::min_values(self, dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::min_values\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor,Tensor> min(const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::min(self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::min.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(self, dim, keepdim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::min_out(min, min_indices, self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::min.names_dim_min(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, Dimname, bool>(min, min_indices, self, dim, keepdim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor min_values(const Tensor & self, DimnameList dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::min_values(self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::min_values.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, DimnameList, bool>(self, dim, keepdim);\n#endif\n}\n#endif", "static inline Tensor mkldnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::mkldnn_convolution(self, weight, bias, padding, stride, dilation, groups);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mkldnn_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(self, weight, bias, padding, stride, dilation, groups);\n#endif\n}\n", "static inline Tensor mkldnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::mkldnn_convolution_backward_input(self_size, grad_output, weight, padding, stride, dilation, groups, bias_defined);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::mkldnn_convolution_backward_input\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, weight)), self_size, grad_output, weight, padding, stride, dilation, groups, bias_defined);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> mkldnn_convolution_backward_weights(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::mkldnn_convolution_backward_weights(weight_size, grad_output, self, padding, stride, dilation, groups, bias_defined);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::mkldnn_convolution_backward_weights\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), weight_size, grad_output, self, padding, stride, dilation, groups, bias_defined);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> mkldnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::mkldnn_convolution_backward(self, grad_output, weight, padding, stride, dilation, groups, output_mask);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::mkldnn_convolution_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, std::array<bool,3>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, grad_output, weight)), self, grad_output, weight, padding, stride, dilation, groups, output_mask);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, weight, bias, running_mean, running_var)))) {\n    \n        default:\n            AT_ERROR(\"miopen_batch_norm not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input, weight, bias, running_mean, running_var)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::miopen_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double>(input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, grad_output, weight, running_mean, running_var, save_mean, save_var)))) {\n    \n        default:\n            AT_ERROR(\"miopen_batch_norm_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input, grad_output, weight, running_mean, running_var, save_mean, save_var)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::miopen_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon) -> (Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, double>(input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon);\n#endif\n}\n", "static inline Tensor miopen_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)))) {\n    \n        default:\n            AT_ERROR(\"miopen_convolution not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::miopen_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic);\n#endif\n}\n", "static inline Tensor miopen_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, weight)))) {\n    \n        default:\n            AT_ERROR(\"miopen_convolution_backward_input not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, weight)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::miopen_convolution_backward_input\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, weight)), self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> miopen_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, grad_output, weight)))) {\n    \n        default:\n            AT_ERROR(\"miopen_convolution_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, grad_output, weight)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::miopen_convolution_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, grad_output, weight)), self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask);\n#endif\n}\n", "static inline Tensor miopen_convolution_backward_bias(const Tensor & grad_output) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)))) {\n    \n        default:\n            AT_ERROR(\"miopen_convolution_backward_bias not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::miopen_convolution_backward_bias\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)), grad_output);\n#endif\n}\n", "static inline Tensor miopen_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)))) {\n    \n        default:\n            AT_ERROR(\"miopen_convolution_backward_weight not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::miopen_convolution_backward_weight\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);\n#endif\n}\n", "static inline Tensor miopen_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)))) {\n    \n        default:\n            AT_ERROR(\"miopen_convolution_transpose not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::miopen_convolution_transpose(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> miopen_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, grad_output, weight)))) {\n    \n        default:\n            AT_ERROR(\"miopen_convolution_transpose_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, grad_output, weight)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::miopen_convolution_transpose_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, grad_output, weight)), self, grad_output, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, output_mask);\n#endif\n}\n", "static inline Tensor miopen_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, weight)))) {\n    \n        default:\n            AT_ERROR(\"miopen_convolution_transpose_backward_input not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, weight)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::miopen_convolution_transpose_backward_input\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, weight)), grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);\n#endif\n}\n", "static inline Tensor miopen_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)))) {\n    \n        default:\n            AT_ERROR(\"miopen_convolution_transpose_backward_weight not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::miopen_convolution_transpose_backward_weight\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);\n#endif\n}\n", "static inline Tensor miopen_depthwise_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)))) {\n    \n        default:\n            AT_ERROR(\"miopen_depthwise_convolution not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::miopen_depthwise_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic);\n#endif\n}\n", "static inline Tensor miopen_depthwise_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, weight)))) {\n    \n        default:\n            AT_ERROR(\"miopen_depthwise_convolution_backward_input not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, weight)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::miopen_depthwise_convolution_backward_input\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, weight)), self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> miopen_depthwise_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, grad_output, weight)))) {\n    \n        default:\n            AT_ERROR(\"miopen_depthwise_convolution_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, grad_output, weight)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::miopen_depthwise_convolution_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, grad_output, weight)), self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask);\n#endif\n}\n", "static inline Tensor miopen_depthwise_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)))) {\n    \n        default:\n            AT_ERROR(\"miopen_depthwise_convolution_backward_weight not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::miopen_depthwise_convolution_backward_weight\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> miopen_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & hx, const Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, weight, hx, cx, dropout_state)))) {\n    \n        default:\n            AT_ERROR(\"miopen_rnn not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input, weight, hx, cx, dropout_state)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::miopen_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor>, const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const Tensor &>(input, weight, weight_stride0, hx, cx, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> miopen_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, const Tensor & output, const Tensor & grad_output, const Tensor & grad_hy, const Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, weight, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, dropout_state, reserve)))) {\n    \n        default:\n            AT_ERROR(\"miopen_rnn_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input, weight, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, dropout_state, reserve)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::miopen_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>>, const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,4>>(input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask);\n#endif\n}\n", "static inline Tensor mm(const Tensor & self, const Tensor & mat2) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mat2)))) {\n        case Backend::CPU:\n            return CPUType::mm(self, mat2);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::mm(self, mat2);\n            break;\n        default:\n            AT_ERROR(\"mm not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, mat2)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::mm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mat2)), self, mat2);\n#endif\n}\n", "static inline Tensor & mm_out(Tensor & out, const Tensor & self, const Tensor & mat2) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, mat2)))) {\n        case Backend::CPU:\n            return CPUType::mm_out(out, self, mat2);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::mm_out(out, self, mat2);\n            break;\n        default:\n            AT_ERROR(\"mm_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, mat2)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, mat2);\n#endif\n}\n", "static inline Tensor _sparse_mm(const Tensor & sparse, const Tensor & dense) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_sparse_mm(sparse, dense);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_sparse_mm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(sparse, dense)), sparse, dense);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> mode(const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::mode(self, dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::mode\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, keepdim);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::mode_out(values, indices, self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, int64_t, bool>(values, indices, self, dim, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor,Tensor> mode(const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::mode(self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mode.dimname(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(self, dim, keepdim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor &,Tensor &> mode_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::mode_out(values, indices, self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mode.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, Dimname, bool>(values, indices, self, dim, keepdim);\n#endif\n}\n#endif", "static inline Tensor mul(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::mul(self, other);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::mul(self, other);\n            break;\n        default:\n            AT_ERROR(\"mul not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::mul\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor & mul_out(Tensor & out, const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, other)))) {\n        case Backend::CPU:\n            return CPUType::mul_out(out, self, other);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::mul_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"mul_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, other)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, other);\n#endif\n}\n", "static inline Tensor mul(const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::mul(self, other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::mul\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, other);\n#endif\n}\n", "static inline Tensor mv(const Tensor & self, const Tensor & vec) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, vec)))) {\n        case Backend::CPU:\n            return CPUType::mv(self, vec);\n            break;\n        default:\n            AT_ERROR(\"mv not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, vec)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::mv\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, vec)), self, vec);\n#endif\n}\n", "static inline Tensor & mv_out(Tensor & out, const Tensor & self, const Tensor & vec) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, vec)))) {\n        case Backend::CPU:\n            return CPUType::mv_out(out, self, vec);\n            break;\n        default:\n            AT_ERROR(\"mv_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, vec)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mv.out(Tensor self, Tensor vec, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, vec);\n#endif\n}\n", "static inline Tensor mvlgamma(const Tensor & self, int64_t p) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::mvlgamma(self, p);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::mvlgamma\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, p);\n#endif\n}\n", "static inline Tensor narrow(const Tensor & self, int64_t dim, int64_t start, int64_t length) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::narrow(self, dim, start, length);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::narrow\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, start, length);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> native_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, weight, bias, running_mean, running_var)))) {\n        case Backend::CPU:\n            return CPUType::native_batch_norm(input, weight, bias, running_mean, running_var, training, momentum, eps);\n            break;\n        default:\n            AT_ERROR(\"native_batch_norm not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input, weight, bias, running_mean, running_var)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::native_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double>(input, weight, bias, running_mean, running_var, training, momentum, eps);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> batch_norm_stats(const Tensor & input, double eps) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input)))) {\n    \n        default:\n            AT_ERROR(\"batch_norm_stats not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::batch_norm_stats\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, double>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input)), input, eps);\n#endif\n}\n", "static inline Tensor batch_norm_elemt(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & mean, const Tensor & invstd, double eps) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, weight, bias, mean, invstd)))) {\n    \n        default:\n            AT_ERROR(\"batch_norm_elemt not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input, weight, bias, mean, invstd)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::batch_norm_elemt(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, double>(input, weight, bias, mean, invstd, eps);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> batch_norm_gather_stats(const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & running_mean, const Tensor & running_var, double momentum, double eps, int64_t count) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, mean, invstd, running_mean, running_var)))) {\n    \n        default:\n            AT_ERROR(\"batch_norm_gather_stats not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input, mean, invstd, running_mean, running_var)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::batch_norm_gather_stats(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int count) -> (Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, double, double, int64_t>(input, mean, invstd, running_mean, running_var, momentum, eps, count);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> batch_norm_gather_stats_with_counts(const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & running_mean, const Tensor & running_var, double momentum, double eps, IntArrayRef counts) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, mean, invstd, running_mean, running_var)))) {\n    \n        default:\n            AT_ERROR(\"batch_norm_gather_stats_with_counts not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input, mean, invstd, running_mean, running_var)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::batch_norm_gather_stats_with_counts(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int[] counts) -> (Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, double, double, IntArrayRef>(input, mean, invstd, running_mean, running_var, momentum, eps, counts);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_out, input, weight, running_mean, running_var, save_mean, save_invstd)))) {\n        case Backend::CPU:\n            return CPUType::native_batch_norm_backward(grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask);\n            break;\n        default:\n            AT_ERROR(\"native_batch_norm_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_out, input, weight, running_mean, running_var, save_mean, save_invstd)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, std::array<bool,3>>(grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor,Tensor> batch_norm_backward_reduce(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & weight, bool input_g, bool weight_g, bool bias_g) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_out, input, mean, invstd, weight)))) {\n    \n        default:\n            AT_ERROR(\"batch_norm_backward_reduce not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_out, input, mean, invstd, weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::batch_norm_backward_reduce(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, bool input_g, bool weight_g, bool bias_g) -> (Tensor, Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, bool, bool>(grad_out, input, mean, invstd, weight, input_g, weight_g, bias_g);\n#endif\n}\n", "static inline Tensor batch_norm_backward_elemt(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & weight, const Tensor & mean_dy, const Tensor & mean_dy_xmu) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_out, input, mean, invstd, weight, mean_dy, mean_dy_xmu)))) {\n    \n        default:\n            AT_ERROR(\"batch_norm_backward_elemt not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_out, input, mean, invstd, weight, mean_dy, mean_dy_xmu)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::batch_norm_backward_elemt(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, Tensor mean_dy, Tensor mean_dy_xmu) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &>(grad_out, input, mean, invstd, weight, mean_dy, mean_dy_xmu);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> batch_norm_update_stats(const Tensor & input, const Tensor & running_mean, const Tensor & running_var, double momentum) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, running_mean, running_var)))) {\n        case Backend::CPU:\n            return CPUType::batch_norm_update_stats(input, running_mean, running_var, momentum);\n            break;\n        default:\n            AT_ERROR(\"batch_norm_update_stats not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input, running_mean, running_var)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::batch_norm_update_stats(Tensor input, Tensor? running_mean, Tensor? running_var, float momentum) -> (Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, double>(input, running_mean, running_var, momentum);\n#endif\n}\n", "static inline bool _nnpack_available() {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_nnpack_available();\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_nnpack_available\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set()));\n#endif\n}\n", "static inline Tensor _nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_nnpack_spatial_convolution(input, weight, bias, padding);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, int[2] padding) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef>(input, weight, bias, padding);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> _nnpack_spatial_convolution_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_nnpack_spatial_convolution_backward(input, grad_output, weight, padding, output_mask);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_nnpack_spatial_convolution_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, std::array<bool,3>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, grad_output, weight)), input, grad_output, weight, padding, output_mask);\n#endif\n}\n", "static inline Tensor _nnpack_spatial_convolution_backward_input(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_nnpack_spatial_convolution_backward_input(input, grad_output, weight, padding);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_nnpack_spatial_convolution_backward_input\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, grad_output, weight)), input, grad_output, weight, padding);\n#endif\n}\n", "static inline Tensor _nnpack_spatial_convolution_backward_weight(const Tensor & input, IntArrayRef weightsize, const Tensor & grad_output, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_nnpack_spatial_convolution_backward_weight(input, weightsize, grad_output, padding);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_nnpack_spatial_convolution_backward_weight\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, grad_output)), input, weightsize, grad_output, padding);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor ones(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::ones(size, names, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::ones.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, c10::optional<DimnameList>, const TensorOptions &>(size, names, options);\n#endif\n}\n#endif", "static inline Tensor ones(IntArrayRef size, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::ones(size, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::ones(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, const TensorOptions &>(size, options);\n#endif\n}\n", "static inline Tensor & ones_out(Tensor & out, IntArrayRef size) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::ones_out(out, size);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::ones.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, IntArrayRef>(out, size);\n#endif\n}\n", "static inline Tensor ones_like(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::ones_like(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::ones_like\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor ones_like(const Tensor & self, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::ones_like(self, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(self, options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::ones_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const TensorOptions &>(self, options);\n#endif\n}\n", "static inline Tensor pairwise_distance(const Tensor & x1, const Tensor & x2, double p, double eps, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::pairwise_distance(x1, x2, p, eps, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::pairwise_distance\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, double, double, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(x1, x2)), x1, x2, p, eps, keepdim);\n#endif\n}\n", "static inline Tensor cdist(const Tensor & x1, const Tensor & x2, double p) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cdist(x1, x2, p);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cdist\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, double>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(x1, x2)), x1, x2, p);\n#endif\n}\n", "static inline Tensor _cdist_backward(const Tensor & grad, const Tensor & x1, const Tensor & x2, double p, const Tensor & cdist) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_cdist_backward(grad, x1, x2, p, cdist);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_cdist_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, double, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, x1, x2, cdist)), grad, x1, x2, p, cdist);\n#endif\n}\n", "static inline Tensor pdist(const Tensor & self, double p) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::pdist(self, p);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::pdist\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, double>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, p);\n#endif\n}\n", "static inline Tensor _pdist_forward(const Tensor & self, double p) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_pdist_forward(self, p);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_pdist_forward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, double>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, p);\n#endif\n}\n", "static inline Tensor _pdist_backward(const Tensor & grad, const Tensor & self, double p, const Tensor & pdist) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_pdist_backward(grad, self, p, pdist);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_pdist_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, double, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, self, pdist)), grad, self, p, pdist);\n#endif\n}\n", "static inline Tensor cosine_similarity(const Tensor & x1, const Tensor & x2, int64_t dim, double eps) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cosine_similarity(x1, x2, dim, eps);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cosine_similarity\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t, double>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(x1, x2)), x1, x2, dim, eps);\n#endif\n}\n", "static inline Tensor pixel_shuffle(const Tensor & self, int64_t upscale_factor) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::pixel_shuffle(self, upscale_factor);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::pixel_shuffle\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, upscale_factor);\n#endif\n}\n", "static inline Tensor pinverse(const Tensor & self, double rcond) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::pinverse(self, rcond);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::pinverse\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, double>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, rcond);\n#endif\n}\n", "static inline Tensor poisson_nll_loss(const Tensor & input, const Tensor & target, bool log_input, bool full, double eps, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::poisson_nll_loss(input, target, log_input, full, eps, reduction);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::poisson_nll_loss\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, bool, bool, double, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, target)), input, target, log_input, full, eps, reduction);\n#endif\n}\n", "static inline Tensor scalar_tensor(Scalar s, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::scalar_tensor(s, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::scalar_tensor(Scalar s, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, Scalar, const TensorOptions &>(s, options);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor rand(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rand(size, names, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::rand.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, c10::optional<DimnameList>, const TensorOptions &>(size, names, options);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor rand(IntArrayRef size, Generator * generator, c10::optional<DimnameList> names, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rand(size, generator, names, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::rand.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, Generator *, c10::optional<DimnameList>, const TensorOptions &>(size, generator, names, options);\n#endif\n}\n#endif", "static inline Tensor rand(IntArrayRef size, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rand(size, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::rand(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, const TensorOptions &>(size, options);\n#endif\n}\n", "static inline Tensor rand(IntArrayRef size, Generator * generator, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rand(size, generator, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::rand.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, Generator *, const TensorOptions &>(size, generator, options);\n#endif\n}\n", "static inline Tensor & rand_out(Tensor & out, IntArrayRef size) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rand_out(out, size);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::rand.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, IntArrayRef>(out, size);\n#endif\n}\n", "static inline Tensor & rand_out(Tensor & out, IntArrayRef size, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rand_out(out, size, generator);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::rand.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, IntArrayRef, Generator *>(out, size, generator);\n#endif\n}\n", "static inline Tensor rand_like(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rand_like(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::rand_like\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor rand_like(const Tensor & self, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rand_like(self, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(self, options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::rand_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const TensorOptions &>(self, options);\n#endif\n}\n", "static inline Tensor randint(int64_t high, IntArrayRef size, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randint(high, size, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::randint(int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, IntArrayRef, const TensorOptions &>(high, size, options);\n#endif\n}\n", "static inline Tensor randint(int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randint(high, size, generator, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::randint.generator(int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, IntArrayRef, Generator *, const TensorOptions &>(high, size, generator, options);\n#endif\n}\n", "static inline Tensor randint(int64_t low, int64_t high, IntArrayRef size, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randint(low, high, size, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::randint.low(int low, int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, int64_t, IntArrayRef, const TensorOptions &>(low, high, size, options);\n#endif\n}\n", "static inline Tensor randint(int64_t low, int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randint(low, high, size, generator, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::randint.low_generator(int low, int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, int64_t, IntArrayRef, Generator *, const TensorOptions &>(low, high, size, generator, options);\n#endif\n}\n", "static inline Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randint_out(out, high, size);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::randint.out(int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, int64_t, IntArrayRef>(out, high, size);\n#endif\n}\n", "static inline Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randint_out(out, high, size, generator);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::randint.generator_out(int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, int64_t, IntArrayRef, Generator *>(out, high, size, generator);\n#endif\n}\n", "static inline Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randint_out(out, low, high, size);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::randint.low_out(int low, int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, int64_t, int64_t, IntArrayRef>(out, low, high, size);\n#endif\n}\n", "static inline Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randint_out(out, low, high, size, generator);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::randint.low_generator_out(int low, int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, int64_t, int64_t, IntArrayRef, Generator *>(out, low, high, size, generator);\n#endif\n}\n", "static inline Tensor randint_like(const Tensor & self, int64_t high) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randint_like(self, high);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::randint_like\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, high);\n#endif\n}\n", "static inline Tensor randint_like(const Tensor & self, int64_t low, int64_t high) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randint_like(self, low, high);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::randint_like\", \"low\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, low, high);\n#endif\n}\n", "static inline Tensor randint_like(const Tensor & self, int64_t high, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randint_like(self, high, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(self, options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::randint_like.dtype(Tensor self, int high, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, int64_t, const TensorOptions &>(self, high, options);\n#endif\n}\n", "static inline Tensor randint_like(const Tensor & self, int64_t low, int64_t high, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randint_like(self, low, high, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(self, options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::randint_like.low_dtype(Tensor self, int low, int high, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, int64_t, int64_t, const TensorOptions &>(self, low, high, options);\n#endif\n}\n", "static inline Tensor randn(IntArrayRef size, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randn(size, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::randn(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, const TensorOptions &>(size, options);\n#endif\n}\n", "static inline Tensor randn(IntArrayRef size, Generator * generator, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randn(size, generator, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::randn.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, Generator *, const TensorOptions &>(size, generator, options);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor randn(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randn(size, names, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::randn.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, c10::optional<DimnameList>, const TensorOptions &>(size, names, options);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor randn(IntArrayRef size, Generator * generator, c10::optional<DimnameList> names, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randn(size, generator, names, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::randn.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, Generator *, c10::optional<DimnameList>, const TensorOptions &>(size, generator, names, options);\n#endif\n}\n#endif", "static inline Tensor & randn_out(Tensor & out, IntArrayRef size) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randn_out(out, size);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::randn.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, IntArrayRef>(out, size);\n#endif\n}\n", "static inline Tensor & randn_out(Tensor & out, IntArrayRef size, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randn_out(out, size, generator);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::randn.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, IntArrayRef, Generator *>(out, size, generator);\n#endif\n}\n", "static inline Tensor randn_like(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randn_like(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::randn_like\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor randn_like(const Tensor & self, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randn_like(self, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(self, options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::randn_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const TensorOptions &>(self, options);\n#endif\n}\n", "static inline Tensor randperm(int64_t n, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randperm(n, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::randperm(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, const TensorOptions &>(n, options);\n#endif\n}\n", "static inline Tensor randperm(int64_t n, Generator * generator, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randperm(n, generator, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::randperm.generator(int n, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, Generator *, const TensorOptions &>(n, generator, options);\n#endif\n}\n", "static inline Tensor & randperm_out(Tensor & out, int64_t n) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::randperm_out(out, n);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::randperm.out(int n, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, int64_t>(out, n);\n#endif\n}\n", "static inline Tensor & randperm_out(Tensor & out, int64_t n, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out)))) {\n        case Backend::CPU:\n            return CPUType::randperm_out(out, n, generator);\n            break;\n        default:\n            AT_ERROR(\"randperm_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::randperm.generator_out(int n, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, int64_t, Generator *>(out, n, generator);\n#endif\n}\n", "static inline Tensor range(Scalar start, Scalar end, Scalar step, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::range(start, end, step, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::range.step(Scalar start, Scalar end, Scalar step=1, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, Scalar, Scalar, Scalar, const TensorOptions &>(start, end, step, options);\n#endif\n}\n", "static inline Tensor range(Scalar start, Scalar end, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::range(start, end, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::range(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, Scalar, Scalar, const TensorOptions &>(start, end, options);\n#endif\n}\n", "static inline Tensor & range_out(Tensor & out, Scalar start, Scalar end, Scalar step) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out)))) {\n        case Backend::CPU:\n            return CPUType::range_out(out, start, end, step);\n            break;\n        default:\n            AT_ERROR(\"range_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::range.out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, Scalar, Scalar, Scalar>(out, start, end, step);\n#endif\n}\n", "static inline Tensor reciprocal(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::reciprocal(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::reciprocal\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & reciprocal_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::reciprocal_(self);\n            break;\n        default:\n            AT_ERROR(\"reciprocal_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::reciprocal_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & reciprocal_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::reciprocal_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"reciprocal_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::reciprocal.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor neg(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::neg(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::neg\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & neg_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::neg_(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::neg_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & neg_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::neg_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"neg_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::neg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor repeat_interleave(const Tensor & repeats) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(repeats)))) {\n        case Backend::CPU:\n            return CPUType::repeat_interleave(repeats);\n            break;\n        default:\n            AT_ERROR(\"repeat_interleave not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(repeats)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::repeat_interleave\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(repeats)), repeats);\n#endif\n}\n", "static inline Tensor repeat_interleave(const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::repeat_interleave(self, repeats, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::repeat_interleave\", \"self_Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, c10::optional<int64_t>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, repeats)), self, repeats, dim);\n#endif\n}\n", "static inline Tensor repeat_interleave(const Tensor & self, int64_t repeats, c10::optional<int64_t> dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::repeat_interleave(self, repeats, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::repeat_interleave\", \"self_int\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, c10::optional<int64_t>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, repeats, dim);\n#endif\n}\n", "static inline Tensor reshape(const Tensor & self, IntArrayRef shape) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::reshape(self, shape);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::reshape\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, shape);\n#endif\n}\n", "static inline Tensor _mkldnn_reshape(const Tensor & self, IntArrayRef shape) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n    \n        default:\n            AT_ERROR(\"_mkldnn_reshape not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_mkldnn_reshape\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, shape);\n#endif\n}\n", "static inline Tensor round(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::round(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::round\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & round_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::round_(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::round_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & round_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::round_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"round_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::round.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor rrelu(const Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rrelu(self, lower, upper, training, generator);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::rrelu\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, Scalar, Scalar, bool, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, lower, upper, training, generator);\n#endif\n}\n", "static inline Tensor & rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rrelu_(self, lower, upper, training, generator);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::rrelu_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar, Scalar, bool, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, lower, upper, training, generator);\n#endif\n}\n", "static inline Tensor relu(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::relu(self);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::relu(self);\n            break;\n        default:\n            AT_ERROR(\"relu not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::relu\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & relu_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::relu_(self);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::relu_(self);\n            break;\n        default:\n            AT_ERROR(\"relu_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::relu_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor prelu(const Tensor & self, const Tensor & weight) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, weight)))) {\n        case Backend::CPU:\n            return CPUType::prelu(self, weight);\n            break;\n        default:\n            AT_ERROR(\"prelu not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, weight)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::prelu\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, weight)), self, weight);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> prelu_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight)))) {\n        case Backend::CPU:\n            return CPUType::prelu_backward(grad_output, self, weight);\n            break;\n        default:\n            AT_ERROR(\"prelu_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::prelu_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight)), grad_output, self, weight);\n#endif\n}\n", "static inline Tensor gelu(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::gelu(self);\n            break;\n        default:\n            AT_ERROR(\"gelu not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::gelu\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor gelu_backward(const Tensor & grad, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, self)))) {\n        case Backend::CPU:\n            return CPUType::gelu_backward(grad, self);\n            break;\n        default:\n            AT_ERROR(\"gelu_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::gelu_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, self)), grad, self);\n#endif\n}\n", "static inline Tensor hardshrink(const Tensor & self, Scalar lambd) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::hardshrink(self, lambd);\n            break;\n        default:\n            AT_ERROR(\"hardshrink not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::hardshrink\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, lambd);\n#endif\n}\n", "static inline Tensor hardshrink_backward(const Tensor & grad_out, const Tensor & self, Scalar lambd) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_out, self)))) {\n        case Backend::CPU:\n            return CPUType::hardshrink_backward(grad_out, self, lambd);\n            break;\n        default:\n            AT_ERROR(\"hardshrink_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_out, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::hardshrink_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_out, self)), grad_out, self, lambd);\n#endif\n}\n", "static inline Tensor rsqrt(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rsqrt(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::rsqrt\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & rsqrt_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rsqrt_(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::rsqrt_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & rsqrt_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::rsqrt_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"rsqrt_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::rsqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor select(const Tensor & self, Dimname dim, int64_t index) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::select(self, dim, index);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::select.Dimname(Tensor(a) self, Dimname dim, int index) -> Tensor(a)\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, int64_t>(self, dim, index);\n#endif\n}\n#endif", "static inline Tensor select(const Tensor & self, int64_t dim, int64_t index) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::select(self, dim, index);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::select\", \"int\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, index);\n#endif\n}\n", "static inline Tensor selu(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::selu(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::selu\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & selu_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::selu_(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::selu_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor celu(const Tensor & self, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::celu(self, alpha);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::celu\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, alpha);\n#endif\n}\n", "static inline Tensor & celu_(Tensor & self, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::celu_(self, alpha);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::celu_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, alpha);\n#endif\n}\n", "static inline Tensor sigmoid(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::sigmoid(self);\n            break;\n        default:\n            AT_ERROR(\"sigmoid not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::sigmoid\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & sigmoid_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::sigmoid_(self);\n            break;\n        default:\n            AT_ERROR(\"sigmoid_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::sigmoid_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & sigmoid_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::sigmoid_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"sigmoid_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor sin(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sin(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::sin\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & sin_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::sin_(self);\n            break;\n        default:\n            AT_ERROR(\"sin_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::sin_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & sin_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::sin_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"sin_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor sinh(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sinh(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::sinh\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & sinh_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::sinh_(self);\n            break;\n        default:\n            AT_ERROR(\"sinh_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::sinh_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & sinh_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::sinh_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"sinh_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor detach(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::detach(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::detach\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & detach_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::detach_(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::detach_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline int64_t size(const Tensor & self, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::size(self, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::size\", \"int\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<int64_t, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline int64_t size(const Tensor & self, Dimname dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::size(self, dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::size.Dimname(Tensor self, Dimname dim) -> int\");\n    return table->callUnboxed<int64_t, const Tensor &, Dimname>(self, dim);\n#endif\n}\n#endif", "static inline Tensor slice(const Tensor & self, int64_t dim, int64_t start, int64_t end, int64_t step) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::slice(self, dim, start, end, step);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::slice\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, int64_t, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, start, end, step);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> slogdet(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::slogdet(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::slogdet\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor smm(const Tensor & self, const Tensor & mat2) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::smm(self, mat2);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::smm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mat2)), self, mat2);\n#endif\n}\n", "static inline Tensor softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::softmax(self, dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::softmax(Tensor self, int dim, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(self, dim, dtype);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor softmax(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::softmax(self, dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::softmax(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(self, dim, dtype);\n#endif\n}\n#endif", "static inline Tensor _softmax(const Tensor & self, int64_t dim, bool half_to_float) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_softmax(self, dim, half_to_float);\n            break;\n        default:\n            AT_ERROR(\"_softmax not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_softmax\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, half_to_float);\n#endif\n}\n", "static inline Tensor _softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, output, self)))) {\n        case Backend::CPU:\n            return CPUType::_softmax_backward_data(grad_output, output, dim, self);\n            break;\n        default:\n            AT_ERROR(\"_softmax_backward_data not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_softmax_backward_data\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, output, self)), grad_output, output, dim, self);\n#endif\n}\n", "static inline std::vector<Tensor> split(const Tensor & self, int64_t split_size, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::split(self, split_size, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::split\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::vector<Tensor>, const Tensor &, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, split_size, dim);\n#endif\n}\n", "static inline std::vector<Tensor> split_with_sizes(const Tensor & self, IntArrayRef split_sizes, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::split_with_sizes(self, split_sizes, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::split_with_sizes\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::vector<Tensor>, const Tensor &, IntArrayRef, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, split_sizes, dim);\n#endif\n}\n", "static inline Tensor squeeze(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::squeeze(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::squeeze\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor squeeze(const Tensor & self, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::squeeze(self, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::squeeze\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor squeeze(const Tensor & self, Dimname dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::squeeze(self, dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::squeeze.dimname(Tensor(a) self, Dimname dim) -> Tensor(a)\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname>(self, dim);\n#endif\n}\n#endif", "static inline Tensor sspaddmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sspaddmm(self, mat1, mat2, beta, alpha);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::sspaddmm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mat1, mat2)), self, mat1, mat2, beta, alpha);\n#endif\n}\n", "static inline Tensor & sspaddmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, mat1, mat2)))) {\n        case Backend::CPU:\n            return CPUType::sspaddmm_out(out, self, mat1, mat2, beta, alpha);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::sspaddmm_out(out, self, mat1, mat2, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"sspaddmm_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, mat1, mat2)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sspaddmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(out, self, mat1, mat2, beta, alpha);\n#endif\n}\n", "static inline Tensor stack(TensorList tensors, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::stack(tensors, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::stack\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, TensorList, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(tensors)), tensors, dim);\n#endif\n}\n", "static inline Tensor & stack_out(Tensor & out, TensorList tensors, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::stack_out(out, tensors, dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, TensorList, int64_t>(out, tensors, dim);\n#endif\n}\n", "static inline Tensor stft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const Tensor & window, bool normalized, bool onesided) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::stft(self, n_fft, hop_length, win_length, window, normalized, onesided);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::stft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool normalized=False, bool onesided=True) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, const Tensor &, bool, bool>(self, n_fft, hop_length, win_length, window, normalized, onesided);\n#endif\n}\n", "static inline int64_t stride(const Tensor & self, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::stride(self, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::stride\", \"int\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<int64_t, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline int64_t stride(const Tensor & self, Dimname dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::stride(self, dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::stride.Dimname(Tensor self, Dimname dim) -> int\");\n    return table->callUnboxed<int64_t, const Tensor &, Dimname>(self, dim);\n#endif\n}\n#endif", "static inline Tensor sum(const Tensor & self, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sum(self, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sum(Tensor self, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, c10::optional<ScalarType>>(self, dtype);\n#endif\n}\n", "static inline Tensor sum(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sum(self, dim, keepdim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>>(self, dim, keepdim, dtype);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor sum(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sum(self, dim, keepdim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sum.dim_DimnameList(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, DimnameList, bool, c10::optional<ScalarType>>(self, dim, keepdim, dtype);\n#endif\n}\n#endif", "static inline Tensor & sum_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sum_out(out, self, dim, keepdim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>>(out, self, dim, keepdim, dtype);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & sum_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sum_out(out, self, dim, keepdim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sum.DimnameList_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, DimnameList, bool, c10::optional<ScalarType>>(out, self, dim, keepdim, dtype);\n#endif\n}\n#endif", "static inline Tensor sqrt(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sqrt(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::sqrt\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & sqrt_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::sqrt_(self);\n            break;\n        default:\n            AT_ERROR(\"sqrt_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::sqrt_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & sqrt_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::sqrt_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"sqrt_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor std(const Tensor & self, bool unbiased) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::std(self, unbiased);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::std\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, unbiased);\n#endif\n}\n", "static inline Tensor std(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::std(self, dim, unbiased, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::std\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, unbiased, keepdim);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> std_mean(const Tensor & self, bool unbiased) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::std_mean(self, unbiased);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::std_mean\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, unbiased);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> std_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::std_mean(self, dim, unbiased, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::std_mean\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, unbiased, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor,Tensor> std_mean(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::std_mean(self, dim, unbiased, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::std_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, DimnameList, bool, bool>(self, dim, unbiased, keepdim);\n#endif\n}\n#endif", "static inline Tensor & std_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::std_out(out, self, dim, unbiased, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::std.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, bool, bool>(out, self, dim, unbiased, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor std(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::std(self, dim, unbiased, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::std.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, DimnameList, bool, bool>(self, dim, unbiased, keepdim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & std_out(Tensor & out, const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::std_out(out, self, dim, unbiased, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::std.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, DimnameList, bool, bool>(out, self, dim, unbiased, keepdim);\n#endif\n}\n#endif", "static inline Tensor prod(const Tensor & self, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::prod(self, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::prod(Tensor self, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, c10::optional<ScalarType>>(self, dtype);\n#endif\n}\n", "static inline Tensor prod(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::prod(self, dim, keepdim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::prod.dim_int(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, int64_t, bool, c10::optional<ScalarType>>(self, dim, keepdim, dtype);\n#endif\n}\n", "static inline Tensor & prod_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::prod_out(out, self, dim, keepdim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::prod.int_out(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, int64_t, bool, c10::optional<ScalarType>>(out, self, dim, keepdim, dtype);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor prod(const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::prod(self, dim, keepdim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::prod.dim_Dimname(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, bool, c10::optional<ScalarType>>(self, dim, keepdim, dtype);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & prod_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::prod_out(out, self, dim, keepdim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::prod.Dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Dimname, bool, c10::optional<ScalarType>>(out, self, dim, keepdim, dtype);\n#endif\n}\n#endif", "static inline Tensor t(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::t(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::t\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor tan(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::tan(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::tan\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & tan_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::tan_(self);\n            break;\n        default:\n            AT_ERROR(\"tan_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::tan_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & tan_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::tan_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"tan_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::tan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor tanh(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::tanh(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::tanh\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & tanh_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::tanh_(self);\n            break;\n        default:\n            AT_ERROR(\"tanh_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::tanh_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & tanh_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::tanh_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"tanh_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::tanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor tensordot(const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::tensordot(self, other, dims_self, dims_other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::tensordot\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other, dims_self, dims_other);\n#endif\n}\n", "static inline Tensor threshold(const Tensor & self, Scalar threshold, Scalar value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::threshold(self, threshold, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::threshold\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, threshold, value);\n#endif\n}\n", "static inline Tensor & threshold_(Tensor & self, Scalar threshold, Scalar value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::threshold_(self, threshold, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::threshold_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, threshold, value);\n#endif\n}\n", "static inline Tensor & threshold_out(Tensor & out, const Tensor & self, Scalar threshold, Scalar value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::threshold_out(out, self, threshold, value);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::threshold.out(Tensor self, Scalar threshold, Scalar value, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar, Scalar>(out, self, threshold, value);\n#endif\n}\n", "static inline Tensor threshold_backward(const Tensor & grad_output, const Tensor & self, Scalar threshold) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::threshold_backward(grad_output, self, threshold);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::threshold_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), grad_output, self, threshold);\n#endif\n}\n", "static inline Tensor transpose(const Tensor & self, int64_t dim0, int64_t dim1) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::transpose(self, dim0, dim1);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::transpose\", \"int\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim0, dim1);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor transpose(const Tensor & self, Dimname dim0, Dimname dim1) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::transpose(self, dim0, dim1);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::transpose.Dimname(Tensor(a) self, Dimname dim0, Dimname dim1) -> Tensor(a)\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, Dimname>(self, dim0, dim1);\n#endif\n}\n#endif", "static inline Tensor _mkldnn_transpose(const Tensor & self, int64_t dim0, int64_t dim1) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n    \n        default:\n            AT_ERROR(\"_mkldnn_transpose not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_mkldnn_transpose\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim0, dim1);\n#endif\n}\n", "static inline Tensor & _mkldnn_transpose_(Tensor & self, int64_t dim0, int64_t dim1) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n    \n        default:\n            AT_ERROR(\"_mkldnn_transpose_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_mkldnn_transpose_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim0, dim1);\n#endif\n}\n", "static inline Tensor one_hot(const Tensor & self, int64_t num_classes) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::one_hot(self, num_classes);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::one_hot\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, num_classes);\n#endif\n}\n", "static inline Tensor flip(const Tensor & self, IntArrayRef dims) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::flip(self, dims);\n            break;\n        default:\n            AT_ERROR(\"flip not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::flip\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dims);\n#endif\n}\n", "static inline Tensor roll(const Tensor & self, IntArrayRef shifts, IntArrayRef dims) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::roll(self, shifts, dims);\n            break;\n        default:\n            AT_ERROR(\"roll not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::roll\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, shifts, dims);\n#endif\n}\n", "static inline Tensor rot90(const Tensor & self, int64_t k, IntArrayRef dims) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rot90(self, k, dims);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::rot90\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, k, dims);\n#endif\n}\n", "static inline Tensor trapz(const Tensor & y, const Tensor & x, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::trapz(y, x, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::trapz\", \"x\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(y, x)), y, x, dim);\n#endif\n}\n", "static inline Tensor trapz(const Tensor & y, double dx, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::trapz(y, dx, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::trapz\", \"dx\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, double, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(y)), y, dx, dim);\n#endif\n}\n", "static inline Tensor _trilinear(const Tensor & i1, const Tensor & i2, const Tensor & i3, IntArrayRef expand1, IntArrayRef expand2, IntArrayRef expand3, IntArrayRef sumdim, int64_t unroll_dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_trilinear(i1, i2, i3, expand1, expand2, expand3, sumdim, unroll_dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_trilinear\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(i1, i2, i3)), i1, i2, i3, expand1, expand2, expand3, sumdim, unroll_dim);\n#endif\n}\n", "static inline Tensor triplet_margin_loss(const Tensor & anchor, const Tensor & positive, const Tensor & negative, double margin, double p, double eps, bool swap, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::triplet_margin_loss(anchor, positive, negative, margin, p, eps, swap, reduction);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::triplet_margin_loss\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, double, double, double, bool, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(anchor, positive, negative)), anchor, positive, negative, margin, p, eps, swap, reduction);\n#endif\n}\n", "static inline Tensor trunc(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::trunc(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::trunc\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & trunc_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::trunc_(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::trunc_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & trunc_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::trunc_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"trunc_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::trunc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline bool _has_compatible_shallow_copy_type(const Tensor & self, const Tensor & from) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_has_compatible_shallow_copy_type(self, from);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_has_compatible_shallow_copy_type\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, from)), self, from);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> _unique(const Tensor & self, bool sorted, bool return_inverse) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_unique(self, sorted, return_inverse);\n            break;\n        default:\n            AT_ERROR(\"_unique not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_unique\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, sorted, return_inverse);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> unique_dim(const Tensor & self, int64_t dim, bool sorted, bool return_inverse, bool return_counts) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::unique_dim(self, dim, sorted, return_inverse, return_counts);\n            break;\n        default:\n            AT_ERROR(\"unique_dim not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::unique_dim\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, int64_t, bool, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, sorted, return_inverse, return_counts);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> unique_consecutive(const Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::unique_consecutive(self, return_inverse, return_counts, dim);\n            break;\n        default:\n            AT_ERROR(\"unique_consecutive not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::unique_consecutive\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, bool, bool, c10::optional<int64_t>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, return_inverse, return_counts, dim);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> unique_dim_consecutive(const Tensor & self, int64_t dim, bool return_inverse, bool return_counts) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::unique_dim_consecutive(self, dim, return_inverse, return_counts);\n            break;\n        default:\n            AT_ERROR(\"unique_dim_consecutive not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::unique_dim_consecutive\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, return_inverse, return_counts);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> _unique2(const Tensor & self, bool sorted, bool return_inverse, bool return_counts) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_unique2(self, sorted, return_inverse, return_counts);\n            break;\n        default:\n            AT_ERROR(\"_unique2 not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_unique2\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, bool, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, sorted, return_inverse, return_counts);\n#endif\n}\n", "static inline Tensor _unsafe_view(const Tensor & self, IntArrayRef size) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_unsafe_view(self, size);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_unsafe_view\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, size);\n#endif\n}\n", "static inline Tensor unsqueeze(const Tensor & self, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::unsqueeze(self, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::unsqueeze\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim);\n#endif\n}\n", "static inline Tensor var(const Tensor & self, bool unbiased) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::var(self, unbiased);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::var\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, unbiased);\n#endif\n}\n", "static inline Tensor var(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::var(self, dim, unbiased, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::var\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, unbiased, keepdim);\n#endif\n}\n", "static inline Tensor & var_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::var_out(out, self, dim, unbiased, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::var.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, bool, bool>(out, self, dim, unbiased, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor var(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::var(self, dim, unbiased, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::var.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, DimnameList, bool, bool>(self, dim, unbiased, keepdim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & var_out(Tensor & out, const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::var_out(out, self, dim, unbiased, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::var.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, DimnameList, bool, bool>(out, self, dim, unbiased, keepdim);\n#endif\n}\n#endif", "static inline std::tuple<Tensor,Tensor> var_mean(const Tensor & self, bool unbiased) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::var_mean(self, unbiased);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::var_mean\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, unbiased);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> var_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::var_mean(self, dim, unbiased, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::var_mean\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, unbiased, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor,Tensor> var_mean(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::var_mean(self, dim, unbiased, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::var_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, DimnameList, bool, bool>(self, dim, unbiased, keepdim);\n#endif\n}\n#endif", "static inline Tensor where(const Tensor & condition, const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::where(condition, self, other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::where\", \"self\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(condition, self, other)), condition, self, other);\n#endif\n}\n", "static inline std::vector<Tensor> where(const Tensor & condition) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::where(condition);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::where\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::vector<Tensor>, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(condition)), condition);\n#endif\n}\n", "static inline Tensor _s_where(const Tensor & condition, const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(condition, self, other)))) {\n        case Backend::CPU:\n            return CPUType::_s_where(condition, self, other);\n            break;\n        default:\n            AT_ERROR(\"_s_where not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(condition, self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_s_where\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(condition, self, other)), condition, self, other);\n#endif\n}\n", "static inline Tensor norm_except_dim(const Tensor & v, int64_t pow, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::norm_except_dim(v, pow, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::norm_except_dim\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(v)), v, pow, dim);\n#endif\n}\n", "static inline Tensor _weight_norm(const Tensor & v, const Tensor & g, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_weight_norm(v, g, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_weight_norm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(v, g)), v, g, dim);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> _weight_norm_cuda_interface(const Tensor & v, const Tensor & g, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(v, g)))) {\n    \n        default:\n            AT_ERROR(\"_weight_norm_cuda_interface not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(v, g)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_weight_norm_cuda_interface\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(v, g)), v, g, dim);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> _weight_norm_cuda_interface_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_w, saved_v, saved_g, saved_norms)))) {\n    \n        default:\n            AT_ERROR(\"_weight_norm_cuda_interface_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_w, saved_v, saved_g, saved_norms)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_weight_norm_cuda_interface_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_w, saved_v, saved_g, saved_norms)), grad_w, saved_v, saved_g, saved_norms, dim);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> _weight_norm_differentiable_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_weight_norm_differentiable_backward(grad_w, saved_v, saved_g, saved_norms, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_weight_norm_differentiable_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_w, saved_v, saved_g, saved_norms)), grad_w, saved_v, saved_g, saved_norms, dim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor zeros(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::zeros(size, names, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::zeros.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, c10::optional<DimnameList>, const TensorOptions &>(size, names, options);\n#endif\n}\n#endif", "static inline Tensor zeros(IntArrayRef size, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::zeros(size, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::zeros(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, const TensorOptions &>(size, options);\n#endif\n}\n", "static inline Tensor & zeros_out(Tensor & out, IntArrayRef size) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::zeros_out(out, size);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::zeros.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, IntArrayRef>(out, size);\n#endif\n}\n", "static inline Tensor zeros_like(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::zeros_like(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::zeros_like\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor zeros_like(const Tensor & self, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::zeros_like(self, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(self, options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::zeros_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const TensorOptions &>(self, options);\n#endif\n}\n", "static inline Tensor _standard_gamma_grad(const Tensor & self, const Tensor & output) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, output)))) {\n        case Backend::CPU:\n            return CPUType::_standard_gamma_grad(self, output);\n            break;\n        default:\n            AT_ERROR(\"_standard_gamma_grad not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, output)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_standard_gamma_grad\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, output)), self, output);\n#endif\n}\n", "static inline Tensor _standard_gamma(const Tensor & self, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_standard_gamma(self, generator);\n            break;\n        default:\n            AT_ERROR(\"_standard_gamma not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_standard_gamma\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, generator);\n#endif\n}\n", "static inline Tensor _dirichlet_grad(const Tensor & x, const Tensor & alpha, const Tensor & total) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(x, alpha, total)))) {\n        case Backend::CPU:\n            return CPUType::_dirichlet_grad(x, alpha, total);\n            break;\n        default:\n            AT_ERROR(\"_dirichlet_grad not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(x, alpha, total)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_dirichlet_grad\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(x, alpha, total)), x, alpha, total);\n#endif\n}\n", "static inline Tensor _sample_dirichlet(const Tensor & self, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_sample_dirichlet(self, generator);\n            break;\n        default:\n            AT_ERROR(\"_sample_dirichlet not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_sample_dirichlet\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, generator);\n#endif\n}\n", "static inline Tensor poisson(const Tensor & self, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::poisson(self, generator);\n            break;\n        default:\n            AT_ERROR(\"poisson not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::poisson\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, generator);\n#endif\n}\n", "static inline Tensor native_norm(const Tensor & self, Scalar p) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::native_norm(self, p);\n            break;\n        default:\n            AT_ERROR(\"native_norm not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::native_norm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, p);\n#endif\n}\n", "static inline Tensor _sparse_sum(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_sparse_sum(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_sparse_sum\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor _sparse_sum(const Tensor & self, ScalarType dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_sparse_sum(self, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_sparse_sum.dtype(Tensor self, *, ScalarType dtype) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, ScalarType>(self, dtype);\n#endif\n}\n", "static inline Tensor _sparse_sum(const Tensor & self, IntArrayRef dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_sparse_sum(self, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_sparse_sum\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim);\n#endif\n}\n", "static inline Tensor _sparse_sum(const Tensor & self, IntArrayRef dim, ScalarType dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_sparse_sum(self, dim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_sparse_sum.dim_dtype(Tensor self, int[1] dim, *, ScalarType dtype) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, IntArrayRef, ScalarType>(self, dim, dtype);\n#endif\n}\n", "static inline Tensor _sparse_sum_backward(const Tensor & grad, const Tensor & self, IntArrayRef dim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, self)))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::_sparse_sum_backward(grad, self, dim);\n            break;\n        default:\n            AT_ERROR(\"_sparse_sum_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_sparse_sum_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, self)), grad, self, dim);\n#endif\n}\n", "static inline Tensor norm(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::norm(self, p, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, ScalarType dtype) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, c10::optional<Scalar>, ScalarType>(self, p, dtype);\n#endif\n}\n", "static inline Tensor norm(const Tensor & self, Scalar p) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::norm(self, p);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::norm\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, p);\n#endif\n}\n", "static inline Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::norm(self, p, dim, keepdim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType>(self, p, dim, keepdim, dtype);\n#endif\n}\n", "static inline Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::norm(self, p, dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::norm\", \"ScalarOpt_dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, p, dim, keepdim);\n#endif\n}\n", "static inline Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::norm_out(out, self, p, dim, keepdim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::norm.dtype_out(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType>(out, self, p, dim, keepdim, dtype);\n#endif\n}\n", "static inline Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::norm_out(out, self, p, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::norm.out(Tensor self, Scalar? p, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool>(out, self, p, dim, keepdim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor norm(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::norm(self, p, dim, keepdim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::norm.names_ScalarOpt_dim_dtype(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, c10::optional<Scalar>, DimnameList, bool, ScalarType>(self, p, dim, keepdim, dtype);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor norm(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::norm(self, p, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::norm.names_ScalarOpt_dim(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, c10::optional<Scalar>, DimnameList, bool>(self, p, dim, keepdim);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::norm_out(out, self, p, dim, keepdim, dtype);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::norm.names_dtype_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, c10::optional<Scalar>, DimnameList, bool, ScalarType>(out, self, p, dim, keepdim, dtype);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::norm_out(out, self, p, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::norm.names_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, c10::optional<Scalar>, DimnameList, bool>(out, self, p, dim, keepdim);\n#endif\n}\n#endif", "static inline Tensor frobenius_norm(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::frobenius_norm(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::frobenius_norm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor frobenius_norm(const Tensor & self, IntArrayRef dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::frobenius_norm(self, dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::frobenius_norm\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, keepdim);\n#endif\n}\n", "static inline Tensor & frobenius_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::frobenius_norm_out(out, self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::frobenius_norm.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, bool>(out, self, dim, keepdim);\n#endif\n}\n", "static inline Tensor nuclear_norm(const Tensor & self, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::nuclear_norm(self, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::nuclear_norm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, keepdim);\n#endif\n}\n", "static inline Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::nuclear_norm_out(out, self, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::nuclear_norm.out(Tensor self, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, bool>(out, self, keepdim);\n#endif\n}\n", "static inline Tensor nuclear_norm(const Tensor & self, IntArrayRef dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::nuclear_norm(self, dim, keepdim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::nuclear_norm\", \"dim\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, keepdim);\n#endif\n}\n", "static inline Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::nuclear_norm_out(out, self, dim, keepdim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::nuclear_norm.dim_out(Tensor self, int[2] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, bool>(out, self, dim, keepdim);\n#endif\n}\n", "static inline Tensor clone(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::clone(self);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::clone(self);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::clone(self);\n            break;\n        default:\n            AT_ERROR(\"clone not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::clone\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & resize_as_(Tensor & self, const Tensor & the_template) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::resize_as_(self, the_template);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::resize_as_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, the_template)), self, the_template);\n#endif\n}\n", "static inline Tensor & pow_out(Tensor & out, const Tensor & self, Scalar exponent) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::pow_out(out, self, exponent);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::pow_out(out, self, exponent);\n            break;\n        default:\n            AT_ERROR(\"pow_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::pow.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar>(out, self, exponent);\n#endif\n}\n", "static inline Tensor pow(const Tensor & self, Scalar exponent) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::pow(self, exponent);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::pow(self, exponent);\n            break;\n        default:\n            AT_ERROR(\"pow not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::pow\", \"Tensor_Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, exponent);\n#endif\n}\n", "static inline Tensor & zero_(Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::zero_(self);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::zero_(self);\n            break;\n        default:\n            AT_ERROR(\"zero_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::zero_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & sub_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, other)))) {\n        case Backend::CPU:\n            return CPUType::sub_out(out, self, other, alpha);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::sub_out(out, self, other, alpha);\n            break;\n        default:\n            AT_ERROR(\"sub_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, other)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sub.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar>(out, self, other, alpha);\n#endif\n}\n", "static inline Tensor sub(const Tensor & self, const Tensor & other, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::sub(self, other, alpha);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::sub(self, other, alpha);\n            break;\n        default:\n            AT_ERROR(\"sub not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::sub\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other, alpha);\n#endif\n}\n", "static inline Tensor sub(const Tensor & self, Scalar other, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sub(self, other, alpha);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::sub\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, other, alpha);\n#endif\n}\n", "static inline Tensor rsub(const Tensor & self, const Tensor & other, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rsub(self, other, alpha);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::rsub\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other, alpha);\n#endif\n}\n", "static inline Tensor rsub(const Tensor & self, Scalar other, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rsub(self, other, alpha);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::rsub\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, other, alpha);\n#endif\n}\n", "static inline Tensor _sparse_addmm(const Tensor & self, const Tensor & sparse, const Tensor & dense, Scalar beta, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_sparse_addmm(self, sparse, dense, beta, alpha);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_sparse_addmm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, sparse, dense)), self, sparse, dense, beta, alpha);\n#endif\n}\n", "static inline Tensor & addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, mat1, mat2)))) {\n        case Backend::CPU:\n            return CPUType::addmm_out(out, self, mat1, mat2, beta, alpha);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::addmm_out(out, self, mat1, mat2, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"addmm_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, mat1, mat2)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(out, self, mat1, mat2, beta, alpha);\n#endif\n}\n", "static inline Tensor addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mat1, mat2)))) {\n        case Backend::CPU:\n            return CPUType::addmm(self, mat1, mat2, beta, alpha);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::addmm(self, mat1, mat2, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"addmm not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, mat1, mat2)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::addmm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mat1, mat2)), self, mat1, mat2, beta, alpha);\n#endif\n}\n", "static inline Tensor sparse_coo_tensor(IntArrayRef size, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sparse_coo_tensor(size, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::sparse_coo_tensor.size(int[] size, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\");\n    return table->callUnboxed<Tensor, IntArrayRef, const TensorOptions &>(size, options);\n#endif\n}\n", "static inline Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sparse_coo_tensor(indices, values, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(indices, values, options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::sparse_coo_tensor.indices(Tensor indices, Tensor values, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const TensorOptions &>(indices, values, options);\n#endif\n}\n", "static inline Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sparse_coo_tensor(indices, values, size, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(indices, values, options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::sparse_coo_tensor.indices_size(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, IntArrayRef, const TensorOptions &>(indices, values, size, options);\n#endif\n}\n", "static inline Tensor _sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_sparse_coo_tensor_unsafe(indices, values, size, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(indices, values, options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::_sparse_coo_tensor_unsafe(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, IntArrayRef, const TensorOptions &>(indices, values, size, options);\n#endif\n}\n", "static inline Tensor _sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(options)))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::_sparse_coo_tensor_with_dims(sparse_dim, dense_dim, size, options);\n            break;\n        default:\n            AT_ERROR(\"_sparse_coo_tensor_with_dims not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(options)));\n    }\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::_sparse_coo_tensor_with_dims(int sparse_dim, int dense_dim, int[] size, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, int64_t, IntArrayRef, const TensorOptions &>(sparse_dim, dense_dim, size, options);\n#endif\n}\n", "static inline Tensor _sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const Tensor & indices, const Tensor & values, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(indices, values, options)))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::_sparse_coo_tensor_with_dims_and_tensors(sparse_dim, dense_dim, size, indices, values, options);\n            break;\n        default:\n            AT_ERROR(\"_sparse_coo_tensor_with_dims_and_tensors not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(indices, values, options)));\n    }\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(indices, values, options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::_sparse_coo_tensor_with_dims_and_tensors(int sparse_dim, int dense_dim, int[] size, Tensor indices, Tensor values, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, int64_t, IntArrayRef, const Tensor &, const Tensor &, const TensorOptions &>(sparse_dim, dense_dim, size, indices, values, options);\n#endif\n}\n", "static inline Tensor to_dense_backward(const Tensor & grad, const Tensor & input) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::to_dense_backward(grad, input);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::to_dense_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, input)), grad, input);\n#endif\n}\n", "static inline Tensor & hspmm_out(Tensor & out, const Tensor & mat1, const Tensor & mat2) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, mat1, mat2)))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::hspmm_out(out, mat1, mat2);\n            break;\n        default:\n            AT_ERROR(\"hspmm_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, mat1, mat2)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::hspmm.out(Tensor mat1, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, mat1, mat2);\n#endif\n}\n", "static inline Tensor hspmm(const Tensor & mat1, const Tensor & mat2) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(mat1, mat2)))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::hspmm(mat1, mat2);\n            break;\n        default:\n            AT_ERROR(\"hspmm not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(mat1, mat2)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::hspmm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(mat1, mat2)), mat1, mat2);\n#endif\n}\n", "static inline Tensor & copy_sparse_to_sparse_(Tensor & self, const Tensor & src, bool non_blocking) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, src)))) {\n        case Backend::SparseCPU:\n            return SparseCPUType::copy_sparse_to_sparse_(self, src, non_blocking);\n            break;\n        default:\n            AT_ERROR(\"copy_sparse_to_sparse_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, src)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::copy_sparse_to_sparse_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, src)), self, src, non_blocking);\n#endif\n}\n", "static inline int64_t numel(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::numel(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::numel\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<int64_t, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline std::vector<Tensor> unbind(const Tensor & self, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::unbind(self, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::unbind\", \"int\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::vector<Tensor>, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::vector<Tensor> unbind(const Tensor & self, Dimname dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::unbind(self, dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::unbind.Dimname(Tensor(a) self, Dimname dim) -> Tensor(a)[]\");\n    return table->callUnboxed<std::vector<Tensor>, const Tensor &, Dimname>(self, dim);\n#endif\n}\n#endif", "static inline Tensor mkldnn_reorder_conv2d_weight(const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n    \n        default:\n            AT_ERROR(\"mkldnn_reorder_conv2d_weight not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::mkldnn_reorder_conv2d_weight\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, padding, stride, dilation, groups);\n#endif\n}\n", "static inline Tensor to_mkldnn_backward(const Tensor & grad, const Tensor & input) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::to_mkldnn_backward(grad, input);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::to_mkldnn_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, input)), grad, input);\n#endif\n}\n", "static inline Tensor quantize_per_tensor(const Tensor & self, double scale, int64_t zero_point, ScalarType dtype) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::quantize_per_tensor(self, scale, zero_point, dtype);\n            break;\n        default:\n            AT_ERROR(\"quantize_per_tensor not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::quantize_per_tensor(Tensor self, float scale, int zero_point, ScalarType dtype) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, double, int64_t, ScalarType>(self, scale, zero_point, dtype);\n#endif\n}\n", "static inline Tensor quantize_per_channel(const Tensor & self, const Tensor & scales, const Tensor & zero_points, int64_t axis, ScalarType dtype) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, scales, zero_points)))) {\n        case Backend::CPU:\n            return CPUType::quantize_per_channel(self, scales, zero_points, axis, dtype);\n            break;\n        default:\n            AT_ERROR(\"quantize_per_channel not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, scales, zero_points)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::quantize_per_channel(Tensor self, Tensor scales, Tensor zero_points, int axis, ScalarType dtype) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, ScalarType>(self, scales, zero_points, axis, dtype);\n#endif\n}\n", "static inline Tensor dequantize(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::dequantize(self);\n            break;\n        default:\n            AT_ERROR(\"dequantize not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::dequantize\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline double q_scale(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::q_scale(self);\n            break;\n        default:\n            AT_ERROR(\"q_scale not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::q_scale\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<double, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline int64_t q_zero_point(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::q_zero_point(self);\n            break;\n        default:\n            AT_ERROR(\"q_zero_point not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::q_zero_point\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<int64_t, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor q_per_channel_scales(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::q_per_channel_scales(self);\n            break;\n        default:\n            AT_ERROR(\"q_per_channel_scales not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::q_per_channel_scales\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor q_per_channel_zero_points(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::q_per_channel_zero_points(self);\n            break;\n        default:\n            AT_ERROR(\"q_per_channel_zero_points not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::q_per_channel_zero_points\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline int64_t q_per_channel_axis(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::q_per_channel_axis(self);\n            break;\n        default:\n            AT_ERROR(\"q_per_channel_axis not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::q_per_channel_axis(Tensor self) -> int\");\n    return table->callUnboxed<int64_t, const Tensor &>(self);\n#endif\n}\n", "static inline Tensor int_repr(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::int_repr(self);\n            break;\n        default:\n            AT_ERROR(\"int_repr not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::int_repr\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor _make_per_tensor_quantized_tensor(const Tensor & self, double scale, int64_t zero_point) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_make_per_tensor_quantized_tensor(self, scale, zero_point);\n            break;\n        default:\n            AT_ERROR(\"_make_per_tensor_quantized_tensor not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_make_per_tensor_quantized_tensor\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, double, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, scale, zero_point);\n#endif\n}\n", "static inline Tensor _make_per_channel_quantized_tensor(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, scale, zero_point)))) {\n        case Backend::CPU:\n            return CPUType::_make_per_channel_quantized_tensor(self, scale, zero_point, axis);\n            break;\n        default:\n            AT_ERROR(\"_make_per_channel_quantized_tensor not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, scale, zero_point)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_make_per_channel_quantized_tensor\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, scale, zero_point)), self, scale, zero_point, axis);\n#endif\n}\n", "static inline Tensor fake_quantize_per_tensor_affine(const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::fake_quantize_per_tensor_affine(self, scale, zero_point, quant_min, quant_max);\n            break;\n        default:\n            AT_ERROR(\"fake_quantize_per_tensor_affine not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fake_quantize_per_tensor_affine\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, double, int64_t, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, scale, zero_point, quant_min, quant_max);\n#endif\n}\n", "static inline Tensor fake_quantize_per_tensor_affine_backward(const Tensor & grad, const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, self)))) {\n        case Backend::CPU:\n            return CPUType::fake_quantize_per_tensor_affine_backward(grad, self, scale, zero_point, quant_min, quant_max);\n            break;\n        default:\n            AT_ERROR(\"fake_quantize_per_tensor_affine_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fake_quantize_per_tensor_affine_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, double, int64_t, int64_t, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, self)), grad, self, scale, zero_point, quant_min, quant_max);\n#endif\n}\n", "static inline Tensor fake_quantize_per_channel_affine(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, scale, zero_point)))) {\n        case Backend::CPU:\n            return CPUType::fake_quantize_per_channel_affine(self, scale, zero_point, axis, quant_min, quant_max);\n            break;\n        default:\n            AT_ERROR(\"fake_quantize_per_channel_affine not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, scale, zero_point)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::fake_quantize_per_channel_affine(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t>(self, scale, zero_point, axis, quant_min, quant_max);\n#endif\n}\n", "static inline Tensor fake_quantize_per_channel_affine_backward(const Tensor & grad, const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, self, scale, zero_point)))) {\n        case Backend::CPU:\n            return CPUType::fake_quantize_per_channel_affine_backward(grad, self, scale, zero_point, axis, quant_min, quant_max);\n            break;\n        default:\n            AT_ERROR(\"fake_quantize_per_channel_affine_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad, self, scale, zero_point)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::fake_quantize_per_channel_affine_backward(Tensor grad, Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t>(grad, self, scale, zero_point, axis, quant_min, quant_max);\n#endif\n}\n", "static inline std::vector<Tensor> meshgrid(TensorList tensors) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::meshgrid(tensors);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::meshgrid\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::vector<Tensor>, TensorList>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(tensors)), tensors);\n#endif\n}\n", "static inline Tensor cartesian_prod(TensorList tensors) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cartesian_prod(tensors);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cartesian_prod\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, TensorList>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(tensors)), tensors);\n#endif\n}\n", "static inline Tensor combinations(const Tensor & self, int64_t r, bool with_replacement) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::combinations(self, r, with_replacement);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::combinations\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, r, with_replacement);\n#endif\n}\n", "static inline ScalarType result_type(const Tensor & tensor, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::result_type(tensor, other);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::result_type.Tensor(Tensor tensor, Tensor other) -> ScalarType\");\n    return table->callUnboxed<ScalarType, const Tensor &, const Tensor &>(tensor, other);\n#endif\n}\n", "static inline ScalarType result_type(const Tensor & tensor, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::result_type(tensor, other);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::result_type.Scalar(Tensor tensor, Scalar other) -> ScalarType\");\n    return table->callUnboxed<ScalarType, const Tensor &, Scalar>(tensor, other);\n#endif\n}\n", "static inline ScalarType result_type(Scalar scalar, const Tensor & tensor) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::result_type(scalar, tensor);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::result_type.Scalar_Tensor(Scalar scalar, Tensor tensor) -> ScalarType\");\n    return table->callUnboxed<ScalarType, Scalar, const Tensor &>(scalar, tensor);\n#endif\n}\n", "static inline ScalarType result_type(Scalar scalar1, Scalar scalar2) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::result_type(scalar1, scalar2);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::result_type.Scalar_Scalar(Scalar scalar1, Scalar scalar2) -> ScalarType\");\n    return table->callUnboxed<ScalarType, Scalar, Scalar>(scalar1, scalar2);\n#endif\n}\n", "static inline bool can_cast(ScalarType from, ScalarType to) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::can_cast(from, to);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::can_cast(ScalarType from, ScalarType to) -> bool\");\n    return table->callUnboxed<bool, ScalarType, ScalarType>(from, to);\n#endif\n}\n", "static inline ScalarType promote_types(ScalarType type1, ScalarType type2) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::promote_types(type1, type2);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::promote_types(ScalarType type1, ScalarType type2) -> ScalarType\");\n    return table->callUnboxed<ScalarType, ScalarType, ScalarType>(type1, type2);\n#endif\n}\n", "static inline Scalar _local_scalar_dense(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_local_scalar_dense(self);\n            break;\n        default:\n            AT_ERROR(\"_local_scalar_dense not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_local_scalar_dense\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Scalar, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> _thnn_fused_lstm_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & cx, const Tensor & input_bias, const Tensor & hidden_bias) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input_gates, hidden_gates, cx, input_bias, hidden_bias)))) {\n    \n        default:\n            AT_ERROR(\"_thnn_fused_lstm_cell not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input_gates, hidden_gates, cx, input_bias, hidden_bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_thnn_fused_lstm_cell(Tensor input_gates, Tensor hidden_gates, Tensor cx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &>(input_gates, hidden_gates, cx, input_bias, hidden_bias);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & cx, const Tensor & cy, const Tensor & workspace, bool has_bias) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_hy, grad_cy, cx, cy, workspace)))) {\n    \n        default:\n            AT_ERROR(\"_thnn_fused_lstm_cell_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_hy, grad_cy, cx, cy, workspace)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_thnn_fused_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor cx, Tensor cy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool>(grad_hy, grad_cy, cx, cy, workspace, has_bias);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & input_bias, const Tensor & hidden_bias, const Tensor & cx, const Tensor & cy) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_thnn_differentiable_lstm_cell_backward(grad_hy, grad_cy, input_gates, hidden_gates, input_bias, hidden_bias, cx, cy);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_thnn_differentiable_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor input_gates, Tensor hidden_gates, Tensor? input_bias, Tensor? hidden_bias, Tensor cx, Tensor cy) -> (Tensor, Tensor, Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &>(grad_hy, grad_cy, input_gates, hidden_gates, input_bias, hidden_bias, cx, cy);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> _thnn_fused_gru_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input_gates, hidden_gates, hx, input_bias, hidden_bias)))) {\n    \n        default:\n            AT_ERROR(\"_thnn_fused_gru_cell not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(input_gates, hidden_gates, hx, input_bias, hidden_bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_thnn_fused_gru_cell(Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &>(input_gates, hidden_gates, hx, input_bias, hidden_bias);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_gru_cell_backward(const Tensor & grad_hy, const Tensor & workspace, bool has_bias) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_hy, workspace)))) {\n    \n        default:\n            AT_ERROR(\"_thnn_fused_gru_cell_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_hy, workspace)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_thnn_fused_gru_cell_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_hy, workspace)), grad_hy, workspace, has_bias);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_gru_cell_backward(const Tensor & grad_hy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_thnn_differentiable_gru_cell_backward(grad_hy, input_gates, hidden_gates, hx, input_bias, hidden_bias);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_thnn_differentiable_gru_cell_backward(Tensor grad_hy, Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias, Tensor? hidden_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &>(grad_hy, input_gates, hidden_gates, hx, input_bias, hidden_bias);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::lstm(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::lstm\", \"input\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, hx, params)), input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::lstm(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::lstm\", \"data\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(data, batch_sizes, hx, params)), data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::gru(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::gru\", \"input\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, hx, params)), input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::gru(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::gru\", \"data\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(data, batch_sizes, hx, params)), data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rnn_tanh(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::rnn_tanh\", \"input\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, hx, params)), input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rnn_tanh(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::rnn_tanh\", \"data\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(data, batch_sizes, hx, params)), data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> rnn_relu(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rnn_relu(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::rnn_relu\", \"input\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, hx, params)), input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> rnn_relu(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rnn_relu(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::rnn_relu\", \"data\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(data, batch_sizes, hx, params)), data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::lstm_cell(input, hx, w_ih, w_hh, b_ih, b_hh);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, TensorList, const Tensor &, const Tensor &, const Tensor &, const Tensor &>(input, hx, w_ih, w_hh, b_ih, b_hh);\n#endif\n}\n", "static inline Tensor gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::gru_cell(input, hx, w_ih, w_hh, b_ih, b_hh);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &>(input, hx, w_ih, w_hh, b_ih, b_hh);\n#endif\n}\n", "static inline Tensor rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rnn_tanh_cell(input, hx, w_ih, w_hh, b_ih, b_hh);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &>(input, hx, w_ih, w_hh, b_ih, b_hh);\n#endif\n}\n", "static inline Tensor rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::rnn_relu_cell(input, hx, w_ih, w_hh, b_ih, b_hh);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &>(input, hx, w_ih, w_hh, b_ih, b_hh);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> quantized_lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first, c10::optional<ScalarType> dtype, bool use_dynamic) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::quantized_lstm(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first, dtype, use_dynamic);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::quantized_lstm(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, *, ScalarType? dtype=None, bool use_dynamic=False) -> (Tensor, Tensor, Tensor)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool, bool, c10::optional<ScalarType>, bool>(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first, dtype, use_dynamic);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> quantized_gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::quantized_gru(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::quantized_gru\", \"input\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, hx, params)), input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> quantized_gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::quantized_gru(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::quantized_gru\", \"data\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(data, batch_sizes, hx, params)), data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> quantized_lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::quantized_lstm_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::quantized_lstm_cell\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, TensorList, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh)), input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);\n#endif\n}\n", "static inline Tensor quantized_gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::quantized_gru_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::quantized_gru_cell\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh)), input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);\n#endif\n}\n", "static inline Tensor quantized_rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::quantized_rnn_relu_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::quantized_rnn_relu_cell\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh)), input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);\n#endif\n}\n", "static inline Tensor quantized_rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::quantized_rnn_tanh_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::quantized_rnn_tanh_cell\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh)), input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> _pack_padded_sequence(const Tensor & input, const Tensor & lengths, bool batch_first) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_pack_padded_sequence(input, lengths, batch_first);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_pack_padded_sequence\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(input, lengths)), input, lengths, batch_first);\n#endif\n}\n", "static inline Tensor _pack_padded_sequence_backward(const Tensor & grad, IntArrayRef input_size, const Tensor & batch_sizes, bool batch_first) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_pack_padded_sequence_backward(grad, input_size, batch_sizes, batch_first);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_pack_padded_sequence_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad, batch_sizes)), grad, input_size, batch_sizes, batch_first);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> _pad_packed_sequence(const Tensor & data, const Tensor & batch_sizes, bool batch_first, Scalar padding_value, int64_t total_length) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_pad_packed_sequence(data, batch_sizes, batch_first, padding_value, total_length);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_pad_packed_sequence\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, bool, Scalar, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(data, batch_sizes)), data, batch_sizes, batch_first, padding_value, total_length);\n#endif\n}\n", "static inline Tensor masked_fill(const Tensor & self, const Tensor & mask, Scalar value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::masked_fill(self, mask, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::masked_fill\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mask)), self, mask, value);\n#endif\n}\n", "static inline Tensor masked_fill(const Tensor & self, const Tensor & mask, const Tensor & value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::masked_fill(self, mask, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::masked_fill\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mask, value)), self, mask, value);\n#endif\n}\n", "static inline Tensor masked_scatter(const Tensor & self, const Tensor & mask, const Tensor & source) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::masked_scatter(self, mask, source);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::masked_scatter\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mask, source)), self, mask, source);\n#endif\n}\n", "static inline Tensor index_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_add(self, dim, index, source);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::index_add\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, index, source)), self, dim, index, source);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor index_add(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_add(self, dim, index, source);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(self, dim, index, source);\n#endif\n}\n#endif", "static inline Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_fill(self, dim, index, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::index_fill\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, index)), self, dim, index, value);\n#endif\n}\n", "static inline Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_fill(self, dim, index, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::index_fill\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, index, value)), self, dim, index, value);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor index_fill(const Tensor & self, Dimname dim, const Tensor & index, Scalar value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_fill(self, dim, index, value);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_fill.dimname_Scalar(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, const Tensor &, Scalar>(self, dim, index, value);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor index_fill(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_fill(self, dim, index, value);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_fill.dimname_Tensor(Tensor self, Dimname dim, Tensor index, Tensor value) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(self, dim, index, value);\n#endif\n}\n#endif", "static inline Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::scatter(self, dim, index, src);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::scatter\", \"src\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, index, src)), self, dim, index, src);\n#endif\n}\n", "static inline Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::scatter(self, dim, index, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::scatter\", \"value\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, index)), self, dim, index, value);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor scatter(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::scatter(self, dim, index, src);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::scatter.dimname_src(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(self, dim, index, src);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor scatter(const Tensor & self, Dimname dim, const Tensor & index, Scalar value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::scatter(self, dim, index, value);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::scatter.dimname_value(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, const Tensor &, Scalar>(self, dim, index, value);\n#endif\n}\n#endif", "static inline Tensor scatter_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::scatter_add(self, dim, index, src);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::scatter_add\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, index, src)), self, dim, index, src);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor scatter_add(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::scatter_add(self, dim, index, src);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::scatter_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(self, dim, index, src);\n#endif\n}\n#endif", "static inline Tensor __and__(const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::__and__(self, other);\n            break;\n        default:\n            AT_ERROR(\"__and__ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::__and__\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, other);\n#endif\n}\n", "static inline Tensor __and__(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::__and__(self, other);\n            break;\n        default:\n            AT_ERROR(\"__and__ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::__and__\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor __or__(const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::__or__(self, other);\n            break;\n        default:\n            AT_ERROR(\"__or__ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::__or__\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, other);\n#endif\n}\n", "static inline Tensor __or__(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::__or__(self, other);\n            break;\n        default:\n            AT_ERROR(\"__or__ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::__or__\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor __xor__(const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::__xor__(self, other);\n            break;\n        default:\n            AT_ERROR(\"__xor__ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::__xor__\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, other);\n#endif\n}\n", "static inline Tensor __xor__(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::__xor__(self, other);\n            break;\n        default:\n            AT_ERROR(\"__xor__ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::__xor__\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor __lshift__(const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::__lshift__(self, other);\n            break;\n        default:\n            AT_ERROR(\"__lshift__ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::__lshift__\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, other);\n#endif\n}\n", "static inline Tensor __lshift__(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::__lshift__(self, other);\n            break;\n        default:\n            AT_ERROR(\"__lshift__ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::__lshift__\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor __rshift__(const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::__rshift__(self, other);\n            break;\n        default:\n            AT_ERROR(\"__rshift__ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::__rshift__\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, other);\n#endif\n}\n", "static inline Tensor __rshift__(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::__rshift__(self, other);\n            break;\n        default:\n            AT_ERROR(\"__rshift__ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::__rshift__\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor & addbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, batch1, batch2)))) {\n        case Backend::CPU:\n            return CPUType::addbmm_out(out, self, batch1, batch2, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"addbmm_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, batch1, batch2)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::addbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(out, self, batch1, batch2, beta, alpha);\n#endif\n}\n", "static inline Tensor addbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, batch1, batch2)))) {\n        case Backend::CPU:\n            return CPUType::addbmm(self, batch1, batch2, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"addbmm not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, batch1, batch2)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::addbmm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, batch1, batch2)), self, batch1, batch2, beta, alpha);\n#endif\n}\n", "static inline Tensor & diag_out(Tensor & out, const Tensor & self, int64_t diagonal) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::diag_out(out, self, diagonal);\n            break;\n        default:\n            AT_ERROR(\"diag_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::diag.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, int64_t>(out, self, diagonal);\n#endif\n}\n", "static inline Tensor diag(const Tensor & self, int64_t diagonal) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::diag(self, diagonal);\n            break;\n        default:\n            AT_ERROR(\"diag not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::diag\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, diagonal);\n#endif\n}\n", "static inline Tensor & cross_out(Tensor & out, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cross_out(out, self, other, dim);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cross.out(Tensor self, Tensor other, int? dim=None, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, c10::optional<int64_t>>(out, self, other, dim);\n#endif\n}\n", "static inline Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cross(self, other, dim);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cross\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, c10::optional<int64_t>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other, dim);\n#endif\n}\n", "static inline Tensor & triu_out(Tensor & out, const Tensor & self, int64_t diagonal) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::triu_out(out, self, diagonal);\n            break;\n        default:\n            AT_ERROR(\"triu_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::triu.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, int64_t>(out, self, diagonal);\n#endif\n}\n", "static inline Tensor triu(const Tensor & self, int64_t diagonal) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::triu(self, diagonal);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::triu\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, diagonal);\n#endif\n}\n", "static inline Tensor & tril_out(Tensor & out, const Tensor & self, int64_t diagonal) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::tril_out(out, self, diagonal);\n            break;\n        default:\n            AT_ERROR(\"tril_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::tril.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, int64_t>(out, self, diagonal);\n#endif\n}\n", "static inline Tensor tril(const Tensor & self, int64_t diagonal) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::tril(self, diagonal);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::tril\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, diagonal);\n#endif\n}\n", "static inline Tensor tril_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(options)))) {\n        case Backend::CPU:\n            return CPUType::tril_indices(row, col, offset, options);\n            break;\n        default:\n            AT_ERROR(\"tril_indices not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(options)));\n    }\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::tril_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, int64_t, int64_t, const TensorOptions &>(row, col, offset, options);\n#endif\n}\n", "static inline Tensor triu_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(options)))) {\n        case Backend::CPU:\n            return CPUType::triu_indices(row, col, offset, options);\n            break;\n        default:\n            AT_ERROR(\"triu_indices not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(options)));\n    }\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::triu_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, int64_t, int64_t, int64_t, const TensorOptions &>(row, col, offset, options);\n#endif\n}\n", "static inline Tensor trace(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::trace(self);\n            break;\n        default:\n            AT_ERROR(\"trace not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::trace\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & ne_out(Tensor & out, const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::ne_out(out, self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::ne_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"ne_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::ne.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar>(out, self, other);\n#endif\n}\n", "static inline Tensor ne(const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::ne(self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::ne(self, other);\n            break;\n        default:\n            AT_ERROR(\"ne not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::ne\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, other);\n#endif\n}\n", "static inline Tensor & ne_out(Tensor & out, const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, other)))) {\n        case Backend::CPU:\n            return CPUType::ne_out(out, self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::ne_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"ne_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, other)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::ne.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, other);\n#endif\n}\n", "static inline Tensor ne(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::ne(self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::ne(self, other);\n            break;\n        default:\n            AT_ERROR(\"ne not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::ne\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor & eq_out(Tensor & out, const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::eq_out(out, self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::eq_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"eq_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::eq.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar>(out, self, other);\n#endif\n}\n", "static inline Tensor eq(const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::eq(self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::eq(self, other);\n            break;\n        default:\n            AT_ERROR(\"eq not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::eq\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, other);\n#endif\n}\n", "static inline Tensor & eq_out(Tensor & out, const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, other)))) {\n        case Backend::CPU:\n            return CPUType::eq_out(out, self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::eq_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"eq_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, other)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::eq.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, other);\n#endif\n}\n", "static inline Tensor eq(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::eq(self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::eq(self, other);\n            break;\n        default:\n            AT_ERROR(\"eq not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::eq\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor & ge_out(Tensor & out, const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::ge_out(out, self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::ge_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"ge_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::ge.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar>(out, self, other);\n#endif\n}\n", "static inline Tensor ge(const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::ge(self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::ge(self, other);\n            break;\n        default:\n            AT_ERROR(\"ge not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::ge\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, other);\n#endif\n}\n", "static inline Tensor & ge_out(Tensor & out, const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, other)))) {\n        case Backend::CPU:\n            return CPUType::ge_out(out, self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::ge_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"ge_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, other)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::ge.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, other);\n#endif\n}\n", "static inline Tensor ge(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::ge(self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::ge(self, other);\n            break;\n        default:\n            AT_ERROR(\"ge not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::ge\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor & le_out(Tensor & out, const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::le_out(out, self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::le_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"le_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::le.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar>(out, self, other);\n#endif\n}\n", "static inline Tensor le(const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::le(self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::le(self, other);\n            break;\n        default:\n            AT_ERROR(\"le not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::le\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, other);\n#endif\n}\n", "static inline Tensor & le_out(Tensor & out, const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, other)))) {\n        case Backend::CPU:\n            return CPUType::le_out(out, self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::le_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"le_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, other)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::le.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, other);\n#endif\n}\n", "static inline Tensor le(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::le(self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::le(self, other);\n            break;\n        default:\n            AT_ERROR(\"le not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::le\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor & gt_out(Tensor & out, const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::gt_out(out, self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::gt_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"gt_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::gt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar>(out, self, other);\n#endif\n}\n", "static inline Tensor gt(const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::gt(self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::gt(self, other);\n            break;\n        default:\n            AT_ERROR(\"gt not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::gt\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, other);\n#endif\n}\n", "static inline Tensor & gt_out(Tensor & out, const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, other)))) {\n        case Backend::CPU:\n            return CPUType::gt_out(out, self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::gt_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"gt_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, other)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::gt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, other);\n#endif\n}\n", "static inline Tensor gt(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::gt(self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::gt(self, other);\n            break;\n        default:\n            AT_ERROR(\"gt not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::gt\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor & lt_out(Tensor & out, const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::lt_out(out, self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::lt_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"lt_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::lt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar>(out, self, other);\n#endif\n}\n", "static inline Tensor lt(const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::lt(self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::lt(self, other);\n            break;\n        default:\n            AT_ERROR(\"lt not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::lt\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, other);\n#endif\n}\n", "static inline Tensor & lt_out(Tensor & out, const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, other)))) {\n        case Backend::CPU:\n            return CPUType::lt_out(out, self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::lt_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"lt_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, other)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::lt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, other);\n#endif\n}\n", "static inline Tensor lt(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::lt(self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::lt(self, other);\n            break;\n        default:\n            AT_ERROR(\"lt not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::lt\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor & take_out(Tensor & out, const Tensor & self, const Tensor & index) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, index)))) {\n        case Backend::CPU:\n            return CPUType::take_out(out, self, index);\n            break;\n        default:\n            AT_ERROR(\"take_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, index)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::take.out(Tensor self, Tensor index, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, index);\n#endif\n}\n", "static inline Tensor take(const Tensor & self, const Tensor & index) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, index)))) {\n        case Backend::CPU:\n            return CPUType::take(self, index);\n            break;\n        default:\n            AT_ERROR(\"take not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, index)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::take\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, index)), self, index);\n#endif\n}\n", "static inline Tensor & index_select_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, index)))) {\n        case Backend::CPU:\n            return CPUType::index_select_out(out, self, dim, index);\n            break;\n        default:\n            AT_ERROR(\"index_select_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, index)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_select.out(Tensor self, int dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, int64_t, const Tensor &>(out, self, dim, index);\n#endif\n}\n", "static inline Tensor index_select(const Tensor & self, int64_t dim, const Tensor & index) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, index)))) {\n        case Backend::CPU:\n            return CPUType::index_select(self, dim, index);\n            break;\n        case Backend::SparseCPU:\n            return SparseCPUType::index_select(self, dim, index);\n            break;\n        default:\n            AT_ERROR(\"index_select not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, index)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::index_select\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, index)), self, dim, index);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & index_select_out(Tensor & out, const Tensor & self, Dimname dim, const Tensor & index) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_select_out(out, self, dim, index);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_select.dimname_out(Tensor self, Dimname dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Dimname, const Tensor &>(out, self, dim, index);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor index_select(const Tensor & self, Dimname dim, const Tensor & index) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::index_select(self, dim, index);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::index_select.dimname(Tensor self, Dimname dim, Tensor index) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, const Tensor &>(self, dim, index);\n#endif\n}\n#endif", "static inline Tensor & masked_select_out(Tensor & out, const Tensor & self, const Tensor & mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, mask)))) {\n        case Backend::CPU:\n            return CPUType::masked_select_out(out, self, mask);\n            break;\n        default:\n            AT_ERROR(\"masked_select_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, mask)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::masked_select.out(Tensor self, Tensor mask, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, mask);\n#endif\n}\n", "static inline Tensor masked_select(const Tensor & self, const Tensor & mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mask)))) {\n        case Backend::CPU:\n            return CPUType::masked_select(self, mask);\n            break;\n        default:\n            AT_ERROR(\"masked_select not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, mask)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::masked_select\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, mask)), self, mask);\n#endif\n}\n", "static inline Tensor & nonzero_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::nonzero_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"nonzero_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::nonzero.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor nonzero(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::nonzero(self);\n            break;\n        default:\n            AT_ERROR(\"nonzero not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::nonzero\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline std::vector<Tensor> nonzero_numpy(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::nonzero_numpy(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::nonzero_numpy\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::vector<Tensor>, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & gather_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, index)))) {\n        case Backend::CPU:\n            return CPUType::gather_out(out, self, dim, index, sparse_grad);\n            break;\n        default:\n            AT_ERROR(\"gather_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, index)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::gather.out(Tensor self, int dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, int64_t, const Tensor &, bool>(out, self, dim, index, sparse_grad);\n#endif\n}\n", "static inline Tensor gather(const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, index)))) {\n        case Backend::CPU:\n            return CPUType::gather(self, dim, index, sparse_grad);\n            break;\n        default:\n            AT_ERROR(\"gather not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, index)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::gather\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, index)), self, dim, index, sparse_grad);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor & gather_out(Tensor & out, const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::gather_out(out, self, dim, index, sparse_grad);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::gather.dimname_out(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Dimname, const Tensor &, bool>(out, self, dim, index, sparse_grad);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor gather(const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::gather(self, dim, index, sparse_grad);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::gather.dimname(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, const Tensor &, bool>(self, dim, index, sparse_grad);\n#endif\n}\n#endif", "static inline Tensor _gather_sparse_backward(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & grad) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::_gather_sparse_backward(self, dim, index, grad);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_gather_sparse_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, index, grad)), self, dim, index, grad);\n#endif\n}\n", "static inline Tensor & addcmul_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::addcmul_out(out, self, tensor1, tensor2, value);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::addcmul.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar>(out, self, tensor1, tensor2, value);\n#endif\n}\n", "static inline Tensor addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::addcmul(self, tensor1, tensor2, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::addcmul\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, tensor1, tensor2)), self, tensor1, tensor2, value);\n#endif\n}\n", "static inline Tensor & addcdiv_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::addcdiv_out(out, self, tensor1, tensor2, value);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::addcdiv.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar>(out, self, tensor1, tensor2, value);\n#endif\n}\n", "static inline Tensor addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::addcdiv(self, tensor1, tensor2, value);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::addcdiv\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, tensor1, tensor2)), self, tensor1, tensor2, value);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> lstsq_out(Tensor & X, Tensor & qr, const Tensor & self, const Tensor & A) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(X, qr, self, A)))) {\n        case Backend::CPU:\n            return CPUType::lstsq_out(X, qr, self, A);\n            break;\n        default:\n            AT_ERROR(\"lstsq_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(X, qr, self, A)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::lstsq.X(Tensor self, Tensor A, *, Tensor(a!) X, Tensor(b!) qr) -> (Tensor(a!) solution, Tensor(b!) QR)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, const Tensor &>(X, qr, self, A);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> lstsq(const Tensor & self, const Tensor & A) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, A)))) {\n        case Backend::CPU:\n            return CPUType::lstsq(self, A);\n            break;\n        default:\n            AT_ERROR(\"lstsq not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, A)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::lstsq\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, A)), self, A);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> triangular_solve_out(Tensor & X, Tensor & M, const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::triangular_solve_out(X, M, self, A, upper, transpose, unitriangular);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::triangular_solve.X(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False, *, Tensor(a!) X, Tensor(b!) M) -> (Tensor(a!) solution, Tensor(b!) cloned_coefficient)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, const Tensor &, bool, bool, bool>(X, M, self, A, upper, transpose, unitriangular);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> triangular_solve(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::triangular_solve(self, A, upper, transpose, unitriangular);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::triangular_solve\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, bool, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, A)), self, A, upper, transpose, unitriangular);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> _triangular_solve_helper(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, A)))) {\n        case Backend::CPU:\n            return CPUType::_triangular_solve_helper(self, A, upper, transpose, unitriangular);\n            break;\n        default:\n            AT_ERROR(\"_triangular_solve_helper not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, A)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_triangular_solve_helper\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, bool, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, A)), self, A, upper, transpose, unitriangular);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> symeig_out(Tensor & e, Tensor & V, const Tensor & self, bool eigenvectors, bool upper) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::symeig_out(e, V, self, eigenvectors, upper);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::symeig.e(Tensor self, bool eigenvectors=False, bool upper=True, *, Tensor(a!) e, Tensor(b!) V) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, bool, bool>(e, V, self, eigenvectors, upper);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> symeig(const Tensor & self, bool eigenvectors, bool upper) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::symeig(self, eigenvectors, upper);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::symeig\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, eigenvectors, upper);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> _symeig_helper(const Tensor & self, bool eigenvectors, bool upper) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_symeig_helper(self, eigenvectors, upper);\n            break;\n        default:\n            AT_ERROR(\"_symeig_helper not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_symeig_helper\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, eigenvectors, upper);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> eig_out(Tensor & e, Tensor & v, const Tensor & self, bool eigenvectors) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(e, v, self)))) {\n        case Backend::CPU:\n            return CPUType::eig_out(e, v, self, eigenvectors);\n            break;\n        default:\n            AT_ERROR(\"eig_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(e, v, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::eig.e(Tensor self, bool eigenvectors=False, *, Tensor(a!) e, Tensor(b!) v) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, bool>(e, v, self, eigenvectors);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> eig(const Tensor & self, bool eigenvectors) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::eig(self, eigenvectors);\n            break;\n        default:\n            AT_ERROR(\"eig not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::eig\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, eigenvectors);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &,Tensor &> svd_out(Tensor & U, Tensor & S, Tensor & V, const Tensor & self, bool some, bool compute_uv) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::svd_out(U, S, V, self, some, compute_uv);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::svd.U(Tensor self, bool some=True, bool compute_uv=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) V) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) V)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &,Tensor &>, Tensor &, Tensor &, Tensor &, const Tensor &, bool, bool>(U, S, V, self, some, compute_uv);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> svd(const Tensor & self, bool some, bool compute_uv) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::svd(self, some, compute_uv);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::svd\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, some, compute_uv);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> _svd_helper(const Tensor & self, bool some, bool compute_uv) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_svd_helper(self, some, compute_uv);\n            break;\n        default:\n            AT_ERROR(\"_svd_helper not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_svd_helper\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, some, compute_uv);\n#endif\n}\n", "static inline Tensor & cholesky_out(Tensor & out, const Tensor & self, bool upper) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cholesky_out(out, self, upper);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cholesky.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, bool>(out, self, upper);\n#endif\n}\n", "static inline Tensor cholesky(const Tensor & self, bool upper) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cholesky(self, upper);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cholesky\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, upper);\n#endif\n}\n", "static inline Tensor _cholesky_helper(const Tensor & self, bool upper) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_cholesky_helper(self, upper);\n            break;\n        default:\n            AT_ERROR(\"_cholesky_helper not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_cholesky_helper\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, upper);\n#endif\n}\n", "static inline Tensor & cholesky_solve_out(Tensor & out, const Tensor & self, const Tensor & input2, bool upper) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cholesky_solve_out(out, self, input2, upper);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cholesky_solve.out(Tensor self, Tensor input2, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, bool>(out, self, input2, upper);\n#endif\n}\n", "static inline Tensor cholesky_solve(const Tensor & self, const Tensor & input2, bool upper) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::cholesky_solve(self, input2, upper);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cholesky_solve\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, input2)), self, input2, upper);\n#endif\n}\n", "static inline Tensor _cholesky_solve_helper(const Tensor & self, const Tensor & A, bool upper) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, A)))) {\n        case Backend::CPU:\n            return CPUType::_cholesky_solve_helper(self, A, upper);\n            break;\n        default:\n            AT_ERROR(\"_cholesky_solve_helper not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, A)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_cholesky_solve_helper\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, A)), self, A, upper);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> solve(const Tensor & self, const Tensor & A) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::solve(self, A);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::solve\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, A)), self, A);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> solve_out(Tensor & solution, Tensor & lu, const Tensor & self, const Tensor & A) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::solve_out(solution, lu, self, A);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::solve.solution(Tensor self, Tensor A, *, Tensor(a!) solution, Tensor(b!) lu) -> (Tensor(a!) solution, Tensor(b!) LU)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, const Tensor &>(solution, lu, self, A);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> _solve_helper(const Tensor & self, const Tensor & A) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, A)))) {\n        case Backend::CPU:\n            return CPUType::_solve_helper(self, A);\n            break;\n        default:\n            AT_ERROR(\"_solve_helper not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, A)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_solve_helper\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, A)), self, A);\n#endif\n}\n", "static inline Tensor & cholesky_inverse_out(Tensor & out, const Tensor & self, bool upper) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::cholesky_inverse_out(out, self, upper);\n            break;\n        default:\n            AT_ERROR(\"cholesky_inverse_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::cholesky_inverse.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, bool>(out, self, upper);\n#endif\n}\n", "static inline Tensor cholesky_inverse(const Tensor & self, bool upper) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::cholesky_inverse(self, upper);\n            break;\n        default:\n            AT_ERROR(\"cholesky_inverse not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::cholesky_inverse\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, upper);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> qr_out(Tensor & Q, Tensor & R, const Tensor & self, bool some) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::qr_out(Q, R, self, some);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::qr.Q(Tensor self, bool some=True, *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, bool>(Q, R, self, some);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> qr(const Tensor & self, bool some) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::qr(self, some);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::qr\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, some);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> _qr_helper(const Tensor & self, bool some) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_qr_helper(self, some);\n            break;\n        default:\n            AT_ERROR(\"_qr_helper not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_qr_helper\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, some);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> geqrf_out(Tensor & a, Tensor & tau, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(a, tau, self)))) {\n        case Backend::CPU:\n            return CPUType::geqrf_out(a, tau, self);\n            break;\n        default:\n            AT_ERROR(\"geqrf_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(a, tau, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::geqrf.a(Tensor self, *, Tensor(a!) a, Tensor(b!) tau) -> (Tensor(a!) a, Tensor(b!) tau)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &>(a, tau, self);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> geqrf(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::geqrf(self);\n            break;\n        default:\n            AT_ERROR(\"geqrf not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::geqrf\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & orgqr_out(Tensor & out, const Tensor & self, const Tensor & input2) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, input2)))) {\n        case Backend::CPU:\n            return CPUType::orgqr_out(out, self, input2);\n            break;\n        default:\n            AT_ERROR(\"orgqr_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, input2)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::orgqr.out(Tensor self, Tensor input2, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, input2);\n#endif\n}\n", "static inline Tensor orgqr(const Tensor & self, const Tensor & input2) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, input2)))) {\n        case Backend::CPU:\n            return CPUType::orgqr(self, input2);\n            break;\n        default:\n            AT_ERROR(\"orgqr not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, input2)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::orgqr\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, input2)), self, input2);\n#endif\n}\n", "static inline Tensor & ormqr_out(Tensor & out, const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, input2, input3)))) {\n        case Backend::CPU:\n            return CPUType::ormqr_out(out, self, input2, input3, left, transpose);\n            break;\n        default:\n            AT_ERROR(\"ormqr_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, input2, input3)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::ormqr.out(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, bool>(out, self, input2, input3, left, transpose);\n#endif\n}\n", "static inline Tensor ormqr(const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, input2, input3)))) {\n        case Backend::CPU:\n            return CPUType::ormqr(self, input2, input3, left, transpose);\n            break;\n        default:\n            AT_ERROR(\"ormqr not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, input2, input3)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::ormqr\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, input2, input3)), self, input2, input3, left, transpose);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> _lu_with_info(const Tensor & self, bool pivot, bool check_errors) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_lu_with_info(self, pivot, check_errors);\n            break;\n        default:\n            AT_ERROR(\"_lu_with_info not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_lu_with_info\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, pivot, check_errors);\n#endif\n}\n", "static inline Tensor & lu_solve_out(Tensor & out, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::lu_solve_out(out, self, LU_data, LU_pivots);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::lu_solve.out(Tensor self, Tensor LU_data, Tensor LU_pivots, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &>(out, self, LU_data, LU_pivots);\n#endif\n}\n", "static inline Tensor lu_solve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::lu_solve(self, LU_data, LU_pivots);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::lu_solve\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, LU_data, LU_pivots)), self, LU_data, LU_pivots);\n#endif\n}\n", "static inline Tensor _lu_solve_helper(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, LU_data, LU_pivots)))) {\n        case Backend::CPU:\n            return CPUType::_lu_solve_helper(self, LU_data, LU_pivots);\n            break;\n        default:\n            AT_ERROR(\"_lu_solve_helper not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, LU_data, LU_pivots)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_lu_solve_helper\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, LU_data, LU_pivots)), self, LU_data, LU_pivots);\n#endif\n}\n", "static inline Tensor & multinomial_out(Tensor & out, const Tensor & self, int64_t num_samples, bool replacement, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::multinomial_out(out, self, num_samples, replacement, generator);\n            break;\n        default:\n            AT_ERROR(\"multinomial_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::multinomial.out(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, int64_t, bool, Generator *>(out, self, num_samples, replacement, generator);\n#endif\n}\n", "static inline Tensor multinomial(const Tensor & self, int64_t num_samples, bool replacement, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::multinomial(self, num_samples, replacement, generator);\n            break;\n        default:\n            AT_ERROR(\"multinomial not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::multinomial\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, int64_t, bool, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, num_samples, replacement, generator);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> _multinomial_alias_setup(const Tensor & probs) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(probs)))) {\n        case Backend::CPU:\n            return CPUType::_multinomial_alias_setup(probs);\n            break;\n        default:\n            AT_ERROR(\"_multinomial_alias_setup not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(probs)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_multinomial_alias_setup\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(probs)), probs);\n#endif\n}\n", "static inline Tensor _multinomial_alias_draw(const Tensor & J, const Tensor & q, int64_t num_samples, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(J, q)))) {\n        case Backend::CPU:\n            return CPUType::_multinomial_alias_draw(J, q, num_samples, generator);\n            break;\n        default:\n            AT_ERROR(\"_multinomial_alias_draw not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(J, q)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_multinomial_alias_draw\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, int64_t, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(J, q)), J, q, num_samples, generator);\n#endif\n}\n", "static inline Tensor & lgamma_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::lgamma_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"lgamma_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::lgamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor lgamma(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::lgamma(self);\n            break;\n        default:\n            AT_ERROR(\"lgamma not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::lgamma\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & digamma_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::digamma_out(out, self);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::digamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor digamma(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::digamma(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::digamma\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & polygamma_out(Tensor & out, int64_t n, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::polygamma_out(out, n, self);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::polygamma.out(int n, Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, int64_t, const Tensor &>(out, n, self);\n#endif\n}\n", "static inline Tensor polygamma(int64_t n, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::polygamma(n, self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::polygamma\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, int64_t, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), n, self);\n#endif\n}\n", "static inline Tensor erfinv(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::erfinv(self);\n            break;\n        default:\n            AT_ERROR(\"erfinv not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::erfinv\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & erfinv_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::erfinv_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"erfinv_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::erfinv.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor sign(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sign(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::sign\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & sign_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::sign_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"sign_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sign.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor dist(const Tensor & self, const Tensor & other, Scalar p) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::dist(self, other, p);\n            break;\n        default:\n            AT_ERROR(\"dist not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::dist\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other, p);\n#endif\n}\n", "static inline Tensor & atan2_out(Tensor & out, const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::atan2_out(out, self, other);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::atan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, other);\n#endif\n}\n", "static inline Tensor atan2(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::atan2(self, other);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::atan2\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor & lerp_out(Tensor & out, const Tensor & self, const Tensor & end, Scalar weight) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, end)))) {\n        case Backend::CPU:\n            return CPUType::lerp_out(out, self, end, weight);\n            break;\n        default:\n            AT_ERROR(\"lerp_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, end)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::lerp.Scalar_out(Tensor self, Tensor end, Scalar weight, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar>(out, self, end, weight);\n#endif\n}\n", "static inline Tensor & lerp_out(Tensor & out, const Tensor & self, const Tensor & end, const Tensor & weight) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, end, weight)))) {\n        case Backend::CPU:\n            return CPUType::lerp_out(out, self, end, weight);\n            break;\n        default:\n            AT_ERROR(\"lerp_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, end, weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::lerp.Tensor_out(Tensor self, Tensor end, Tensor weight, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &>(out, self, end, weight);\n#endif\n}\n", "static inline Tensor lerp(const Tensor & self, const Tensor & end, Scalar weight) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, end)))) {\n        case Backend::CPU:\n            return CPUType::lerp(self, end, weight);\n            break;\n        default:\n            AT_ERROR(\"lerp not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, end)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::lerp\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, end)), self, end, weight);\n#endif\n}\n", "static inline Tensor lerp(const Tensor & self, const Tensor & end, const Tensor & weight) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, end, weight)))) {\n        case Backend::CPU:\n            return CPUType::lerp(self, end, weight);\n            break;\n        default:\n            AT_ERROR(\"lerp not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, end, weight)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::lerp\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, end, weight)), self, end, weight);\n#endif\n}\n", "static inline Tensor & histc_out(Tensor & out, const Tensor & self, int64_t bins, Scalar min, Scalar max) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::histc_out(out, self, bins, min, max);\n            break;\n        default:\n            AT_ERROR(\"histc_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::histc.out(Tensor self, int bins=100, Scalar min=0, Scalar max=0, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, int64_t, Scalar, Scalar>(out, self, bins, min, max);\n#endif\n}\n", "static inline Tensor histc(const Tensor & self, int64_t bins, Scalar min, Scalar max) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::histc(self, bins, min, max);\n            break;\n        default:\n            AT_ERROR(\"histc not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::histc\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, bins, min, max);\n#endif\n}\n", "static inline Tensor & fmod_out(Tensor & out, const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::fmod_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"fmod_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::fmod.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar>(out, self, other);\n#endif\n}\n", "static inline Tensor fmod(const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::fmod(self, other);\n            break;\n        default:\n            AT_ERROR(\"fmod not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fmod\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, other);\n#endif\n}\n", "static inline Tensor & fmod_out(Tensor & out, const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, other)))) {\n        case Backend::CPU:\n            return CPUType::fmod_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"fmod_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, other)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::fmod.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, other);\n#endif\n}\n", "static inline Tensor fmod(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::fmod(self, other);\n            break;\n        default:\n            AT_ERROR(\"fmod not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fmod\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor & remainder_out(Tensor & out, const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::remainder_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"remainder_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::remainder.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar>(out, self, other);\n#endif\n}\n", "static inline Tensor remainder(const Tensor & self, Scalar other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::remainder(self, other);\n            break;\n        default:\n            AT_ERROR(\"remainder not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::remainder\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, other);\n#endif\n}\n", "static inline Tensor & remainder_out(Tensor & out, const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, other)))) {\n        case Backend::CPU:\n            return CPUType::remainder_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"remainder_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, other)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::remainder.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, other);\n#endif\n}\n", "static inline Tensor remainder(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::remainder(self, other);\n            break;\n        default:\n            AT_ERROR(\"remainder not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::remainder\", \"Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor & min_out(Tensor & out, const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, other)))) {\n        case Backend::CPU:\n            return CPUType::min_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"min_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, other)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::min.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, other);\n#endif\n}\n", "static inline Tensor min(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::min(self, other);\n            break;\n        default:\n            AT_ERROR(\"min not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::min\", \"other\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor min(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::min(self);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::min(self);\n            break;\n        default:\n            AT_ERROR(\"min not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::min\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & max_out(Tensor & out, const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, other)))) {\n        case Backend::CPU:\n            return CPUType::max_out(out, self, other);\n            break;\n        default:\n            AT_ERROR(\"max_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, other)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::max.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, other);\n#endif\n}\n", "static inline Tensor max(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::max(self, other);\n            break;\n        default:\n            AT_ERROR(\"max not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::max\", \"other\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor max(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::max(self);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::max(self);\n            break;\n        default:\n            AT_ERROR(\"max not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::max\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor median(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::median(self);\n            break;\n        default:\n            AT_ERROR(\"median not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::median\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> sort_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool descending) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(values, indices, self)))) {\n        case Backend::CPU:\n            return CPUType::sort_out(values, indices, self, dim, descending);\n            break;\n        default:\n            AT_ERROR(\"sort_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(values, indices, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sort.values(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, int64_t, bool>(values, indices, self, dim, descending);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> sort(const Tensor & self, int64_t dim, bool descending) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::sort(self, dim, descending);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::sort(self, dim, descending);\n            break;\n        default:\n            AT_ERROR(\"sort not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::sort\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, descending);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor &,Tensor &> sort_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool descending) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sort_out(values, indices, self, dim, descending);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sort.dimname_values(Tensor self, Dimname dim, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, Dimname, bool>(values, indices, self, dim, descending);\n#endif\n}\n#endif", "#ifdef BUILD_NAMEDTENSOR\nstatic inline std::tuple<Tensor,Tensor> sort(const Tensor & self, Dimname dim, bool descending) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::sort(self, dim, descending);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sort.dimname(Tensor self, Dimname dim, bool descending=False) -> (Tensor values, Tensor indices)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(self, dim, descending);\n#endif\n}\n#endif", "static inline Tensor argsort(const Tensor & self, int64_t dim, bool descending) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::argsort(self, dim, descending);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::argsort\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, descending);\n#endif\n}\n", "#ifdef BUILD_NAMEDTENSOR\nstatic inline Tensor argsort(const Tensor & self, Dimname dim, bool descending) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::argsort(self, dim, descending);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::argsort.dimname(Tensor self, Dimname dim, bool descending=False) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, Dimname, bool>(self, dim, descending);\n#endif\n}\n#endif", "static inline std::tuple<Tensor &,Tensor &> topk_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(values, indices, self)))) {\n        case Backend::CPU:\n            return CPUType::topk_out(values, indices, self, k, dim, largest, sorted);\n            break;\n        default:\n            AT_ERROR(\"topk_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(values, indices, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::topk.values(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True, *, Tensor(a!) values, Tensor(b!) indices) ->(Tensor(a!) values, Tensor(b!) indices)\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, int64_t, int64_t, bool, bool>(values, indices, self, k, dim, largest, sorted);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> topk(const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::topk(self, k, dim, largest, sorted);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::topk(self, k, dim, largest, sorted);\n            break;\n        default:\n            AT_ERROR(\"topk not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::topk\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, int64_t, bool, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, k, dim, largest, sorted);\n#endif\n}\n", "static inline Tensor all(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::all(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::all\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor any(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::any(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::any\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & renorm_out(Tensor & out, const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::renorm_out(out, self, p, dim, maxnorm);\n            break;\n        default:\n            AT_ERROR(\"renorm_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::renorm.out(Tensor self, Scalar p, int dim, Scalar maxnorm, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar, int64_t, Scalar>(out, self, p, dim, maxnorm);\n#endif\n}\n", "static inline Tensor renorm(const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::renorm(self, p, dim, maxnorm);\n            break;\n        default:\n            AT_ERROR(\"renorm not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::renorm\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar, int64_t, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, p, dim, maxnorm);\n#endif\n}\n", "static inline bool equal(const Tensor & self, const Tensor & other) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)))) {\n        case Backend::CPU:\n            return CPUType::equal(self, other);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::equal(self, other);\n            break;\n        default:\n            AT_ERROR(\"equal not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, other)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::equal\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<bool, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, other)), self, other);\n#endif\n}\n", "static inline Tensor & pow_out(Tensor & out, const Tensor & self, const Tensor & exponent) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, exponent)))) {\n        case Backend::CPU:\n            return CPUType::pow_out(out, self, exponent);\n            break;\n        default:\n            AT_ERROR(\"pow_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, exponent)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::pow.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(out, self, exponent);\n#endif\n}\n", "static inline Tensor pow(const Tensor & self, const Tensor & exponent) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, exponent)))) {\n        case Backend::CPU:\n            return CPUType::pow(self, exponent);\n            break;\n        default:\n            AT_ERROR(\"pow not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, exponent)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::pow\", \"Tensor_Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, exponent)), self, exponent);\n#endif\n}\n", "static inline Tensor & pow_out(Tensor & out, Scalar self, const Tensor & exponent) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, exponent)))) {\n        case Backend::CPU:\n            return CPUType::pow_out(out, self, exponent);\n            break;\n        default:\n            AT_ERROR(\"pow_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, exponent)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::pow.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, Scalar, const Tensor &>(out, self, exponent);\n#endif\n}\n", "static inline Tensor pow(Scalar self, const Tensor & exponent) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(exponent)))) {\n        case Backend::CPU:\n            return CPUType::pow(self, exponent);\n            break;\n        default:\n            AT_ERROR(\"pow not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(exponent)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::pow\", \"Scalar\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, Scalar, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(exponent)), self, exponent);\n#endif\n}\n", "static inline Tensor & normal_out(Tensor & out, const Tensor & mean, double std, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, mean)))) {\n        case Backend::CPU:\n            return CPUType::normal_out(out, mean, std, generator);\n            break;\n        default:\n            AT_ERROR(\"normal_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, mean)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::normal.Tensor_float_out(Tensor mean, float std=1, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, double, Generator *>(out, mean, std, generator);\n#endif\n}\n", "static inline Tensor normal(const Tensor & mean, double std, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(mean)))) {\n        case Backend::CPU:\n            return CPUType::normal(mean, std, generator);\n            break;\n        default:\n            AT_ERROR(\"normal not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(mean)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::normal\", \"Tensor_float\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, double, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(mean)), mean, std, generator);\n#endif\n}\n", "static inline Tensor & normal_out(Tensor & out, double mean, const Tensor & std, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, std)))) {\n        case Backend::CPU:\n            return CPUType::normal_out(out, mean, std, generator);\n            break;\n        default:\n            AT_ERROR(\"normal_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, std)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::normal.float_Tensor_out(float mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, double, const Tensor &, Generator *>(out, mean, std, generator);\n#endif\n}\n", "static inline Tensor normal(double mean, const Tensor & std, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(std)))) {\n        case Backend::CPU:\n            return CPUType::normal(mean, std, generator);\n            break;\n        default:\n            AT_ERROR(\"normal not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(std)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::normal\", \"float_Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, double, const Tensor &, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(std)), mean, std, generator);\n#endif\n}\n", "static inline Tensor & normal_out(Tensor & out, const Tensor & mean, const Tensor & std, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, mean, std)))) {\n        case Backend::CPU:\n            return CPUType::normal_out(out, mean, std, generator);\n            break;\n        default:\n            AT_ERROR(\"normal_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, mean, std)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::normal.Tensor_Tensor_out(Tensor mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, Generator *>(out, mean, std, generator);\n#endif\n}\n", "static inline Tensor normal(const Tensor & mean, const Tensor & std, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(mean, std)))) {\n        case Backend::CPU:\n            return CPUType::normal(mean, std, generator);\n            break;\n        default:\n            AT_ERROR(\"normal not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(mean, std)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::normal\", \"Tensor_Tensor\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(mean, std)), mean, std, generator);\n#endif\n}\n", "static inline Tensor normal(double mean, double std, IntArrayRef size, Generator * generator, const TensorOptions & options) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::normal(mean, std, size, generator, options);\n#else\n    globalLegacyTypeDispatch().initForTensorTypeSet(at::detail::multi_dispatch_tensor_type_set(options));\n    static auto table = globalATenDispatch().getOpTable(\"aten::normal.float_float(float mean, float std, int[] size, *, Generator? generator=None, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\");\n    return table->callUnboxed<Tensor, double, double, IntArrayRef, Generator *, const TensorOptions &>(mean, std, size, generator, options);\n#endif\n}\n", "static inline Tensor & normal_out(Tensor & out, double mean, double std, IntArrayRef size, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::normal_out(out, mean, std, size, generator);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::normal.float_float_out(float mean, float std, int[] size, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, double, double, IntArrayRef, Generator *>(out, mean, std, size, generator);\n#endif\n}\n", "static inline Tensor alias(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::alias(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::alias\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor _addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, vec1, vec2)))) {\n        case Backend::CPU:\n            return CPUType::_addr(self, vec1, vec2, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"_addr not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, vec1, vec2)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_addr\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, vec1, vec2)), self, vec1, vec2, beta, alpha);\n#endif\n}\n", "static inline Tensor & _addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, vec1, vec2)))) {\n        case Backend::CPU:\n            return CPUType::_addr_(self, vec1, vec2, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"_addr_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, vec1, vec2)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_addr_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, vec1, vec2)), self, vec1, vec2, beta, alpha);\n#endif\n}\n", "static inline Tensor & _addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, vec1, vec2)))) {\n        case Backend::CPU:\n            return CPUType::_addr_out(out, self, vec1, vec2, beta, alpha);\n            break;\n        default:\n            AT_ERROR(\"_addr_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, vec1, vec2)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(out, self, vec1, vec2, beta, alpha);\n#endif\n}\n", "static inline Tensor & _index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, index, source)))) {\n        case Backend::CPU:\n            return CPUType::_index_copy_(self, dim, index, source);\n            break;\n        default:\n            AT_ERROR(\"_index_copy_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, index, source)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_index_copy_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, index, source)), self, dim, index, source);\n#endif\n}\n", "static inline Tensor _cumsum(const Tensor & self, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_cumsum(self, dim);\n            break;\n        default:\n            AT_ERROR(\"_cumsum not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_cumsum\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim);\n#endif\n}\n", "static inline Tensor & _cumsum_out(Tensor & out, const Tensor & self, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::_cumsum_out(out, self, dim);\n            break;\n        default:\n            AT_ERROR(\"_cumsum_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_cumsum.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, int64_t>(out, self, dim);\n#endif\n}\n", "static inline Tensor _cumprod(const Tensor & self, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_cumprod(self, dim);\n            break;\n        default:\n            AT_ERROR(\"_cumprod not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_cumprod\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim);\n#endif\n}\n", "static inline Tensor & _cumprod_out(Tensor & out, const Tensor & self, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::_cumprod_out(out, self, dim);\n            break;\n        default:\n            AT_ERROR(\"_cumprod_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_cumprod.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, int64_t>(out, self, dim);\n#endif\n}\n", "static inline Tensor _var(const Tensor & self, bool unbiased) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_var(self, unbiased);\n            break;\n        default:\n            AT_ERROR(\"_var not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_var\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, unbiased);\n#endif\n}\n", "static inline Tensor _std(const Tensor & self, bool unbiased) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_std(self, unbiased);\n            break;\n        default:\n            AT_ERROR(\"_std not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_std\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, unbiased);\n#endif\n}\n", "static inline Tensor _cat(TensorList tensors, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(tensors)))) {\n        case Backend::CPU:\n            return CPUType::_cat(tensors, dim);\n            break;\n        default:\n            AT_ERROR(\"_cat not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(tensors)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_cat\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, TensorList, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(tensors)), tensors, dim);\n#endif\n}\n", "static inline Tensor & _cat_out(Tensor & out, TensorList tensors, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, tensors)))) {\n        case Backend::CPU:\n            return CPUType::_cat_out(out, tensors, dim);\n            break;\n        default:\n            AT_ERROR(\"_cat_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, tensors)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, TensorList, int64_t>(out, tensors, dim);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> _mode(const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_mode(self, dim, keepdim);\n            break;\n        default:\n            AT_ERROR(\"_mode not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_mode\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, keepdim);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> _mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(values, indices, self)))) {\n        case Backend::CPU:\n            return CPUType::_mode_out(values, indices, self, dim, keepdim);\n            break;\n        default:\n            AT_ERROR(\"_mode_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(values, indices, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, int64_t, bool>(values, indices, self, dim, keepdim);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> _max(const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_max(self, dim, keepdim);\n            break;\n        default:\n            AT_ERROR(\"_max not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_max\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, keepdim);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> _max_out(Tensor & max, Tensor & max_indices, const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(max, max_indices, self)))) {\n        case Backend::CPU:\n            return CPUType::_max_out(max, max_indices, self, dim, keepdim);\n            break;\n        default:\n            AT_ERROR(\"_max_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(max, max_indices, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_max.max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_indices) -> (Tensor(a!), Tensor(b!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, int64_t, bool>(max, max_indices, self, dim, keepdim);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> _min(const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_min(self, dim, keepdim);\n            break;\n        default:\n            AT_ERROR(\"_min not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_min\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim, keepdim);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> _min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(min, min_indices, self)))) {\n        case Backend::CPU:\n            return CPUType::_min_out(min, min_indices, self, dim, keepdim);\n            break;\n        default:\n            AT_ERROR(\"_min_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(min, min_indices, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::_min.min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!), Tensor(b!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, int64_t, bool>(min, min_indices, self, dim, keepdim);\n#endif\n}\n", "static inline Tensor & binary_cross_entropy_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, target, weight)))) {\n        case Backend::CPU:\n            return CPUType::binary_cross_entropy_out(out, self, target, weight, reduction);\n            break;\n        default:\n            AT_ERROR(\"binary_cross_entropy_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, target, weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::binary_cross_entropy.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(out, self, target, weight, reduction);\n#endif\n}\n", "static inline Tensor binary_cross_entropy(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, target, weight)))) {\n        case Backend::CPU:\n            return CPUType::binary_cross_entropy(self, target, weight, reduction);\n            break;\n        default:\n            AT_ERROR(\"binary_cross_entropy not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, target, weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::binary_cross_entropy(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(self, target, weight, reduction);\n#endif\n}\n", "static inline Tensor & binary_cross_entropy_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, target, weight)))) {\n        case Backend::CPU:\n            return CPUType::binary_cross_entropy_backward_out(grad_input, grad_output, self, target, weight, reduction);\n            break;\n        default:\n            AT_ERROR(\"binary_cross_entropy_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, target, weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::binary_cross_entropy_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(grad_input, grad_output, self, target, weight, reduction);\n#endif\n}\n", "static inline Tensor binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target, weight)))) {\n        case Backend::CPU:\n            return CPUType::binary_cross_entropy_backward(grad_output, self, target, weight, reduction);\n            break;\n        default:\n            AT_ERROR(\"binary_cross_entropy_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target, weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::binary_cross_entropy_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(grad_output, self, target, weight, reduction);\n#endif\n}\n", "static inline Tensor & mse_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, target)))) {\n        case Backend::CPU:\n            return CPUType::mse_loss_out(out, self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"mse_loss_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, target)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mse_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, int64_t>(out, self, target, reduction);\n#endif\n}\n", "static inline Tensor mse_loss(const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, target)))) {\n        case Backend::CPU:\n            return CPUType::mse_loss(self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"mse_loss not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, target)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::mse_loss\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, target)), self, target, reduction);\n#endif\n}\n", "static inline Tensor & mse_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, target)))) {\n        case Backend::CPU:\n            return CPUType::mse_loss_backward_out(grad_input, grad_output, self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"mse_loss_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, target)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::mse_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(grad_input, grad_output, self, target, reduction);\n#endif\n}\n", "static inline Tensor mse_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target)))) {\n        case Backend::CPU:\n            return CPUType::mse_loss_backward(grad_output, self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"mse_loss_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::mse_loss_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target)), grad_output, self, target, reduction);\n#endif\n}\n", "static inline Tensor & l1_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, target)))) {\n        case Backend::CPU:\n            return CPUType::l1_loss_out(out, self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"l1_loss_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, target)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, int64_t>(out, self, target, reduction);\n#endif\n}\n", "static inline Tensor l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, target)))) {\n        case Backend::CPU:\n            return CPUType::l1_loss(self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"l1_loss not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, target)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::l1_loss\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, target)), self, target, reduction);\n#endif\n}\n", "static inline Tensor & l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, target)))) {\n        case Backend::CPU:\n            return CPUType::l1_loss_backward_out(grad_input, grad_output, self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"l1_loss_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, target)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(grad_input, grad_output, self, target, reduction);\n#endif\n}\n", "static inline Tensor l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target)))) {\n        case Backend::CPU:\n            return CPUType::l1_loss_backward(grad_output, self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"l1_loss_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::l1_loss_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target)), grad_output, self, target, reduction);\n#endif\n}\n", "static inline Tensor & multi_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, target, weight)))) {\n        case Backend::CPU:\n            return CPUType::multi_margin_loss_out(out, self, target, p, margin, weight, reduction);\n            break;\n        default:\n            AT_ERROR(\"multi_margin_loss_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, target, weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::multi_margin_loss.out(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &, int64_t>(out, self, target, p, margin, weight, reduction);\n#endif\n}\n", "static inline Tensor multi_margin_loss(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, target, weight)))) {\n        case Backend::CPU:\n            return CPUType::multi_margin_loss(self, target, p, margin, weight, reduction);\n            break;\n        default:\n            AT_ERROR(\"multi_margin_loss not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, target, weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::multi_margin_loss(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &, int64_t>(self, target, p, margin, weight, reduction);\n#endif\n}\n", "static inline Tensor & multi_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, target, weight)))) {\n        case Backend::CPU:\n            return CPUType::multi_margin_loss_backward_out(grad_input, grad_output, self, target, p, margin, weight, reduction);\n            break;\n        default:\n            AT_ERROR(\"multi_margin_loss_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, target, weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::multi_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &, int64_t>(grad_input, grad_output, self, target, p, margin, weight, reduction);\n#endif\n}\n", "static inline Tensor multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target, weight)))) {\n        case Backend::CPU:\n            return CPUType::multi_margin_loss_backward(grad_output, self, target, p, margin, weight, reduction);\n            break;\n        default:\n            AT_ERROR(\"multi_margin_loss_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target, weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::multi_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &, int64_t>(grad_output, self, target, p, margin, weight, reduction);\n#endif\n}\n", "static inline Tensor & multilabel_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::multilabel_margin_loss_out(out, self, target, reduction);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::multilabel_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, int64_t>(out, self, target, reduction);\n#endif\n}\n", "static inline Tensor multilabel_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::multilabel_margin_loss(self, target, reduction);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::multilabel_margin_loss\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, target)), self, target, reduction);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> multilabel_margin_loss_forward_out(Tensor & output, Tensor & is_target, const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(output, is_target, self, target)))) {\n        case Backend::CPU:\n            return CPUType::multilabel_margin_loss_forward_out(output, is_target, self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"multilabel_margin_loss_forward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(output, is_target, self, target)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::multilabel_margin_loss_forward.output(Tensor self, Tensor target, int reduction, *, Tensor(a!) output, Tensor(b!) is_target) -> (Tensor(a!), Tensor(b!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, const Tensor &, int64_t>(output, is_target, self, target, reduction);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> multilabel_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, target)))) {\n        case Backend::CPU:\n            return CPUType::multilabel_margin_loss_forward(self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"multilabel_margin_loss_forward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, target)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::multilabel_margin_loss_forward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, target)), self, target, reduction);\n#endif\n}\n", "static inline Tensor & multilabel_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, target, is_target)))) {\n        case Backend::CPU:\n            return CPUType::multilabel_margin_loss_backward_out(grad_input, grad_output, self, target, reduction, is_target);\n            break;\n        default:\n            AT_ERROR(\"multilabel_margin_loss_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, target, is_target)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::multilabel_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, const Tensor &>(grad_input, grad_output, self, target, reduction, is_target);\n#endif\n}\n", "static inline Tensor multilabel_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target, is_target)))) {\n        case Backend::CPU:\n            return CPUType::multilabel_margin_loss_backward(grad_output, self, target, reduction, is_target);\n            break;\n        default:\n            AT_ERROR(\"multilabel_margin_loss_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target, is_target)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::multilabel_margin_loss_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target, is_target)), grad_output, self, target, reduction, is_target);\n#endif\n}\n", "static inline Tensor & nll_loss_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::nll_loss_out(out, self, target, weight, reduction, ignore_index);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::nll_loss.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t>(out, self, target, weight, reduction, ignore_index);\n#endif\n}\n", "static inline Tensor nll_loss(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::nll_loss(self, target, weight, reduction, ignore_index);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::nll_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t>(self, target, weight, reduction, ignore_index);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> nll_loss_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(output, total_weight, self, target, weight)))) {\n        case Backend::CPU:\n            return CPUType::nll_loss_forward_out(output, total_weight, self, target, weight, reduction, ignore_index);\n            break;\n        default:\n            AT_ERROR(\"nll_loss_forward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(output, total_weight, self, target, weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::nll_loss_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t>(output, total_weight, self, target, weight, reduction, ignore_index);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> nll_loss_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, target, weight)))) {\n        case Backend::CPU:\n            return CPUType::nll_loss_forward(self, target, weight, reduction, ignore_index);\n            break;\n        default:\n            AT_ERROR(\"nll_loss_forward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, target, weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::nll_loss_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t>(self, target, weight, reduction, ignore_index);\n#endif\n}\n", "static inline Tensor & nll_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, target, weight, total_weight)))) {\n        case Backend::CPU:\n            return CPUType::nll_loss_backward_out(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight);\n            break;\n        default:\n            AT_ERROR(\"nll_loss_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, target, weight, total_weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::nll_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, const Tensor &>(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight);\n#endif\n}\n", "static inline Tensor nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target, weight, total_weight)))) {\n        case Backend::CPU:\n            return CPUType::nll_loss_backward(grad_output, self, target, weight, reduction, ignore_index, total_weight);\n            break;\n        default:\n            AT_ERROR(\"nll_loss_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target, weight, total_weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::nll_loss_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, const Tensor &>(grad_output, self, target, weight, reduction, ignore_index, total_weight);\n#endif\n}\n", "static inline Tensor & nll_loss2d_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::nll_loss2d_out(out, self, target, weight, reduction, ignore_index);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t>(out, self, target, weight, reduction, ignore_index);\n#endif\n}\n", "static inline Tensor nll_loss2d(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::nll_loss2d(self, target, weight, reduction, ignore_index);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t>(self, target, weight, reduction, ignore_index);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> nll_loss2d_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(output, total_weight, self, target, weight)))) {\n        case Backend::CPU:\n            return CPUType::nll_loss2d_forward_out(output, total_weight, self, target, weight, reduction, ignore_index);\n            break;\n        default:\n            AT_ERROR(\"nll_loss2d_forward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(output, total_weight, self, target, weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::nll_loss2d_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t>(output, total_weight, self, target, weight, reduction, ignore_index);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> nll_loss2d_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, target, weight)))) {\n        case Backend::CPU:\n            return CPUType::nll_loss2d_forward(self, target, weight, reduction, ignore_index);\n            break;\n        default:\n            AT_ERROR(\"nll_loss2d_forward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, target, weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::nll_loss2d_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t>(self, target, weight, reduction, ignore_index);\n#endif\n}\n", "static inline Tensor & nll_loss2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, target, weight, total_weight)))) {\n        case Backend::CPU:\n            return CPUType::nll_loss2d_backward_out(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight);\n            break;\n        default:\n            AT_ERROR(\"nll_loss2d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, target, weight, total_weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::nll_loss2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, const Tensor &>(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight);\n#endif\n}\n", "static inline Tensor nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target, weight, total_weight)))) {\n        case Backend::CPU:\n            return CPUType::nll_loss2d_backward(grad_output, self, target, weight, reduction, ignore_index, total_weight);\n            break;\n        default:\n            AT_ERROR(\"nll_loss2d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target, weight, total_weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::nll_loss2d_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, const Tensor &>(grad_output, self, target, weight, reduction, ignore_index, total_weight);\n#endif\n}\n", "static inline Tensor & smooth_l1_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, target)))) {\n        case Backend::CPU:\n            return CPUType::smooth_l1_loss_out(out, self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"smooth_l1_loss_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, target)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::smooth_l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, int64_t>(out, self, target, reduction);\n#endif\n}\n", "static inline Tensor smooth_l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, target)))) {\n        case Backend::CPU:\n            return CPUType::smooth_l1_loss(self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"smooth_l1_loss not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, target)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::smooth_l1_loss\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, target)), self, target, reduction);\n#endif\n}\n", "static inline Tensor & smooth_l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, target)))) {\n        case Backend::CPU:\n            return CPUType::smooth_l1_loss_backward_out(grad_input, grad_output, self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"smooth_l1_loss_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, target)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::smooth_l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(grad_input, grad_output, self, target, reduction);\n#endif\n}\n", "static inline Tensor smooth_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target)))) {\n        case Backend::CPU:\n            return CPUType::smooth_l1_loss_backward(grad_output, self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"smooth_l1_loss_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::smooth_l1_loss_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target)), grad_output, self, target, reduction);\n#endif\n}\n", "static inline Tensor & soft_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, target)))) {\n        case Backend::CPU:\n            return CPUType::soft_margin_loss_out(out, self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"soft_margin_loss_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, target)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::soft_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, int64_t>(out, self, target, reduction);\n#endif\n}\n", "static inline Tensor soft_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, target)))) {\n        case Backend::CPU:\n            return CPUType::soft_margin_loss(self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"soft_margin_loss not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, target)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::soft_margin_loss\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, target)), self, target, reduction);\n#endif\n}\n", "static inline Tensor & soft_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, target)))) {\n        case Backend::CPU:\n            return CPUType::soft_margin_loss_backward_out(grad_input, grad_output, self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"soft_margin_loss_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, target)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::soft_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(grad_input, grad_output, self, target, reduction);\n#endif\n}\n", "static inline Tensor soft_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target)))) {\n        case Backend::CPU:\n            return CPUType::soft_margin_loss_backward(grad_output, self, target, reduction);\n            break;\n        default:\n            AT_ERROR(\"soft_margin_loss_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::soft_margin_loss_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, target)), grad_output, self, target, reduction);\n#endif\n}\n", "static inline Tensor & elu_out(Tensor & out, const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::elu_out(out, self, alpha, scale, input_scale);\n            break;\n        default:\n            AT_ERROR(\"elu_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::elu.out(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar, Scalar, Scalar>(out, self, alpha, scale, input_scale);\n#endif\n}\n", "static inline Tensor elu(const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::elu(self, alpha, scale, input_scale);\n            break;\n        default:\n            AT_ERROR(\"elu not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::elu\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, alpha, scale, input_scale);\n#endif\n}\n", "static inline Tensor & elu_backward_out(Tensor & grad_input, const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, output)))) {\n        case Backend::CPU:\n            return CPUType::elu_backward_out(grad_input, grad_output, alpha, scale, input_scale, output);\n            break;\n        default:\n            AT_ERROR(\"elu_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, output)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::elu_backward.grad_input(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar, Scalar, Scalar, const Tensor &>(grad_input, grad_output, alpha, scale, input_scale, output);\n#endif\n}\n", "static inline Tensor elu_backward(const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, output)))) {\n        case Backend::CPU:\n            return CPUType::elu_backward(grad_output, alpha, scale, input_scale, output);\n            break;\n        default:\n            AT_ERROR(\"elu_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, output)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::elu_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar, Scalar, Scalar, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, output)), grad_output, alpha, scale, input_scale, output);\n#endif\n}\n", "static inline Tensor & elu_(Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::elu_(self, alpha, scale, input_scale);\n            break;\n        default:\n            AT_ERROR(\"elu_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::elu_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, alpha, scale, input_scale);\n#endif\n}\n", "static inline Tensor & glu_out(Tensor & out, const Tensor & self, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::glu_out(out, self, dim);\n            break;\n        default:\n            AT_ERROR(\"glu_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::glu.out(Tensor self, int dim=-1, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, int64_t>(out, self, dim);\n#endif\n}\n", "static inline Tensor glu(const Tensor & self, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::glu(self, dim);\n            break;\n        default:\n            AT_ERROR(\"glu not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::glu\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, dim);\n#endif\n}\n", "static inline Tensor & glu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::glu_backward_out(grad_input, grad_output, self, dim);\n            break;\n        default:\n            AT_ERROR(\"glu_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::glu_backward.grad_input(Tensor grad_output, Tensor self, int dim, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, int64_t>(grad_input, grad_output, self, dim);\n#endif\n}\n", "static inline Tensor glu_backward(const Tensor & grad_output, const Tensor & self, int64_t dim) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::glu_backward(grad_output, self, dim);\n            break;\n        default:\n            AT_ERROR(\"glu_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::glu_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, int64_t>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), grad_output, self, dim);\n#endif\n}\n", "static inline Tensor & hardtanh_out(Tensor & out, const Tensor & self, Scalar min_val, Scalar max_val) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::hardtanh_out(out, self, min_val, max_val);\n            break;\n        default:\n            AT_ERROR(\"hardtanh_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::hardtanh.out(Tensor self, Scalar min_val=-1, Scalar max_val=1, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar, Scalar>(out, self, min_val, max_val);\n#endif\n}\n", "static inline Tensor hardtanh(const Tensor & self, Scalar min_val, Scalar max_val) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::hardtanh(self, min_val, max_val);\n            break;\n        default:\n            AT_ERROR(\"hardtanh not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::hardtanh\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, min_val, max_val);\n#endif\n}\n", "static inline Tensor & hardtanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::hardtanh_backward_out(grad_input, grad_output, self, min_val, max_val);\n            break;\n        default:\n            AT_ERROR(\"hardtanh_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::hardtanh_backward.grad_input(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(grad_input, grad_output, self, min_val, max_val);\n#endif\n}\n", "static inline Tensor hardtanh_backward(const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::hardtanh_backward(grad_output, self, min_val, max_val);\n            break;\n        default:\n            AT_ERROR(\"hardtanh_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::hardtanh_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), grad_output, self, min_val, max_val);\n#endif\n}\n", "static inline Tensor & hardtanh_(Tensor & self, Scalar min_val, Scalar max_val) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::hardtanh_(self, min_val, max_val);\n            break;\n        default:\n            AT_ERROR(\"hardtanh_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::hardtanh_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, min_val, max_val);\n#endif\n}\n", "static inline Tensor & leaky_relu_out(Tensor & out, const Tensor & self, Scalar negative_slope) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::leaky_relu_out(out, self, negative_slope);\n            break;\n        default:\n            AT_ERROR(\"leaky_relu_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::leaky_relu.out(Tensor self, Scalar negative_slope=0.01, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar>(out, self, negative_slope);\n#endif\n}\n", "static inline Tensor leaky_relu(const Tensor & self, Scalar negative_slope) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::leaky_relu(self, negative_slope);\n            break;\n        default:\n            AT_ERROR(\"leaky_relu not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::leaky_relu\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, negative_slope);\n#endif\n}\n", "static inline Tensor & leaky_relu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar negative_slope) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::leaky_relu_backward_out(grad_input, grad_output, self, negative_slope);\n            break;\n        default:\n            AT_ERROR(\"leaky_relu_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::leaky_relu_backward.grad_input(Tensor grad_output, Tensor self, Scalar negative_slope, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar>(grad_input, grad_output, self, negative_slope);\n#endif\n}\n", "static inline Tensor leaky_relu_backward(const Tensor & grad_output, const Tensor & self, Scalar negative_slope) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::leaky_relu_backward(grad_output, self, negative_slope);\n            break;\n        default:\n            AT_ERROR(\"leaky_relu_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::leaky_relu_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), grad_output, self, negative_slope);\n#endif\n}\n", "static inline Tensor & leaky_relu_(Tensor & self, Scalar negative_slope) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::leaky_relu_(self, negative_slope);\n            break;\n        default:\n            AT_ERROR(\"leaky_relu_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::leaky_relu_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, negative_slope);\n#endif\n}\n", "static inline Tensor & log_sigmoid_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::log_sigmoid_out(out, self);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::log_sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor log_sigmoid(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::log_sigmoid(self);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::log_sigmoid\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> log_sigmoid_forward_out(Tensor & output, Tensor & buffer, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(output, buffer, self)))) {\n        case Backend::CPU:\n            return CPUType::log_sigmoid_forward_out(output, buffer, self);\n            break;\n        default:\n            AT_ERROR(\"log_sigmoid_forward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(output, buffer, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::log_sigmoid_forward.output(Tensor self, *, Tensor(a!) output, Tensor(b!) buffer) -> (Tensor(a!), Tensor(b!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &>(output, buffer, self);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> log_sigmoid_forward(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::log_sigmoid_forward(self);\n            break;\n        default:\n            AT_ERROR(\"log_sigmoid_forward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::log_sigmoid_forward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self);\n#endif\n}\n", "static inline Tensor & log_sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & buffer) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, buffer)))) {\n        case Backend::CPU:\n            return CPUType::log_sigmoid_backward_out(grad_input, grad_output, self, buffer);\n            break;\n        default:\n            AT_ERROR(\"log_sigmoid_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, buffer)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::log_sigmoid_backward.grad_input(Tensor grad_output, Tensor self, Tensor buffer, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &>(grad_input, grad_output, self, buffer);\n#endif\n}\n", "static inline Tensor log_sigmoid_backward(const Tensor & grad_output, const Tensor & self, const Tensor & buffer) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, buffer)))) {\n        case Backend::CPU:\n            return CPUType::log_sigmoid_backward(grad_output, self, buffer);\n            break;\n        default:\n            AT_ERROR(\"log_sigmoid_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, buffer)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::log_sigmoid_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, buffer)), grad_output, self, buffer);\n#endif\n}\n", "static inline Tensor & rrelu_with_noise_out(Tensor & out, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, noise)))) {\n        case Backend::CPU:\n            return CPUType::rrelu_with_noise_out(out, self, noise, lower, upper, training, generator);\n            break;\n        default:\n            AT_ERROR(\"rrelu_with_noise_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, noise)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::rrelu_with_noise.out(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, bool, Generator *>(out, self, noise, lower, upper, training, generator);\n#endif\n}\n", "static inline Tensor rrelu_with_noise(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, noise)))) {\n        case Backend::CPU:\n            return CPUType::rrelu_with_noise(self, noise, lower, upper, training, generator);\n            break;\n        default:\n            AT_ERROR(\"rrelu_with_noise not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, noise)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::rrelu_with_noise\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, Scalar, Scalar, bool, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, noise)), self, noise, lower, upper, training, generator);\n#endif\n}\n", "static inline Tensor & rrelu_with_noise_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, noise)))) {\n        case Backend::CPU:\n            return CPUType::rrelu_with_noise_backward_out(grad_input, grad_output, self, noise, lower, upper, training);\n            break;\n        default:\n            AT_ERROR(\"rrelu_with_noise_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, noise)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::rrelu_with_noise_backward.grad_input(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, bool>(grad_input, grad_output, self, noise, lower, upper, training);\n#endif\n}\n", "static inline Tensor rrelu_with_noise_backward(const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, noise)))) {\n        case Backend::CPU:\n            return CPUType::rrelu_with_noise_backward(grad_output, self, noise, lower, upper, training);\n            break;\n        default:\n            AT_ERROR(\"rrelu_with_noise_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, noise)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::rrelu_with_noise_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, noise)), grad_output, self, noise, lower, upper, training);\n#endif\n}\n", "static inline Tensor & rrelu_with_noise_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, noise)))) {\n        case Backend::CPU:\n            return CPUType::rrelu_with_noise_(self, noise, lower, upper, training, generator);\n            break;\n        default:\n            AT_ERROR(\"rrelu_with_noise_ not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, noise)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::rrelu_with_noise_\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor &, Tensor &, const Tensor &, Scalar, Scalar, bool, Generator *>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, noise)), self, noise, lower, upper, training, generator);\n#endif\n}\n", "static inline Tensor & softplus_out(Tensor & out, const Tensor & self, Scalar beta, Scalar threshold) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::softplus_out(out, self, beta, threshold);\n            break;\n        default:\n            AT_ERROR(\"softplus_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::softplus.out(Tensor self, Scalar beta=1, Scalar threshold=20, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar, Scalar>(out, self, beta, threshold);\n#endif\n}\n", "static inline Tensor softplus(const Tensor & self, Scalar beta, Scalar threshold) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::softplus(self, beta, threshold);\n            break;\n        default:\n            AT_ERROR(\"softplus not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::softplus\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, beta, threshold);\n#endif\n}\n", "static inline Tensor & softplus_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, output)))) {\n        case Backend::CPU:\n            return CPUType::softplus_backward_out(grad_input, grad_output, self, beta, threshold, output);\n            break;\n        default:\n            AT_ERROR(\"softplus_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, output)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::softplus_backward.grad_input(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &>(grad_input, grad_output, self, beta, threshold, output);\n#endif\n}\n", "static inline Tensor softplus_backward(const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, output)))) {\n        case Backend::CPU:\n            return CPUType::softplus_backward(grad_output, self, beta, threshold, output);\n            break;\n        default:\n            AT_ERROR(\"softplus_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, output)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::softplus_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, output)), grad_output, self, beta, threshold, output);\n#endif\n}\n", "static inline Tensor & softshrink_out(Tensor & out, const Tensor & self, Scalar lambd) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::softshrink_out(out, self, lambd);\n            break;\n        default:\n            AT_ERROR(\"softshrink_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::softshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, Scalar>(out, self, lambd);\n#endif\n}\n", "static inline Tensor softshrink(const Tensor & self, Scalar lambd) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::softshrink(self, lambd);\n            break;\n        default:\n            AT_ERROR(\"softshrink not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::softshrink\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, lambd);\n#endif\n}\n", "static inline Tensor & softshrink_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar lambd) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::softshrink_backward_out(grad_input, grad_output, self, lambd);\n            break;\n        default:\n            AT_ERROR(\"softshrink_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::softshrink_backward.grad_input(Tensor grad_output, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar>(grad_input, grad_output, self, lambd);\n#endif\n}\n", "static inline Tensor softshrink_backward(const Tensor & grad_output, const Tensor & self, Scalar lambd) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::softshrink_backward(grad_output, self, lambd);\n            break;\n        default:\n            AT_ERROR(\"softshrink_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::softshrink_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, Scalar>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), grad_output, self, lambd);\n#endif\n}\n", "static inline Tensor & adaptive_avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::adaptive_avg_pool2d_out(out, self, output_size);\n            break;\n        default:\n            AT_ERROR(\"adaptive_avg_pool2d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::adaptive_avg_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef>(out, self, output_size);\n#endif\n}\n", "static inline Tensor adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::adaptive_avg_pool2d(self, output_size);\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::adaptive_avg_pool2d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, output_size);\n#endif\n}\n", "static inline Tensor mkldnn_adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n    \n        default:\n            AT_ERROR(\"mkldnn_adaptive_avg_pool2d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::mkldnn_adaptive_avg_pool2d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, output_size);\n#endif\n}\n", "static inline Tensor _adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::_adaptive_avg_pool2d(self, output_size);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::_adaptive_avg_pool2d(self, output_size);\n            break;\n        default:\n            AT_ERROR(\"_adaptive_avg_pool2d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_adaptive_avg_pool2d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, output_size);\n#endif\n}\n", "static inline Tensor _adaptive_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::_adaptive_avg_pool2d_backward(grad_output, self);\n            break;\n        default:\n            AT_ERROR(\"_adaptive_avg_pool2d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::_adaptive_avg_pool2d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), grad_output, self);\n#endif\n}\n", "static inline Tensor & adaptive_avg_pool3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::adaptive_avg_pool3d_out(out, self, output_size);\n            break;\n        default:\n            AT_ERROR(\"adaptive_avg_pool3d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::adaptive_avg_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef>(out, self, output_size);\n#endif\n}\n", "static inline Tensor adaptive_avg_pool3d(const Tensor & self, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::adaptive_avg_pool3d(self, output_size);\n            break;\n        default:\n            AT_ERROR(\"adaptive_avg_pool3d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::adaptive_avg_pool3d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, output_size);\n#endif\n}\n", "static inline Tensor & adaptive_avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::adaptive_avg_pool3d_backward_out(grad_input, grad_output, self);\n            break;\n        default:\n            AT_ERROR(\"adaptive_avg_pool3d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::adaptive_avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(grad_input, grad_output, self);\n#endif\n}\n", "static inline Tensor adaptive_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::adaptive_avg_pool3d_backward(grad_output, self);\n            break;\n        default:\n            AT_ERROR(\"adaptive_avg_pool3d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::adaptive_avg_pool3d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), grad_output, self);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> adaptive_max_pool2d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, indices, self)))) {\n        case Backend::CPU:\n            return CPUType::adaptive_max_pool2d_out(out, indices, self, output_size);\n            break;\n        default:\n            AT_ERROR(\"adaptive_max_pool2d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, indices, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::adaptive_max_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, IntArrayRef>(out, indices, self, output_size);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> adaptive_max_pool2d(const Tensor & self, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::adaptive_max_pool2d(self, output_size);\n            break;\n        default:\n            AT_ERROR(\"adaptive_max_pool2d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::adaptive_max_pool2d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, output_size);\n#endif\n}\n", "static inline Tensor & adaptive_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, indices)))) {\n        case Backend::CPU:\n            return CPUType::adaptive_max_pool2d_backward_out(grad_input, grad_output, self, indices);\n            break;\n        default:\n            AT_ERROR(\"adaptive_max_pool2d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, indices)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::adaptive_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &>(grad_input, grad_output, self, indices);\n#endif\n}\n", "static inline Tensor adaptive_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)))) {\n        case Backend::CPU:\n            return CPUType::adaptive_max_pool2d_backward(grad_output, self, indices);\n            break;\n        default:\n            AT_ERROR(\"adaptive_max_pool2d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::adaptive_max_pool2d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)), grad_output, self, indices);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> adaptive_max_pool3d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, indices, self)))) {\n        case Backend::CPU:\n            return CPUType::adaptive_max_pool3d_out(out, indices, self, output_size);\n            break;\n        default:\n            AT_ERROR(\"adaptive_max_pool3d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, indices, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::adaptive_max_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, IntArrayRef>(out, indices, self, output_size);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> adaptive_max_pool3d(const Tensor & self, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::adaptive_max_pool3d(self, output_size);\n            break;\n        default:\n            AT_ERROR(\"adaptive_max_pool3d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::adaptive_max_pool3d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, output_size);\n#endif\n}\n", "static inline Tensor & adaptive_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, indices)))) {\n        case Backend::CPU:\n            return CPUType::adaptive_max_pool3d_backward_out(grad_input, grad_output, self, indices);\n            break;\n        default:\n            AT_ERROR(\"adaptive_max_pool3d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, indices)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::adaptive_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &>(grad_input, grad_output, self, indices);\n#endif\n}\n", "static inline Tensor adaptive_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)))) {\n        case Backend::CPU:\n            return CPUType::adaptive_max_pool3d_backward(grad_output, self, indices);\n            break;\n        default:\n            AT_ERROR(\"adaptive_max_pool3d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::adaptive_max_pool3d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)), grad_output, self, indices);\n#endif\n}\n", "static inline Tensor & avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::avg_pool2d_out(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);\n            break;\n        default:\n            AT_ERROR(\"avg_pool2d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::avg_pool2d.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>>(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);\n#endif\n}\n", "static inline Tensor avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::avg_pool2d(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::avg_pool2d(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);\n            break;\n        default:\n            AT_ERROR(\"avg_pool2d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::avg_pool2d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);\n#endif\n}\n", "static inline Tensor & avg_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::avg_pool2d_backward_out(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);\n            break;\n        default:\n            AT_ERROR(\"avg_pool2d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::avg_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>>(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);\n#endif\n}\n", "static inline Tensor avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::avg_pool2d_backward(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);\n            break;\n        default:\n            AT_ERROR(\"avg_pool2d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::avg_pool2d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);\n#endif\n}\n", "static inline Tensor & avg_pool3d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::avg_pool3d_out(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);\n            break;\n        default:\n            AT_ERROR(\"avg_pool3d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::avg_pool3d.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>>(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);\n#endif\n}\n", "static inline Tensor avg_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::avg_pool3d(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);\n            break;\n        default:\n            AT_ERROR(\"avg_pool3d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::avg_pool3d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);\n#endif\n}\n", "static inline Tensor & avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::avg_pool3d_backward_out(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);\n            break;\n        default:\n            AT_ERROR(\"avg_pool3d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>>(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);\n#endif\n}\n", "static inline Tensor avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::avg_pool3d_backward(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);\n            break;\n        default:\n            AT_ERROR(\"avg_pool3d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::avg_pool3d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> fractional_max_pool2d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(output, indices, self, random_samples)))) {\n        case Backend::CPU:\n            return CPUType::fractional_max_pool2d_out(output, indices, self, kernel_size, output_size, random_samples);\n            break;\n        default:\n            AT_ERROR(\"fractional_max_pool2d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(output, indices, self, random_samples)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::fractional_max_pool2d.output(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &>(output, indices, self, kernel_size, output_size, random_samples);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> fractional_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, random_samples)))) {\n        case Backend::CPU:\n            return CPUType::fractional_max_pool2d(self, kernel_size, output_size, random_samples);\n            break;\n        default:\n            AT_ERROR(\"fractional_max_pool2d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, random_samples)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fractional_max_pool2d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, random_samples)), self, kernel_size, output_size, random_samples);\n#endif\n}\n", "static inline Tensor & fractional_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, indices)))) {\n        case Backend::CPU:\n            return CPUType::fractional_max_pool2d_backward_out(grad_input, grad_output, self, kernel_size, output_size, indices);\n            break;\n        default:\n            AT_ERROR(\"fractional_max_pool2d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, indices)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::fractional_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &>(grad_input, grad_output, self, kernel_size, output_size, indices);\n#endif\n}\n", "static inline Tensor fractional_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)))) {\n        case Backend::CPU:\n            return CPUType::fractional_max_pool2d_backward(grad_output, self, kernel_size, output_size, indices);\n            break;\n        default:\n            AT_ERROR(\"fractional_max_pool2d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fractional_max_pool2d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)), grad_output, self, kernel_size, output_size, indices);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> fractional_max_pool3d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(output, indices, self, random_samples)))) {\n        case Backend::CPU:\n            return CPUType::fractional_max_pool3d_out(output, indices, self, kernel_size, output_size, random_samples);\n            break;\n        default:\n            AT_ERROR(\"fractional_max_pool3d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(output, indices, self, random_samples)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::fractional_max_pool3d.output(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &>(output, indices, self, kernel_size, output_size, random_samples);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> fractional_max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, random_samples)))) {\n        case Backend::CPU:\n            return CPUType::fractional_max_pool3d(self, kernel_size, output_size, random_samples);\n            break;\n        default:\n            AT_ERROR(\"fractional_max_pool3d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, random_samples)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fractional_max_pool3d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, random_samples)), self, kernel_size, output_size, random_samples);\n#endif\n}\n", "static inline Tensor & fractional_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, indices)))) {\n        case Backend::CPU:\n            return CPUType::fractional_max_pool3d_backward_out(grad_input, grad_output, self, kernel_size, output_size, indices);\n            break;\n        default:\n            AT_ERROR(\"fractional_max_pool3d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, indices)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::fractional_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &>(grad_input, grad_output, self, kernel_size, output_size, indices);\n#endif\n}\n", "static inline Tensor fractional_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)))) {\n        case Backend::CPU:\n            return CPUType::fractional_max_pool3d_backward(grad_output, self, kernel_size, output_size, indices);\n            break;\n        default:\n            AT_ERROR(\"fractional_max_pool3d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::fractional_max_pool3d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)), grad_output, self, kernel_size, output_size, indices);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> max_pool2d_with_indices_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, indices, self)))) {\n        case Backend::CPU:\n            return CPUType::max_pool2d_with_indices_out(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode);\n            break;\n        default:\n            AT_ERROR(\"max_pool2d_with_indices_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, indices, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::max_pool2d_with_indices.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> max_pool2d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::max_pool2d_with_indices(self, kernel_size, stride, padding, dilation, ceil_mode);\n            break;\n        default:\n            AT_ERROR(\"max_pool2d_with_indices not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::max_pool2d_with_indices\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, kernel_size, stride, padding, dilation, ceil_mode);\n#endif\n}\n", "static inline Tensor & max_pool2d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, indices)))) {\n        case Backend::CPU:\n            return CPUType::max_pool2d_with_indices_backward_out(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);\n            break;\n        default:\n            AT_ERROR(\"max_pool2d_with_indices_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, indices)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::max_pool2d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &>(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);\n#endif\n}\n", "static inline Tensor max_pool2d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)))) {\n        case Backend::CPU:\n            return CPUType::max_pool2d_with_indices_backward(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);\n            break;\n        default:\n            AT_ERROR(\"max_pool2d_with_indices_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::max_pool2d_with_indices_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)), grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> max_pool3d_with_indices_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, indices, self)))) {\n        case Backend::CPU:\n            return CPUType::max_pool3d_with_indices_out(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode);\n            break;\n        default:\n            AT_ERROR(\"max_pool3d_with_indices_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, indices, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::max_pool3d_with_indices.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> max_pool3d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::max_pool3d_with_indices(self, kernel_size, stride, padding, dilation, ceil_mode);\n            break;\n        default:\n            AT_ERROR(\"max_pool3d_with_indices not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::max_pool3d_with_indices\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, kernel_size, stride, padding, dilation, ceil_mode);\n#endif\n}\n", "static inline Tensor & max_pool3d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, indices)))) {\n        case Backend::CPU:\n            return CPUType::max_pool3d_with_indices_backward_out(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);\n            break;\n        default:\n            AT_ERROR(\"max_pool3d_with_indices_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, indices)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::max_pool3d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &>(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);\n#endif\n}\n", "static inline Tensor max_pool3d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)))) {\n        case Backend::CPU:\n            return CPUType::max_pool3d_with_indices_backward(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);\n            break;\n        default:\n            AT_ERROR(\"max_pool3d_with_indices_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::max_pool3d_with_indices_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)), grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);\n#endif\n}\n", "static inline Tensor & max_unpool2d_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, indices)))) {\n        case Backend::CPU:\n            return CPUType::max_unpool2d_out(out, self, indices, output_size);\n            break;\n        default:\n            AT_ERROR(\"max_unpool2d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, indices)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::max_unpool2d.out(Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef>(out, self, indices, output_size);\n#endif\n}\n", "static inline Tensor max_unpool2d(const Tensor & self, const Tensor & indices, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, indices)))) {\n        case Backend::CPU:\n            return CPUType::max_unpool2d(self, indices, output_size);\n            break;\n        default:\n            AT_ERROR(\"max_unpool2d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, indices)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::max_unpool2d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, indices)), self, indices, output_size);\n#endif\n}\n", "static inline Tensor & max_unpool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, indices)))) {\n        case Backend::CPU:\n            return CPUType::max_unpool2d_backward_out(grad_input, grad_output, self, indices, output_size);\n            break;\n        default:\n            AT_ERROR(\"max_unpool2d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, indices)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::max_unpool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef>(grad_input, grad_output, self, indices, output_size);\n#endif\n}\n", "static inline Tensor max_unpool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)))) {\n        case Backend::CPU:\n            return CPUType::max_unpool2d_backward(grad_output, self, indices, output_size);\n            break;\n        default:\n            AT_ERROR(\"max_unpool2d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::max_unpool2d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)), grad_output, self, indices, output_size);\n#endif\n}\n", "static inline Tensor & max_unpool3d_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, indices)))) {\n        case Backend::CPU:\n            return CPUType::max_unpool3d_out(out, self, indices, output_size, stride, padding);\n            break;\n        default:\n            AT_ERROR(\"max_unpool3d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, indices)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::max_unpool3d.out(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef>(out, self, indices, output_size, stride, padding);\n#endif\n}\n", "static inline Tensor max_unpool3d(const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, indices)))) {\n        case Backend::CPU:\n            return CPUType::max_unpool3d(self, indices, output_size, stride, padding);\n            break;\n        default:\n            AT_ERROR(\"max_unpool3d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, indices)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::max_unpool3d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, indices)), self, indices, output_size, stride, padding);\n#endif\n}\n", "static inline Tensor & max_unpool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, indices)))) {\n        case Backend::CPU:\n            return CPUType::max_unpool3d_backward_out(grad_input, grad_output, self, indices, output_size, stride, padding);\n            break;\n        default:\n            AT_ERROR(\"max_unpool3d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self, indices)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::max_unpool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef>(grad_input, grad_output, self, indices, output_size, stride, padding);\n#endif\n}\n", "static inline Tensor max_unpool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)))) {\n        case Backend::CPU:\n            return CPUType::max_unpool3d_backward(grad_output, self, indices, output_size, stride, padding);\n            break;\n        default:\n            AT_ERROR(\"max_unpool3d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::max_unpool3d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, indices)), grad_output, self, indices, output_size, stride, padding);\n#endif\n}\n", "static inline Tensor & reflection_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::reflection_pad1d_out(out, self, padding);\n            break;\n        default:\n            AT_ERROR(\"reflection_pad1d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::reflection_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef>(out, self, padding);\n#endif\n}\n", "static inline Tensor reflection_pad1d(const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::reflection_pad1d(self, padding);\n            break;\n        default:\n            AT_ERROR(\"reflection_pad1d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::reflection_pad1d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, padding);\n#endif\n}\n", "static inline Tensor & reflection_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::reflection_pad1d_backward_out(grad_input, grad_output, self, padding);\n            break;\n        default:\n            AT_ERROR(\"reflection_pad1d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::reflection_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef>(grad_input, grad_output, self, padding);\n#endif\n}\n", "static inline Tensor reflection_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::reflection_pad1d_backward(grad_output, self, padding);\n            break;\n        default:\n            AT_ERROR(\"reflection_pad1d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::reflection_pad1d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), grad_output, self, padding);\n#endif\n}\n", "static inline Tensor & reflection_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::reflection_pad2d_out(out, self, padding);\n            break;\n        default:\n            AT_ERROR(\"reflection_pad2d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::reflection_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef>(out, self, padding);\n#endif\n}\n", "static inline Tensor reflection_pad2d(const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::reflection_pad2d(self, padding);\n            break;\n        default:\n            AT_ERROR(\"reflection_pad2d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::reflection_pad2d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, padding);\n#endif\n}\n", "static inline Tensor & reflection_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::reflection_pad2d_backward_out(grad_input, grad_output, self, padding);\n            break;\n        default:\n            AT_ERROR(\"reflection_pad2d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::reflection_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef>(grad_input, grad_output, self, padding);\n#endif\n}\n", "static inline Tensor reflection_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::reflection_pad2d_backward(grad_output, self, padding);\n            break;\n        default:\n            AT_ERROR(\"reflection_pad2d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::reflection_pad2d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), grad_output, self, padding);\n#endif\n}\n", "static inline Tensor & replication_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::replication_pad1d_out(out, self, padding);\n            break;\n        default:\n            AT_ERROR(\"replication_pad1d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::replication_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef>(out, self, padding);\n#endif\n}\n", "static inline Tensor replication_pad1d(const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::replication_pad1d(self, padding);\n            break;\n        default:\n            AT_ERROR(\"replication_pad1d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::replication_pad1d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, padding);\n#endif\n}\n", "static inline Tensor & replication_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::replication_pad1d_backward_out(grad_input, grad_output, self, padding);\n            break;\n        default:\n            AT_ERROR(\"replication_pad1d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::replication_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef>(grad_input, grad_output, self, padding);\n#endif\n}\n", "static inline Tensor replication_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::replication_pad1d_backward(grad_output, self, padding);\n            break;\n        default:\n            AT_ERROR(\"replication_pad1d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::replication_pad1d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), grad_output, self, padding);\n#endif\n}\n", "static inline Tensor & replication_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::replication_pad2d_out(out, self, padding);\n            break;\n        default:\n            AT_ERROR(\"replication_pad2d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::replication_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef>(out, self, padding);\n#endif\n}\n", "static inline Tensor replication_pad2d(const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::replication_pad2d(self, padding);\n            break;\n        default:\n            AT_ERROR(\"replication_pad2d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::replication_pad2d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, padding);\n#endif\n}\n", "static inline Tensor & replication_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::replication_pad2d_backward_out(grad_input, grad_output, self, padding);\n            break;\n        default:\n            AT_ERROR(\"replication_pad2d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::replication_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef>(grad_input, grad_output, self, padding);\n#endif\n}\n", "static inline Tensor replication_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::replication_pad2d_backward(grad_output, self, padding);\n            break;\n        default:\n            AT_ERROR(\"replication_pad2d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::replication_pad2d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), grad_output, self, padding);\n#endif\n}\n", "static inline Tensor & replication_pad3d_out(Tensor & out, const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::replication_pad3d_out(out, self, padding);\n            break;\n        default:\n            AT_ERROR(\"replication_pad3d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::replication_pad3d.out(Tensor self, int[6] padding, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef>(out, self, padding);\n#endif\n}\n", "static inline Tensor replication_pad3d(const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::replication_pad3d(self, padding);\n            break;\n        default:\n            AT_ERROR(\"replication_pad3d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::replication_pad3d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, padding);\n#endif\n}\n", "static inline Tensor & replication_pad3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::replication_pad3d_backward_out(grad_input, grad_output, self, padding);\n            break;\n        default:\n            AT_ERROR(\"replication_pad3d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::replication_pad3d_backward.grad_input(Tensor grad_output, Tensor self, int[6] padding, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef>(grad_input, grad_output, self, padding);\n#endif\n}\n", "static inline Tensor replication_pad3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)))) {\n        case Backend::CPU:\n            return CPUType::replication_pad3d_backward(grad_output, self, padding);\n            break;\n        default:\n            AT_ERROR(\"replication_pad3d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::replication_pad3d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self)), grad_output, self, padding);\n#endif\n}\n", "static inline Tensor & upsample_linear1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::upsample_linear1d_out(out, self, output_size, align_corners);\n            break;\n        default:\n            AT_ERROR(\"upsample_linear1d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::upsample_linear1d.out(Tensor self, int[1] output_size, bool align_corners, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, bool>(out, self, output_size, align_corners);\n#endif\n}\n", "static inline Tensor upsample_linear1d(const Tensor & self, IntArrayRef output_size, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::upsample_linear1d(self, output_size, align_corners);\n            break;\n        default:\n            AT_ERROR(\"upsample_linear1d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::upsample_linear1d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, output_size, align_corners);\n#endif\n}\n", "static inline Tensor & upsample_linear1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output)))) {\n        case Backend::CPU:\n            return CPUType::upsample_linear1d_backward_out(grad_input, grad_output, output_size, input_size, align_corners);\n            break;\n        default:\n            AT_ERROR(\"upsample_linear1d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::upsample_linear1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool>(grad_input, grad_output, output_size, input_size, align_corners);\n#endif\n}\n", "static inline Tensor upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)))) {\n        case Backend::CPU:\n            return CPUType::upsample_linear1d_backward(grad_output, output_size, input_size, align_corners);\n            break;\n        default:\n            AT_ERROR(\"upsample_linear1d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::upsample_linear1d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)), grad_output, output_size, input_size, align_corners);\n#endif\n}\n", "static inline Tensor & upsample_bilinear2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::upsample_bilinear2d_out(out, self, output_size, align_corners);\n            break;\n        default:\n            AT_ERROR(\"upsample_bilinear2d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::upsample_bilinear2d.out(Tensor self, int[2] output_size, bool align_corners, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, bool>(out, self, output_size, align_corners);\n#endif\n}\n", "static inline Tensor upsample_bilinear2d(const Tensor & self, IntArrayRef output_size, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::upsample_bilinear2d(self, output_size, align_corners);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::upsample_bilinear2d(self, output_size, align_corners);\n            break;\n        default:\n            AT_ERROR(\"upsample_bilinear2d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::upsample_bilinear2d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, output_size, align_corners);\n#endif\n}\n", "static inline Tensor & upsample_bilinear2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output)))) {\n        case Backend::CPU:\n            return CPUType::upsample_bilinear2d_backward_out(grad_input, grad_output, output_size, input_size, align_corners);\n            break;\n        default:\n            AT_ERROR(\"upsample_bilinear2d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::upsample_bilinear2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool>(grad_input, grad_output, output_size, input_size, align_corners);\n#endif\n}\n", "static inline Tensor upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)))) {\n        case Backend::CPU:\n            return CPUType::upsample_bilinear2d_backward(grad_output, output_size, input_size, align_corners);\n            break;\n        default:\n            AT_ERROR(\"upsample_bilinear2d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::upsample_bilinear2d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)), grad_output, output_size, input_size, align_corners);\n#endif\n}\n", "static inline Tensor & upsample_bicubic2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::upsample_bicubic2d_out(out, self, output_size, align_corners);\n            break;\n        default:\n            AT_ERROR(\"upsample_bicubic2d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::upsample_bicubic2d.out(Tensor self, int[2] output_size, bool align_corners, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, bool>(out, self, output_size, align_corners);\n#endif\n}\n", "static inline Tensor upsample_bicubic2d(const Tensor & self, IntArrayRef output_size, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::upsample_bicubic2d(self, output_size, align_corners);\n            break;\n        default:\n            AT_ERROR(\"upsample_bicubic2d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::upsample_bicubic2d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, output_size, align_corners);\n#endif\n}\n", "static inline Tensor & upsample_bicubic2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output)))) {\n        case Backend::CPU:\n            return CPUType::upsample_bicubic2d_backward_out(grad_input, grad_output, output_size, input_size, align_corners);\n            break;\n        default:\n            AT_ERROR(\"upsample_bicubic2d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::upsample_bicubic2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool>(grad_input, grad_output, output_size, input_size, align_corners);\n#endif\n}\n", "static inline Tensor upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)))) {\n        case Backend::CPU:\n            return CPUType::upsample_bicubic2d_backward(grad_output, output_size, input_size, align_corners);\n            break;\n        default:\n            AT_ERROR(\"upsample_bicubic2d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::upsample_bicubic2d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)), grad_output, output_size, input_size, align_corners);\n#endif\n}\n", "static inline Tensor & upsample_trilinear3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::upsample_trilinear3d_out(out, self, output_size, align_corners);\n            break;\n        default:\n            AT_ERROR(\"upsample_trilinear3d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::upsample_trilinear3d.out(Tensor self, int[3] output_size, bool align_corners, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, bool>(out, self, output_size, align_corners);\n#endif\n}\n", "static inline Tensor upsample_trilinear3d(const Tensor & self, IntArrayRef output_size, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::upsample_trilinear3d(self, output_size, align_corners);\n            break;\n        default:\n            AT_ERROR(\"upsample_trilinear3d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::upsample_trilinear3d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, output_size, align_corners);\n#endif\n}\n", "static inline Tensor & upsample_trilinear3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output)))) {\n        case Backend::CPU:\n            return CPUType::upsample_trilinear3d_backward_out(grad_input, grad_output, output_size, input_size, align_corners);\n            break;\n        default:\n            AT_ERROR(\"upsample_trilinear3d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::upsample_trilinear3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool>(grad_input, grad_output, output_size, input_size, align_corners);\n#endif\n}\n", "static inline Tensor upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)))) {\n        case Backend::CPU:\n            return CPUType::upsample_trilinear3d_backward(grad_output, output_size, input_size, align_corners);\n            break;\n        default:\n            AT_ERROR(\"upsample_trilinear3d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::upsample_trilinear3d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, bool>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)), grad_output, output_size, input_size, align_corners);\n#endif\n}\n", "static inline Tensor & upsample_nearest1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::upsample_nearest1d_out(out, self, output_size);\n            break;\n        default:\n            AT_ERROR(\"upsample_nearest1d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::upsample_nearest1d.out(Tensor self, int[1] output_size, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef>(out, self, output_size);\n#endif\n}\n", "static inline Tensor upsample_nearest1d(const Tensor & self, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::upsample_nearest1d(self, output_size);\n            break;\n        default:\n            AT_ERROR(\"upsample_nearest1d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::upsample_nearest1d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, output_size);\n#endif\n}\n", "static inline Tensor & upsample_nearest1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output)))) {\n        case Backend::CPU:\n            return CPUType::upsample_nearest1d_backward_out(grad_input, grad_output, output_size, input_size);\n            break;\n        default:\n            AT_ERROR(\"upsample_nearest1d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::upsample_nearest1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef>(grad_input, grad_output, output_size, input_size);\n#endif\n}\n", "static inline Tensor upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)))) {\n        case Backend::CPU:\n            return CPUType::upsample_nearest1d_backward(grad_output, output_size, input_size);\n            break;\n        default:\n            AT_ERROR(\"upsample_nearest1d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::upsample_nearest1d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)), grad_output, output_size, input_size);\n#endif\n}\n", "static inline Tensor & upsample_nearest2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::upsample_nearest2d_out(out, self, output_size);\n            break;\n        default:\n            AT_ERROR(\"upsample_nearest2d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::upsample_nearest2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef>(out, self, output_size);\n#endif\n}\n", "static inline Tensor upsample_nearest2d(const Tensor & self, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::upsample_nearest2d(self, output_size);\n            break;\n        case Backend::QuantizedCPU:\n            return QuantizedCPUType::upsample_nearest2d(self, output_size);\n            break;\n        default:\n            AT_ERROR(\"upsample_nearest2d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::upsample_nearest2d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, output_size);\n#endif\n}\n", "static inline Tensor & upsample_nearest2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output)))) {\n        case Backend::CPU:\n            return CPUType::upsample_nearest2d_backward_out(grad_input, grad_output, output_size, input_size);\n            break;\n        default:\n            AT_ERROR(\"upsample_nearest2d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::upsample_nearest2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef>(grad_input, grad_output, output_size, input_size);\n#endif\n}\n", "static inline Tensor upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)))) {\n        case Backend::CPU:\n            return CPUType::upsample_nearest2d_backward(grad_output, output_size, input_size);\n            break;\n        default:\n            AT_ERROR(\"upsample_nearest2d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::upsample_nearest2d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)), grad_output, output_size, input_size);\n#endif\n}\n", "static inline Tensor & upsample_nearest3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::upsample_nearest3d_out(out, self, output_size);\n            break;\n        default:\n            AT_ERROR(\"upsample_nearest3d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::upsample_nearest3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef>(out, self, output_size);\n#endif\n}\n", "static inline Tensor upsample_nearest3d(const Tensor & self, IntArrayRef output_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::upsample_nearest3d(self, output_size);\n            break;\n        default:\n            AT_ERROR(\"upsample_nearest3d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::upsample_nearest3d\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, output_size);\n#endif\n}\n", "static inline Tensor & upsample_nearest3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output)))) {\n        case Backend::CPU:\n            return CPUType::upsample_nearest3d_backward_out(grad_input, grad_output, output_size, input_size);\n            break;\n        default:\n            AT_ERROR(\"upsample_nearest3d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::upsample_nearest3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef>(grad_input, grad_output, output_size, input_size);\n#endif\n}\n", "static inline Tensor upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)))) {\n        case Backend::CPU:\n            return CPUType::upsample_nearest3d_backward(grad_output, output_size, input_size);\n            break;\n        default:\n            AT_ERROR(\"upsample_nearest3d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::upsample_nearest3d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)), grad_output, output_size, input_size);\n#endif\n}\n", "static inline Tensor & sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, output)))) {\n        case Backend::CPU:\n            return CPUType::sigmoid_backward_out(grad_input, grad_output, output);\n            break;\n        default:\n            AT_ERROR(\"sigmoid_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, output)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::sigmoid_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(grad_input, grad_output, output);\n#endif\n}\n", "static inline Tensor sigmoid_backward(const Tensor & grad_output, const Tensor & output) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, output)))) {\n        case Backend::CPU:\n            return CPUType::sigmoid_backward(grad_output, output);\n            break;\n        default:\n            AT_ERROR(\"sigmoid_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, output)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::sigmoid_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, output)), grad_output, output);\n#endif\n}\n", "static inline Tensor & tanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, output)))) {\n        case Backend::CPU:\n            return CPUType::tanh_backward_out(grad_input, grad_output, output);\n            break;\n        default:\n            AT_ERROR(\"tanh_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output, output)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::tanh_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &>(grad_input, grad_output, output);\n#endif\n}\n", "static inline Tensor tanh_backward(const Tensor & grad_output, const Tensor & output) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, output)))) {\n        case Backend::CPU:\n            return CPUType::tanh_backward(grad_output, output);\n            break;\n        default:\n            AT_ERROR(\"tanh_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, output)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::tanh_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxed<Tensor, const Tensor &, const Tensor &>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, output)), grad_output, output);\n#endif\n}\n", "static inline Tensor & slow_conv_transpose2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, weight, bias)))) {\n        case Backend::CPU:\n            return CPUType::slow_conv_transpose2d_out(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);\n            break;\n        default:\n            AT_ERROR(\"slow_conv_transpose2d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::slow_conv_transpose2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);\n#endif\n}\n", "static inline Tensor slow_conv_transpose2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)))) {\n        case Backend::CPU:\n            return CPUType::slow_conv_transpose2d(self, weight, kernel_size, bias, stride, padding, output_padding, dilation);\n            break;\n        default:\n            AT_ERROR(\"slow_conv_transpose2d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::slow_conv_transpose2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(self, weight, kernel_size, bias, stride, padding, output_padding, dilation);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_weight, grad_bias, grad_output, self, weight, columns, ones)))) {\n        case Backend::CPU:\n            return CPUType::slow_conv_transpose2d_backward_out(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones);\n            break;\n        default:\n            AT_ERROR(\"slow_conv_transpose2d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_weight, grad_bias, grad_output, self, weight, columns, ones)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::slow_conv_transpose2d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight, Tensor?(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &,Tensor &>, Tensor &, Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &>(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight, columns, ones)))) {\n        case Backend::CPU:\n            return CPUType::slow_conv_transpose2d_backward(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, output_mask);\n            break;\n        default:\n            AT_ERROR(\"slow_conv_transpose2d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight, columns, ones)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::slow_conv_transpose2d_backward\", \"output_mask\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight, columns, ones)), grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, output_mask);\n#endif\n}\n", "static inline Tensor & slow_conv_transpose3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, weight, bias)))) {\n        case Backend::CPU:\n            return CPUType::slow_conv_transpose3d_out(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);\n            break;\n        default:\n            AT_ERROR(\"slow_conv_transpose3d_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::slow_conv_transpose3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);\n#endif\n}\n", "static inline Tensor slow_conv_transpose3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)))) {\n        case Backend::CPU:\n            return CPUType::slow_conv_transpose3d(self, weight, kernel_size, bias, stride, padding, output_padding, dilation);\n            break;\n        default:\n            AT_ERROR(\"slow_conv_transpose3d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::slow_conv_transpose3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(self, weight, kernel_size, bias, stride, padding, output_padding, dilation);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_weight, grad_bias, grad_output, self, weight, finput, fgrad_input)))) {\n        case Backend::CPU:\n            return CPUType::slow_conv_transpose3d_backward_out(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input);\n            break;\n        default:\n            AT_ERROR(\"slow_conv_transpose3d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_weight, grad_bias, grad_output, self, weight, finput, fgrad_input)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::slow_conv_transpose3d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight, Tensor?(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &,Tensor &>, Tensor &, Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &>(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight, finput, fgrad_input)))) {\n        case Backend::CPU:\n            return CPUType::slow_conv_transpose3d_backward(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, output_mask);\n            break;\n        default:\n            AT_ERROR(\"slow_conv_transpose3d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight, finput, fgrad_input)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::slow_conv_transpose3d_backward\", \"output_mask\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight, finput, fgrad_input)), grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, output_mask);\n#endif\n}\n", "static inline Tensor & thnn_conv2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::thnn_conv2d_out(out, self, weight, kernel_size, bias, stride, padding);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::thnn_conv2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef>(out, self, weight, kernel_size, bias, stride, padding);\n#endif\n}\n", "static inline Tensor thnn_conv2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::thnn_conv2d(self, weight, kernel_size, bias, stride, padding);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::thnn_conv2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef>(self, weight, kernel_size, bias, stride, padding);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(output, finput, fgrad_input, self, weight, bias)))) {\n        case Backend::CPU:\n            return CPUType::thnn_conv2d_forward_out(output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding);\n            break;\n        default:\n            AT_ERROR(\"thnn_conv2d_forward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(output, finput, fgrad_input, self, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::thnn_conv2d_forward.output(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &,Tensor &>, Tensor &, Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef>(output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)))) {\n        case Backend::CPU:\n            return CPUType::thnn_conv2d_forward(self, weight, kernel_size, bias, stride, padding);\n            break;\n        default:\n            AT_ERROR(\"thnn_conv2d_forward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::thnn_conv2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef>(self, weight, kernel_size, bias, stride, padding);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_weight, grad_bias, grad_output, self, weight, finput, fgrad_input)))) {\n        case Backend::CPU:\n            return CPUType::thnn_conv2d_backward_out(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input);\n            break;\n        default:\n            AT_ERROR(\"thnn_conv2d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_weight, grad_bias, grad_output, self, weight, finput, fgrad_input)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::thnn_conv2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight, Tensor?(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &,Tensor &>, Tensor &, Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &>(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight, finput, fgrad_input)))) {\n        case Backend::CPU:\n            return CPUType::thnn_conv2d_backward(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);\n            break;\n        default:\n            AT_ERROR(\"thnn_conv2d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight, finput, fgrad_input)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::thnn_conv2d_backward\", \"output_mask\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight, finput, fgrad_input)), grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);\n#endif\n}\n", "static inline Tensor & thnn_conv_depthwise2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::thnn_conv_depthwise2d_out(out, self, weight, kernel_size, bias, stride, padding, dilation);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::thnn_conv_depthwise2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef>(out, self, weight, kernel_size, bias, stride, padding, dilation);\n#endif\n}\n", "static inline Tensor thnn_conv_depthwise2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::thnn_conv_depthwise2d(self, weight, kernel_size, bias, stride, padding, dilation);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::thnn_conv_depthwise2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef>(self, weight, kernel_size, bias, stride, padding, dilation);\n#endif\n}\n", "static inline Tensor & thnn_conv_depthwise2d_forward_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self, weight, bias)))) {\n    \n        default:\n            AT_ERROR(\"thnn_conv_depthwise2d_forward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::thnn_conv_depthwise2d_forward.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef>(out, self, weight, kernel_size, bias, stride, padding, dilation);\n#endif\n}\n", "static inline Tensor thnn_conv_depthwise2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)))) {\n    \n        default:\n            AT_ERROR(\"thnn_conv_depthwise2d_forward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::thnn_conv_depthwise2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef>(self, weight, kernel_size, bias, stride, padding, dilation);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &> thnn_conv_depthwise2d_backward_out(Tensor & grad_input, Tensor & grad_weight, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_weight, grad_output, self, weight)))) {\n    \n        default:\n            AT_ERROR(\"thnn_conv_depthwise2d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_weight, grad_output, self, weight)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::thnn_conv_depthwise2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight) -> (Tensor(a!), Tensor(b!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &>, Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(grad_input, grad_weight, grad_output, self, weight, kernel_size, stride, padding, dilation);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor> thnn_conv_depthwise2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,2> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight)))) {\n    \n        default:\n            AT_ERROR(\"thnn_conv_depthwise2d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::thnn_conv_depthwise2d_backward\", \"output_mask\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, std::array<bool,2>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight)), grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);\n#endif\n}\n", "static inline Tensor & thnn_conv3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::thnn_conv3d_out(out, self, weight, kernel_size, bias, stride, padding);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::thnn_conv3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef>(out, self, weight, kernel_size, bias, stride, padding);\n#endif\n}\n", "static inline Tensor thnn_conv3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    return TypeDefault::thnn_conv3d(self, weight, kernel_size, bias, stride, padding);\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::thnn_conv3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef>(self, weight, kernel_size, bias, stride, padding);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv3d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(output, finput, fgrad_input, self, weight, bias)))) {\n        case Backend::CPU:\n            return CPUType::thnn_conv3d_forward_out(output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding);\n            break;\n        default:\n            AT_ERROR(\"thnn_conv3d_forward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(output, finput, fgrad_input, self, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::thnn_conv3d_forward.output(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &,Tensor &>, Tensor &, Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef>(output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> thnn_conv3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)))) {\n        case Backend::CPU:\n            return CPUType::thnn_conv3d_forward(self, weight, kernel_size, bias, stride, padding);\n            break;\n        default:\n            AT_ERROR(\"thnn_conv3d_forward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::thnn_conv3d_forward(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)\");\n    return table->callUnboxed<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef>(self, weight, kernel_size, bias, stride, padding);\n#endif\n}\n", "static inline std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_weight, grad_bias, grad_output, self, weight, finput, fgrad_input)))) {\n        case Backend::CPU:\n            return CPUType::thnn_conv3d_backward_out(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input);\n            break;\n        default:\n            AT_ERROR(\"thnn_conv3d_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_weight, grad_bias, grad_output, self, weight, finput, fgrad_input)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::thnn_conv3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight, Tensor?(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))\");\n    return table->callUnboxed<std::tuple<Tensor &,Tensor &,Tensor &>, Tensor &, Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &>(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> thnn_conv3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight, finput, fgrad_input)))) {\n        case Backend::CPU:\n            return CPUType::thnn_conv3d_backward(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);\n            break;\n        default:\n            AT_ERROR(\"thnn_conv3d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight, finput, fgrad_input)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::thnn_conv3d_backward\", \"output_mask\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight, finput, fgrad_input)), grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);\n#endif\n}\n", "static inline Tensor slow_conv_dilated2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)))) {\n        case Backend::CPU:\n            return CPUType::slow_conv_dilated2d(self, weight, kernel_size, bias, stride, padding, dilation);\n            break;\n        default:\n            AT_ERROR(\"slow_conv_dilated2d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::slow_conv_dilated2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef>(self, weight, kernel_size, bias, stride, padding, dilation);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight)))) {\n        case Backend::CPU:\n            return CPUType::slow_conv_dilated2d_backward(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);\n            break;\n        default:\n            AT_ERROR(\"slow_conv_dilated2d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::slow_conv_dilated2d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, std::array<bool,3>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight)), grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);\n#endif\n}\n", "static inline Tensor slow_conv_dilated3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)))) {\n        case Backend::CPU:\n            return CPUType::slow_conv_dilated3d(self, weight, kernel_size, bias, stride, padding, dilation);\n            break;\n        default:\n            AT_ERROR(\"slow_conv_dilated3d not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self, weight, bias)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::slow_conv_dilated3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef>(self, weight, kernel_size, bias, stride, padding, dilation);\n#endif\n}\n", "static inline std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight)))) {\n        case Backend::CPU:\n            return CPUType::slow_conv_dilated3d_backward(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);\n            break;\n        default:\n            AT_ERROR(\"slow_conv_dilated3d_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::slow_conv_dilated3d_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, std::array<bool,3>>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output, self, weight)), grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);\n#endif\n}\n", "static inline Tensor & col2im_out(Tensor & out, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::col2im_out(out, self, output_size, kernel_size, dilation, padding, stride);\n            break;\n        default:\n            AT_ERROR(\"col2im_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::col2im.out(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(out, self, output_size, kernel_size, dilation, padding, stride);\n#endif\n}\n", "static inline Tensor col2im(const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::col2im(self, output_size, kernel_size, dilation, padding, stride);\n            break;\n        default:\n            AT_ERROR(\"col2im not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::col2im\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, output_size, kernel_size, dilation, padding, stride);\n#endif\n}\n", "static inline Tensor & col2im_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output)))) {\n        case Backend::CPU:\n            return CPUType::col2im_backward_out(grad_input, grad_output, kernel_size, dilation, padding, stride);\n            break;\n        default:\n            AT_ERROR(\"col2im_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::col2im_backward.grad_input(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(grad_input, grad_output, kernel_size, dilation, padding, stride);\n#endif\n}\n", "static inline Tensor col2im_backward(const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)))) {\n        case Backend::CPU:\n            return CPUType::col2im_backward(grad_output, kernel_size, dilation, padding, stride);\n            break;\n        default:\n            AT_ERROR(\"col2im_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::col2im_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)), grad_output, kernel_size, dilation, padding, stride);\n#endif\n}\n", "static inline Tensor & im2col_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::im2col_out(out, self, kernel_size, dilation, padding, stride);\n            break;\n        default:\n            AT_ERROR(\"im2col_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::im2col.out(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(out, self, kernel_size, dilation, padding, stride);\n#endif\n}\n", "static inline Tensor im2col(const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::im2col(self, kernel_size, dilation, padding, stride);\n            break;\n        default:\n            AT_ERROR(\"im2col not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::im2col\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)), self, kernel_size, dilation, padding, stride);\n#endif\n}\n", "static inline Tensor & im2col_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output)))) {\n        case Backend::CPU:\n            return CPUType::im2col_backward_out(grad_input, grad_output, input_size, kernel_size, dilation, padding, stride);\n            break;\n        default:\n            AT_ERROR(\"im2col_backward_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_input, grad_output)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::im2col_backward.grad_input(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(grad_input, grad_output, input_size, kernel_size, dilation, padding, stride);\n#endif\n}\n", "static inline Tensor im2col_backward(const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)))) {\n        case Backend::CPU:\n            return CPUType::im2col_backward(grad_output, input_size, kernel_size, dilation, padding, stride);\n            break;\n        default:\n            AT_ERROR(\"im2col_backward not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(grad_output)));\n    }\n#else\n    static c10::OperatorHandle op = c10::Dispatcher::singleton()\n        .findSchema({\"aten::im2col_backward\", \"\"}).value();\n    return c10::Dispatcher::singleton().callUnboxedOnly<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(\n        op, impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(grad_output)), grad_output, input_size, kernel_size, dilation, padding, stride);\n#endif\n}\n", "static inline Tensor & rivergold_test_out(Tensor & out, const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(out, self)))) {\n        case Backend::CPU:\n            return CPUType::rivergold_test_out(out, self);\n            break;\n        default:\n            AT_ERROR(\"rivergold_test_out not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(out, self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::rivergold_test(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\");\n    return table->callUnboxed<Tensor &, Tensor &, const Tensor &>(out, self);\n#endif\n}\n", "static inline Tensor rivergold_test(const Tensor & self) {\n#ifdef USE_STATIC_DISPATCH\n    switch(tensorTypeIdToBackend(impl::dispatchTypeId(at::detail::multi_dispatch_tensor_type_set(self)))) {\n        case Backend::CPU:\n            return CPUType::rivergold_test(self);\n            break;\n        default:\n            AT_ERROR(\"rivergold_test not implemented for \", at::toString(at::detail::multi_dispatch_tensor_type_set(self)));\n    }\n#else\n    static auto table = globalATenDispatch().getOpTable(\"aten::rivergold_test.raw(Tensor self) -> Tensor\");\n    return table->callUnboxed<Tensor, const Tensor &>(self);\n#endif\n}\n"], "type_ids": [], "native_function_declarations": ["CAFFE2_API Tensor _cast_Byte(const Tensor & self, bool non_blocking=false);\n", "CAFFE2_API Tensor _cast_Char(const Tensor & self, bool non_blocking=false);\n", "CAFFE2_API Tensor _cast_Double(const Tensor & self, bool non_blocking=false);\n", "CAFFE2_API Tensor _cast_Float(const Tensor & self, bool non_blocking=false);\n", "CAFFE2_API Tensor _cast_Int(const Tensor & self, bool non_blocking=false);\n", "CAFFE2_API Tensor _cast_Long(const Tensor & self, bool non_blocking=false);\n", "CAFFE2_API Tensor _cast_Short(const Tensor & self, bool non_blocking=false);\n", "CAFFE2_API Tensor _cast_Half(const Tensor & self, bool non_blocking=false);\n", "CAFFE2_API void backward(const Tensor & self, const Tensor & gradient={}, bool keep_graph=false, bool create_graph=false);\n", "CAFFE2_API void set_data(const Tensor & self, const Tensor & new_data);\n", "CAFFE2_API Tensor data(const Tensor & self);\n", "CAFFE2_API bool is_leaf(const Tensor & self);\n", "CAFFE2_API int64_t output_nr(const Tensor & self);\n", "CAFFE2_API int64_t _version(const Tensor & self);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & rename_(Tensor & self, c10::optional<DimnameList> names);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor rename(const Tensor & self, c10::optional<DimnameList> names);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor align_to(const Tensor & self, DimnameList names);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor align_as(const Tensor & self, const Tensor & other);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API std::vector<Tensor> align_tensors(TensorList tensors);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor refine_names(const Tensor & self, DimnameList names);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor unflatten(const Tensor & self, Dimname dim, IntArrayRef sizes, DimnameList names);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor unflatten(const Tensor & self, int64_t dim, IntArrayRef sizes, DimnameList names);\n#endif", "CAFFE2_API std::tuple<Tensor,Tensor> _cudnn_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool deterministic, bool zero_infinity);\n", "CAFFE2_API Tensor _cudnn_rnn_flatten_weight(TensorList weight_arr, int64_t weight_stride0, int64_t input_size, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, bool bidirectional);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _cudnn_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> _cudnn_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, const Tensor & output, const Tensor & grad_output, const Tensor & grad_hy, const Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask);\n", "CAFFE2_API Tensor _cudnn_init_dropout_state(double dropout, bool train, int64_t dropout_seed, const TensorOptions & options);\n", "CAFFE2_API int64_t _debug_has_internal_overlap(const Tensor & self);\n", "CAFFE2_API std::tuple<Tensor,Tensor> fused_dropout_cuda(const Tensor & self, double p, Generator * generator=nullptr);\n", "CAFFE2_API Tensor masked_scale_cuda(const Tensor & self, const Tensor & mask, double scale);\n", "CAFFE2_API std::tuple<Tensor,Tensor> _sobol_engine_draw(const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype);\n", "CAFFE2_API Tensor & _sobol_engine_ff_(Tensor & self, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated);\n", "CAFFE2_API Tensor & _sobol_engine_scramble_(Tensor & self, const Tensor & ltm, int64_t dimension);\n", "CAFFE2_API Tensor & _sobol_engine_initialize_state_(Tensor & self, int64_t dimension);\n", "CAFFE2_API Tensor _reshape_from_tensor(const Tensor & self, const Tensor & shape);\n", "CAFFE2_API Tensor _shape_as_tensor(const Tensor & self);\n", "CAFFE2_API Tensor dropout(const Tensor & input, double p, bool train);\n", "CAFFE2_API Tensor & dropout_(Tensor & self, double p, bool train);\n", "CAFFE2_API Tensor feature_dropout(const Tensor & input, double p, bool train);\n", "CAFFE2_API Tensor & feature_dropout_(Tensor & self, double p, bool train);\n", "CAFFE2_API Tensor alpha_dropout(const Tensor & input, double p, bool train);\n", "CAFFE2_API Tensor & alpha_dropout_(Tensor & self, double p, bool train);\n", "CAFFE2_API Tensor feature_alpha_dropout(const Tensor & input, double p, bool train);\n", "CAFFE2_API Tensor & feature_alpha_dropout_(Tensor & self, double p, bool train);\n", "CAFFE2_API Tensor abs(const Tensor & self);\n", "CAFFE2_API Tensor & _abs__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _abs__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _abs_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _abs_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor acos(const Tensor & self);\n", "CAFFE2_API Tensor & _acos__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _acos__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _acos_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _acos_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor avg_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true);\n", "CAFFE2_API Tensor adaptive_avg_pool1d(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API std::tuple<Tensor,Tensor> adaptive_max_pool1d(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor add(const Tensor & self, const Tensor & other, Scalar alpha=1);\n", "CAFFE2_API Tensor mkldnn_add(const Tensor & self, const Tensor & other, Scalar alpha=1);\n", "CAFFE2_API Tensor add_sparse(const Tensor & self, const Tensor & other, Scalar alpha=1);\n", "CAFFE2_API Tensor & add_(Tensor & self, const Tensor & other, Scalar alpha=1);\n", "CAFFE2_API Tensor & mkldnn_add_(Tensor & self, const Tensor & other, Scalar alpha=1);\n", "CAFFE2_API Tensor & add_sparse_(Tensor & self, const Tensor & other, Scalar alpha=1);\n", "CAFFE2_API Tensor & add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha=1);\n", "CAFFE2_API Tensor & mkldnn_add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha=1);\n", "CAFFE2_API Tensor & add_out_sparse_cpu(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha=1);\n", "CAFFE2_API Tensor & add_out_sparse_cuda(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha=1);\n", "CAFFE2_API Tensor add(const Tensor & self, Scalar other, Scalar alpha=1);\n", "CAFFE2_API Tensor & add_(Tensor & self, Scalar other, Scalar alpha=1);\n", "CAFFE2_API Tensor addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor & addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor & addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor affine_grid_generator(const Tensor & theta, IntArrayRef size, bool align_corners);\n", "CAFFE2_API Tensor affine_grid_generator_backward(const Tensor & grad, IntArrayRef size, bool align_corners);\n", "CAFFE2_API Tensor all(const Tensor & self, int64_t dim, bool keepdim=false);\n", "CAFFE2_API Tensor & all_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor all(const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & all_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "CAFFE2_API bool allclose(const Tensor & self, const Tensor & other, double rtol=1e-05, double atol=1e-08, bool equal_nan=false);\n", "CAFFE2_API Tensor any(const Tensor & self, int64_t dim, bool keepdim=false);\n", "CAFFE2_API Tensor & any_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor any(const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & any_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "CAFFE2_API Tensor arange(Scalar end, const TensorOptions & options={});\n", "CAFFE2_API Tensor arange(Scalar start, Scalar end, const TensorOptions & options={});\n", "CAFFE2_API Tensor arange(Scalar start, Scalar end, Scalar step, const TensorOptions & options={});\n", "CAFFE2_API Tensor & arange_out(Tensor & out, Scalar end);\n", "CAFFE2_API Tensor & arange_cpu_out(Tensor & out, Scalar start, Scalar end, Scalar step=1);\n", "CAFFE2_API Tensor & arange_cuda_out(Tensor & out, Scalar start, Scalar end, Scalar step=1);\n", "CAFFE2_API Tensor _dim_arange(const Tensor & like, int64_t dim);\n", "CAFFE2_API Tensor argmax(const Tensor & self, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);\n", "CAFFE2_API Tensor argmin(const Tensor & self, c10::optional<int64_t> dim=c10::nullopt, bool keepdim=false);\n", "CAFFE2_API Tensor as_strided_tensorimpl(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset=c10::nullopt);\n", "CAFFE2_API Tensor as_strided_qtensorimpl(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset=c10::nullopt);\n", "CAFFE2_API Tensor & as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset=c10::nullopt);\n", "CAFFE2_API Tensor asin(const Tensor & self);\n", "CAFFE2_API Tensor & _asin__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _asin__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _asin_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _asin_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor atan(const Tensor & self);\n", "CAFFE2_API Tensor & _atan__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _atan__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _atan_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _atan_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor baddbmm_cpu(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor baddbmm_cuda(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor & baddbmm__cpu(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor & baddbmm__cuda(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor & _baddbmm_mkl_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor & baddbmm_out_cpu(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor & baddbmm_out_cuda(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor bartlett_window(int64_t window_length, const TensorOptions & options={});\n", "CAFFE2_API Tensor bartlett_window(int64_t window_length, bool periodic, const TensorOptions & options={});\n", "CAFFE2_API Tensor batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor,int64_t> _batch_norm_impl_index(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> _batch_norm_impl_index_backward(int64_t impl_index, const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var_transform, bool train, double eps, std::array<bool,3> output_mask);\n", "CAFFE2_API Tensor bernoulli(const Tensor & self, Generator * generator=nullptr);\n", "CAFFE2_API Tensor & bernoulli_out(Tensor & out, const Tensor & self, Generator * generator=nullptr);\n", "CAFFE2_API Tensor & bernoulli_tensor_cpu_(Tensor & self, const Tensor & p, Generator * generator=nullptr);\n", "CAFFE2_API Tensor & bernoulli_tensor_cuda_(Tensor & self, const Tensor & p, Generator * generator=nullptr);\n", "CAFFE2_API Tensor & bernoulli_scalar_cpu_(Tensor & self, double p=0.5, Generator * generator=nullptr);\n", "CAFFE2_API Tensor & bernoulli_scalar_cuda_(Tensor & self, double p=0.5, Generator * generator=nullptr);\n", "CAFFE2_API Tensor bernoulli(const Tensor & self, double p, Generator * generator=nullptr);\n", "CAFFE2_API Tensor bilinear(const Tensor & input1, const Tensor & input2, const Tensor & weight, const Tensor & bias);\n", "CAFFE2_API Tensor binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const Tensor & weight={}, const Tensor & pos_weight={}, int64_t reduction=Reduction::Mean);\n", "CAFFE2_API Tensor binary_cross_entropy_with_logits_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight={}, const Tensor & pos_weight={}, int64_t reduction=Reduction::Mean);\n", "CAFFE2_API Tensor _bincount_cpu(const Tensor & self, const Tensor & weights={}, int64_t minlength=0);\n", "CAFFE2_API Tensor _bincount_cuda(const Tensor & self, const Tensor & weights={}, int64_t minlength=0);\n", "CAFFE2_API Tensor bitwise_not(const Tensor & self);\n", "CAFFE2_API Tensor & bitwise_not_(Tensor & self);\n", "CAFFE2_API Tensor & bitwise_not_out(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor logical_not(const Tensor & self);\n", "CAFFE2_API Tensor & logical_not_(Tensor & self);\n", "CAFFE2_API Tensor & logical_not_out(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor logical_xor(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & logical_xor_(Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & logical_xor_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor blackman_window(int64_t window_length, const TensorOptions & options={});\n", "CAFFE2_API Tensor blackman_window(int64_t window_length, bool periodic, const TensorOptions & options={});\n", "CAFFE2_API Tensor bmm_cpu(const Tensor & self, const Tensor & mat2);\n", "CAFFE2_API Tensor bmm_cuda(const Tensor & self, const Tensor & mat2);\n", "CAFFE2_API Tensor & bmm_out_cpu(Tensor & out, const Tensor & self, const Tensor & mat2);\n", "CAFFE2_API Tensor & bmm_out_cuda(Tensor & out, const Tensor & self, const Tensor & mat2);\n", "CAFFE2_API std::vector<Tensor> broadcast_tensors(TensorList tensors);\n", "CAFFE2_API Tensor cat(TensorList tensors, int64_t dim=0);\n", "CAFFE2_API Tensor & cat_out(Tensor & out, TensorList tensors, int64_t dim=0);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor cat(TensorList tensors, Dimname dim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & cat_out(Tensor & out, TensorList tensors, Dimname dim);\n#endif", "CAFFE2_API Tensor ceil(const Tensor & self);\n", "CAFFE2_API Tensor & ceil_(Tensor & self);\n", "CAFFE2_API Tensor & ceil_out(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor chain_matmul(TensorList matrices);\n", "CAFFE2_API std::vector<Tensor> chunk(const Tensor & self, int64_t chunks, int64_t dim=0);\n", "CAFFE2_API Tensor clamp(const Tensor & self, c10::optional<Scalar> min=c10::nullopt, c10::optional<Scalar> max=c10::nullopt);\n", "CAFFE2_API Tensor & _clamp__cpu(Tensor & self, c10::optional<Scalar> min=c10::nullopt, c10::optional<Scalar> max=c10::nullopt);\n", "CAFFE2_API Tensor & _clamp__cuda(Tensor & self, c10::optional<Scalar> min=c10::nullopt, c10::optional<Scalar> max=c10::nullopt);\n", "CAFFE2_API Tensor & _clamp_out_cpu(Tensor & out, const Tensor & self, c10::optional<Scalar> min=c10::nullopt, c10::optional<Scalar> max=c10::nullopt);\n", "CAFFE2_API Tensor & _clamp_out_cuda(Tensor & out, const Tensor & self, c10::optional<Scalar> min=c10::nullopt, c10::optional<Scalar> max=c10::nullopt);\n", "CAFFE2_API Tensor clamp_max(const Tensor & self, Scalar max);\n", "CAFFE2_API Tensor & _clamp_max__cpu(Tensor & self, Scalar max);\n", "CAFFE2_API Tensor & _clamp_max__cuda(Tensor & self, Scalar max);\n", "CAFFE2_API Tensor & _clamp_max_out_cpu(Tensor & out, const Tensor & self, Scalar max);\n", "CAFFE2_API Tensor & _clamp_max_out_cuda(Tensor & out, const Tensor & self, Scalar max);\n", "CAFFE2_API Tensor clamp_min(const Tensor & self, Scalar min);\n", "CAFFE2_API Tensor & _clamp_min__cpu(Tensor & self, Scalar min);\n", "CAFFE2_API Tensor & _clamp_min__cuda(Tensor & self, Scalar min);\n", "CAFFE2_API Tensor & _clamp_min_out_cpu(Tensor & out, const Tensor & self, Scalar min);\n", "CAFFE2_API Tensor & _clamp_min_out_cuda(Tensor & out, const Tensor & self, Scalar min);\n", "CAFFE2_API bool cudnn_is_acceptable(const Tensor & self);\n", "CAFFE2_API Tensor constant_pad_nd(const Tensor & self, IntArrayRef pad, Scalar value=0);\n", "CAFFE2_API Tensor contiguous(const Tensor & self, MemoryFormat memory_format=MemoryFormat::Contiguous);\n", "CAFFE2_API Tensor convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups);\n", "CAFFE2_API Tensor convolution_overrideable(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> convolution_backward_overrideable(const Tensor & grad_output, const Tensor & input, const Tensor & weight, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, std::array<bool,3> output_mask);\n", "CAFFE2_API Tensor _convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled);\n", "CAFFE2_API Tensor _convolution_nogroup(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> _convolution_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask);\n", "CAFFE2_API Tensor conv1d(const Tensor & input, const Tensor & weight, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1, int64_t groups=1);\n", "CAFFE2_API Tensor conv2d(const Tensor & input, const Tensor & weight, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1, int64_t groups=1);\n", "CAFFE2_API Tensor conv3d(const Tensor & input, const Tensor & weight, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1, int64_t groups=1);\n", "CAFFE2_API Tensor conv_tbc(const Tensor & self, const Tensor & weight, const Tensor & bias, int64_t pad=0);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> conv_tbc_backward(const Tensor & self, const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t pad);\n", "CAFFE2_API Tensor conv_transpose1d(const Tensor & input, const Tensor & weight, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, int64_t groups=1, IntArrayRef dilation=1);\n", "CAFFE2_API Tensor conv_transpose2d(const Tensor & input, const Tensor & weight, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, int64_t groups=1, IntArrayRef dilation=1);\n", "CAFFE2_API Tensor conv_transpose3d(const Tensor & input, const Tensor & weight, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, int64_t groups=1, IntArrayRef dilation=1);\n", "CAFFE2_API Tensor & copy_(Tensor & self, const Tensor & src, bool non_blocking=false);\n", "CAFFE2_API Tensor cos(const Tensor & self);\n", "CAFFE2_API Tensor & _cos__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _cos__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _cos_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _cos_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor cosh(const Tensor & self);\n", "CAFFE2_API Tensor & _cosh__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _cosh__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _cosh_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _cosh_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor cosine_embedding_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin=0.0, int64_t reduction=Reduction::Mean);\n", "CAFFE2_API Tensor cudnn_affine_grid_generator_forward(const Tensor & theta, int64_t N, int64_t C, int64_t H, int64_t W);\n", "CAFFE2_API Tensor cudnn_affine_grid_generator_backward(const Tensor & grad, int64_t N, int64_t C, int64_t H, int64_t W);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon);\n", "CAFFE2_API Tensor cudnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "CAFFE2_API Tensor cudnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> cudnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);\n", "CAFFE2_API Tensor cudnn_convolution_backward_bias(const Tensor & grad_output);\n", "CAFFE2_API Tensor cudnn_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "CAFFE2_API Tensor cudnn_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> cudnn_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);\n", "CAFFE2_API Tensor cudnn_convolution_backward_bias(const Tensor & grad_output);\n", "CAFFE2_API Tensor cudnn_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "CAFFE2_API Tensor cudnn_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "CAFFE2_API Tensor cudnn_grid_sampler_forward(const Tensor & self, const Tensor & grid);\n", "CAFFE2_API std::tuple<Tensor,Tensor> cudnn_grid_sampler_backward(const Tensor & self, const Tensor & grid, const Tensor & grad_output);\n", "CAFFE2_API Tensor cumsum(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);\n", "CAFFE2_API Tensor & cumsum_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor cumsum(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & cumsum_out(Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "CAFFE2_API Tensor cumprod(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);\n", "CAFFE2_API Tensor & cumprod_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor cumprod(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & cumprod_out(Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "CAFFE2_API Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank=0, int64_t reduction=Reduction::Mean, bool zero_infinity=false);\n", "CAFFE2_API Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, const Tensor & input_lengths, const Tensor & target_lengths, int64_t blank=0, int64_t reduction=Reduction::Mean, bool zero_infinity=false);\n", "CAFFE2_API std::tuple<Tensor,Tensor> ctc_loss_cpu(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank=0, bool zero_infinity=false);\n", "CAFFE2_API std::tuple<Tensor,Tensor> ctc_loss_gpu(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank=0, bool zero_infinity=false);\n", "CAFFE2_API Tensor ctc_loss_backward_cpu(const Tensor & grad, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, const Tensor & neg_log_likelihood, const Tensor & log_alpha, int64_t blank, bool zero_infinity=false);\n", "CAFFE2_API Tensor ctc_loss_backward_gpu(const Tensor & grad, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, const Tensor & neg_log_likelihood, const Tensor & log_alpha, int64_t blank, bool zero_infinity=false);\n", "CAFFE2_API Tensor det(const Tensor & self);\n", "CAFFE2_API Tensor diag_embed(const Tensor & self, int64_t offset=0, int64_t dim1=-2, int64_t dim2=-1);\n", "CAFFE2_API Tensor diagflat(const Tensor & self, int64_t offset=0);\n", "CAFFE2_API Tensor diagonal(const Tensor & self, int64_t offset=0, int64_t dim1=0, int64_t dim2=1);\n", "CAFFE2_API Tensor & fill_diagonal_(Tensor & self, Scalar fill_value, bool wrap=false);\n", "CAFFE2_API Tensor div(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor div_sparse(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & div_(Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & div_sparse_(Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & div_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & div_out_sparse_zerodim(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor div(const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & div_(Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & dot_out(Tensor & out, const Tensor & self, const Tensor & tensor);\n", "CAFFE2_API Tensor einsum(std::string equation, TensorList tensors);\n", "CAFFE2_API Tensor embedding(const Tensor & weight, const Tensor & indices, int64_t padding_idx=-1, bool scale_grad_by_freq=false, bool sparse=false);\n", "CAFFE2_API Tensor embedding_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse);\n", "CAFFE2_API Tensor embedding_dense_backward_cpu(const Tensor & grad_output, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq);\n", "CAFFE2_API Tensor embedding_dense_backward_cuda(const Tensor & grad_output, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq);\n", "CAFFE2_API Tensor & embedding_renorm_cpu_(Tensor & self, const Tensor & indices, double max_norm, double norm_type);\n", "CAFFE2_API Tensor & embedding_renorm_cuda_(Tensor & self, const Tensor & indices, double max_norm, double norm_type);\n", "CAFFE2_API Tensor embedding_sparse_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor,Tensor> embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq=false, int64_t mode=0, bool sparse=false, const Tensor & per_sample_weights={});\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag_cpu(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq=false, int64_t mode=0, bool sparse=false, const Tensor & per_sample_weights={});\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag_cuda(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq=false, int64_t mode=0, bool sparse=false, const Tensor & per_sample_weights={});\n", "CAFFE2_API Tensor _embedding_bag_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights);\n", "CAFFE2_API Tensor _embedding_bag_sparse_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights);\n", "CAFFE2_API Tensor _embedding_bag_dense_backward_cpu(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights);\n", "CAFFE2_API Tensor _embedding_bag_dense_backward_cuda(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights);\n", "CAFFE2_API Tensor _embedding_bag_per_sample_weights_backward_cpu(const Tensor & grad, const Tensor & weight, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, int64_t mode);\n", "CAFFE2_API Tensor _embedding_bag_per_sample_weights_backward_cuda(const Tensor & grad, const Tensor & weight, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, int64_t mode);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor empty(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options={}, c10::optional<MemoryFormat> memory_format=c10::nullopt);\n#endif", "CAFFE2_API Tensor empty_cpu(IntArrayRef size, const TensorOptions & options={}, c10::optional<MemoryFormat> memory_format=c10::nullopt);\n", "CAFFE2_API Tensor empty_cuda(IntArrayRef size, const TensorOptions & options={}, c10::optional<MemoryFormat> memory_format=c10::nullopt);\n", "CAFFE2_API Tensor empty_mkldnn(IntArrayRef size, const TensorOptions & options={}, c10::optional<MemoryFormat> memory_format=c10::nullopt);\n", "CAFFE2_API Tensor empty_sparse(IntArrayRef size, const TensorOptions & options={}, c10::optional<MemoryFormat> memory_format=c10::nullopt);\n", "CAFFE2_API Tensor new_empty(const Tensor & self, IntArrayRef size, const TensorOptions & options={});\n", "CAFFE2_API Tensor new_full(const Tensor & self, IntArrayRef size, Scalar fill_value, const TensorOptions & options={});\n", "CAFFE2_API Tensor empty_affine_quantized_other_backends_stub(IntArrayRef size, const TensorOptions & options={}, double scale=1, int64_t zero_point=0, c10::optional<MemoryFormat> memory_format=MemoryFormat::Contiguous);\n", "CAFFE2_API Tensor empty_affine_quantized_cpu(IntArrayRef size, const TensorOptions & options={}, double scale=1, int64_t zero_point=0, c10::optional<MemoryFormat> memory_format=MemoryFormat::Contiguous);\n", "CAFFE2_API Tensor empty_per_channel_affine_quantized_other_backends_stub(IntArrayRef size, const Tensor & scales, const Tensor & zero_points, int64_t axis, const TensorOptions & options={}, c10::optional<MemoryFormat> memory_format=MemoryFormat::Contiguous);\n", "CAFFE2_API Tensor empty_per_channel_affine_quantized_cpu(IntArrayRef size, const Tensor & scales, const Tensor & zero_points, int64_t axis, const TensorOptions & options={}, c10::optional<MemoryFormat> memory_format=MemoryFormat::Contiguous);\n", "CAFFE2_API Tensor & resize_cpu_(Tensor & self, IntArrayRef size);\n", "CAFFE2_API Tensor & resize_cuda_(Tensor & self, IntArrayRef size);\n", "CAFFE2_API Tensor & quantized_resize_cpu_(Tensor & self, IntArrayRef size);\n", "CAFFE2_API Tensor & empty_out(Tensor & out, IntArrayRef size, c10::optional<MemoryFormat> memory_format=c10::nullopt);\n", "CAFFE2_API Tensor empty_like(const Tensor & self);\n", "CAFFE2_API Tensor empty_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format=MemoryFormat::Contiguous);\n", "CAFFE2_API Tensor empty_strided_cpu(IntArrayRef size, IntArrayRef stride, const TensorOptions & options={});\n", "CAFFE2_API Tensor empty_strided_cuda(IntArrayRef size, IntArrayRef stride, const TensorOptions & options={});\n", "CAFFE2_API Tensor erf(const Tensor & self);\n", "CAFFE2_API Tensor & _erf__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _erf__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _erf_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _erf_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor erfc(const Tensor & self);\n", "CAFFE2_API Tensor & _erfc__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _erfc__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _erfc_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _erfc_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor exp(const Tensor & self);\n", "CAFFE2_API Tensor & _exp__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _exp__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _exp_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _exp_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor expm1(const Tensor & self);\n", "CAFFE2_API Tensor & expm1_(Tensor & self);\n", "CAFFE2_API Tensor & expm1_out(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor expand(const Tensor & self, IntArrayRef size, bool implicit=false);\n", "CAFFE2_API Tensor expand_as(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor eye(int64_t n, const TensorOptions & options={});\n", "CAFFE2_API Tensor eye(int64_t n, int64_t m, const TensorOptions & options={});\n", "CAFFE2_API Tensor & eye_out_cpu(Tensor & out, int64_t n);\n", "CAFFE2_API Tensor & eye_out_cuda(Tensor & out, int64_t n);\n", "CAFFE2_API Tensor & eye_out_cpu(Tensor & out, int64_t n, int64_t m);\n", "CAFFE2_API Tensor & eye_out_cuda(Tensor & out, int64_t n, int64_t m);\n", "CAFFE2_API Tensor flatten(const Tensor & self, int64_t start_dim=0, int64_t end_dim=-1);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor flatten(const Tensor & self, int64_t start_dim, int64_t end_dim, Dimname out_dim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor flatten(const Tensor & self, Dimname start_dim, Dimname end_dim, Dimname out_dim);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor flatten(const Tensor & self, DimnameList dims, Dimname out_dim);\n#endif", "CAFFE2_API Tensor & fill_(Tensor & self, Scalar value);\n", "CAFFE2_API Tensor & fill_(Tensor & self, const Tensor & value);\n", "CAFFE2_API Tensor floor(const Tensor & self);\n", "CAFFE2_API Tensor & floor_(Tensor & self);\n", "CAFFE2_API Tensor & floor_out(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor frac(const Tensor & self);\n", "CAFFE2_API Tensor & _frac__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _frac__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _frac_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _frac_out_cuda(Tensor & out, const Tensor & self);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor full(IntArrayRef size, Scalar fill_value, c10::optional<DimnameList> names, const TensorOptions & options={});\n#endif", "CAFFE2_API Tensor full(IntArrayRef size, Scalar fill_value, const TensorOptions & options={});\n", "CAFFE2_API Tensor & full_out(Tensor & out, IntArrayRef size, Scalar fill_value);\n", "CAFFE2_API Tensor full_like(const Tensor & self, Scalar fill_value);\n", "CAFFE2_API Tensor full_like(const Tensor & self, Scalar fill_value, const TensorOptions & options);\n", "CAFFE2_API Tensor from_file(std::string filename, c10::optional<bool> shared=c10::nullopt, c10::optional<int64_t> size=0, const TensorOptions & options={});\n", "CAFFE2_API Tensor grid_sampler(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);\n", "CAFFE2_API Tensor grid_sampler_2d_cpu(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);\n", "CAFFE2_API Tensor grid_sampler_2d_cuda(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);\n", "CAFFE2_API std::tuple<Tensor,Tensor> grid_sampler_2d_backward_cpu(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);\n", "CAFFE2_API std::tuple<Tensor,Tensor> grid_sampler_2d_backward_cuda(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);\n", "CAFFE2_API Tensor grid_sampler_3d_cpu(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);\n", "CAFFE2_API Tensor grid_sampler_3d_cuda(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);\n", "CAFFE2_API std::tuple<Tensor,Tensor> grid_sampler_3d_backward_cpu(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);\n", "CAFFE2_API std::tuple<Tensor,Tensor> grid_sampler_3d_backward_cuda(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);\n", "CAFFE2_API Tensor hann_window(int64_t window_length, const TensorOptions & options={});\n", "CAFFE2_API Tensor hann_window(int64_t window_length, bool periodic, const TensorOptions & options={});\n", "CAFFE2_API Tensor hamming_window(int64_t window_length, const TensorOptions & options={});\n", "CAFFE2_API Tensor hamming_window(int64_t window_length, bool periodic, const TensorOptions & options={});\n", "CAFFE2_API Tensor hamming_window(int64_t window_length, bool periodic, double alpha, const TensorOptions & options={});\n", "CAFFE2_API Tensor hamming_window(int64_t window_length, bool periodic, double alpha, double beta, const TensorOptions & options={});\n", "CAFFE2_API Tensor hinge_embedding_loss(const Tensor & self, const Tensor & target, double margin=1.0, int64_t reduction=Reduction::Mean);\n", "CAFFE2_API Tensor group_norm(const Tensor & input, int64_t num_groups, const Tensor & weight={}, const Tensor & bias={}, double eps=1e-05, bool cudnn_enabled=true);\n", "CAFFE2_API Tensor fft(const Tensor & self, int64_t signal_ndim, bool normalized=false);\n", "CAFFE2_API Tensor ifft(const Tensor & self, int64_t signal_ndim, bool normalized=false);\n", "CAFFE2_API Tensor rfft(const Tensor & self, int64_t signal_ndim, bool normalized=false, bool onesided=true);\n", "CAFFE2_API Tensor irfft(const Tensor & self, int64_t signal_ndim, bool normalized=false, bool onesided=true, IntArrayRef signal_sizes={});\n", "CAFFE2_API Tensor _fft_mkl(const Tensor & self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, IntArrayRef checked_signal_sizes, bool normalized, bool onesided, IntArrayRef output_sizes);\n", "CAFFE2_API Tensor _fft_cufft(const Tensor & self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, IntArrayRef checked_signal_sizes, bool normalized, bool onesided, IntArrayRef output_sizes);\n", "CAFFE2_API int64_t _cufft_get_plan_cache_size(int64_t device_index);\n", "CAFFE2_API int64_t _cufft_get_plan_cache_max_size(int64_t device_index);\n", "CAFFE2_API void _cufft_set_plan_cache_max_size(int64_t device_index, int64_t max_size);\n", "CAFFE2_API void _cufft_clear_plan_cache(int64_t device_index);\n", "CAFFE2_API Tensor index(const Tensor & self, TensorList indices);\n", "CAFFE2_API Tensor & index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);\n", "CAFFE2_API Tensor index_copy(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & index_copy_(Tensor & self, Dimname dim, const Tensor & index, const Tensor & source);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor index_copy(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source);\n#endif", "CAFFE2_API Tensor & index_put_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate=false);\n", "CAFFE2_API Tensor index_put(const Tensor & self, TensorList indices, const Tensor & values, bool accumulate=false);\n", "CAFFE2_API Tensor & _index_put_impl_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate=false, bool unsafe=false);\n", "CAFFE2_API Tensor instance_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled);\n", "CAFFE2_API Tensor inverse(const Tensor & self);\n", "CAFFE2_API Tensor & inverse_out(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor _inverse_helper_cpu(const Tensor & self);\n", "CAFFE2_API Tensor _inverse_helper_cuda(const Tensor & self);\n", "CAFFE2_API Tensor isclose(const Tensor & self, const Tensor & other, double rtol=1e-05, double atol=1e-08, bool equal_nan=false);\n", "CAFFE2_API Tensor isnan(const Tensor & self);\n", "CAFFE2_API bool is_distributed(const Tensor & self);\n", "CAFFE2_API bool is_floating_point(const Tensor & self);\n", "CAFFE2_API bool is_complex(const Tensor & self);\n", "CAFFE2_API bool is_nonzero(const Tensor & self);\n", "CAFFE2_API bool is_same_size(const Tensor & self, const Tensor & other);\n", "CAFFE2_API bool is_signed(const Tensor & self);\n", "CAFFE2_API Tensor kl_div(const Tensor & self, const Tensor & target, int64_t reduction=Reduction::Mean);\n", "CAFFE2_API Tensor kl_div_backward_cpu(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction=Reduction::Mean);\n", "CAFFE2_API Tensor kl_div_backward_cuda(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction=Reduction::Mean);\n", "CAFFE2_API std::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, int64_t dim=-1, bool keepdim=false);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> kthvalue_out_cpu(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim=-1, bool keepdim=false);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> kthvalue_out_cuda(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim=-1, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API std::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, Dimname dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API std::tuple<Tensor &,Tensor &> kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, Dimname dim, bool keepdim=false);\n#endif", "CAFFE2_API Tensor layer_norm(const Tensor & input, IntArrayRef normalized_shape, const Tensor & weight={}, const Tensor & bias={}, double eps=1e-05, bool cudnn_enable=true);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> layer_norm_cpu(const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t M, int64_t N, double eps);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> layer_norm_backward_cpu(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & rstd, const Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> layer_norm_double_backward_cpu(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & input, const Tensor & mean, const Tensor & rstd, const Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask);\n", "CAFFE2_API Tensor linear(const Tensor & input, const Tensor & weight, const Tensor & bias={});\n", "CAFFE2_API Tensor mkldnn_linear(const Tensor & input, const Tensor & weight, const Tensor & bias={});\n", "CAFFE2_API Tensor fbgemm_linear_int8_weight_fp32_activation(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias);\n", "CAFFE2_API Tensor fbgemm_linear_int8_weight(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias);\n", "CAFFE2_API std::tuple<Tensor,Tensor,double,int64_t> fbgemm_linear_quantize_weight(const Tensor & input);\n", "CAFFE2_API Tensor fbgemm_pack_gemm_matrix_fp16(const Tensor & input);\n", "CAFFE2_API Tensor fbgemm_linear_fp16_weight_fp32_activation(const Tensor & input, const Tensor & packed_weight, const Tensor & bias);\n", "CAFFE2_API Tensor fbgemm_linear_fp16_weight(const Tensor & input, const Tensor & packed_weight, const Tensor & bias);\n", "CAFFE2_API Tensor fbgemm_pack_quantized_matrix(const Tensor & input);\n", "CAFFE2_API Tensor fbgemm_pack_quantized_matrix(const Tensor & input, int64_t K, int64_t N);\n", "CAFFE2_API Tensor linspace(Scalar start, Scalar end, int64_t steps=100, const TensorOptions & options={});\n", "CAFFE2_API Tensor & linspace_cpu_out(Tensor & out, Scalar start, Scalar end, int64_t steps=100);\n", "CAFFE2_API Tensor & linspace_cuda_out(Tensor & out, Scalar start, Scalar end, int64_t steps=100);\n", "CAFFE2_API Tensor log(const Tensor & self);\n", "CAFFE2_API Tensor & log_(Tensor & self);\n", "CAFFE2_API Tensor & log_out(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor log10(const Tensor & self);\n", "CAFFE2_API Tensor & _log10__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _log10__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _log10_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _log10_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor log1p(const Tensor & self);\n", "CAFFE2_API Tensor & _log1p__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _log1p__cuda(Tensor & self);\n", "CAFFE2_API Tensor & log1p_sparse_(Tensor & self);\n", "CAFFE2_API Tensor & _log1p_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _log1p_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & log1p_out_sparse(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor log2(const Tensor & self);\n", "CAFFE2_API Tensor & _log2__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _log2__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _log2_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _log2_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor logdet(const Tensor & self);\n", "CAFFE2_API Tensor logspace(Scalar start, Scalar end, int64_t steps=100, double base=10.0, const TensorOptions & options={});\n", "CAFFE2_API Tensor & logspace_cpu_out(Tensor & out, Scalar start, Scalar end, int64_t steps=100, double base=10.0);\n", "CAFFE2_API Tensor & logspace_cuda_out(Tensor & out, Scalar start, Scalar end, int64_t steps=100, double base=10.0);\n", "CAFFE2_API Tensor log_softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor log_softmax(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "CAFFE2_API Tensor log_softmax_cpu(const Tensor & self, int64_t dim, bool half_to_float);\n", "CAFFE2_API Tensor log_softmax_cuda(const Tensor & self, int64_t dim, bool half_to_float);\n", "CAFFE2_API Tensor log_softmax_backward_cpu(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self);\n", "CAFFE2_API Tensor log_softmax_backward_cuda(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self);\n", "CAFFE2_API Tensor logsumexp(const Tensor & self, IntArrayRef dim, bool keepdim=false);\n", "CAFFE2_API Tensor & logsumexp_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor logsumexp(const Tensor & self, DimnameList dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & logsumexp_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim=false);\n#endif", "CAFFE2_API Tensor margin_ranking_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin=0.0, int64_t reduction=Reduction::Mean);\n", "CAFFE2_API Tensor matmul(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & matmul_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor matrix_rank(const Tensor & self, double tol, bool symmetric=false);\n", "CAFFE2_API Tensor matrix_rank(const Tensor & self, bool symmetric=false);\n", "CAFFE2_API Tensor matrix_power(const Tensor & self, int64_t n);\n", "CAFFE2_API std::tuple<Tensor,Tensor> max(const Tensor & self, int64_t dim, bool keepdim=false);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, int64_t dim, bool keepdim=false);\n", "CAFFE2_API Tensor max_values(const Tensor & self, IntArrayRef dim, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API std::tuple<Tensor,Tensor> max(const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API std::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor max_values(const Tensor & self, DimnameList dim, bool keepdim=false);\n#endif", "CAFFE2_API std::tuple<Tensor,Tensor> max_pool1d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "CAFFE2_API Tensor max_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "CAFFE2_API Tensor max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "CAFFE2_API Tensor mkldnn_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "CAFFE2_API Tensor quantized_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "CAFFE2_API Tensor max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "CAFFE2_API Tensor mean_cpu_gpu(const Tensor & self, c10::optional<ScalarType> dtype=c10::nullopt);\n", "CAFFE2_API Tensor quantized_mean_cpu(const Tensor & self, c10::optional<ScalarType> dtype=c10::nullopt);\n", "CAFFE2_API Tensor mean_cpu_gpu(const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n", "CAFFE2_API Tensor quantized_mean_cpu(const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n", "CAFFE2_API Tensor & mean_out_cpu_gpu(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n", "CAFFE2_API Tensor & quantized_mean_out_cpu(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor mean_cpu_gpu(const Tensor & self, DimnameList dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & mean_out_cpu_gpu(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "CAFFE2_API std::tuple<Tensor,Tensor> median(const Tensor & self, int64_t dim, bool keepdim=false);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API std::tuple<Tensor,Tensor> median(const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API std::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "CAFFE2_API std::tuple<Tensor,Tensor> min(const Tensor & self, int64_t dim, bool keepdim=false);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim=false);\n", "CAFFE2_API Tensor min_values(const Tensor & self, IntArrayRef dim, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API std::tuple<Tensor,Tensor> min(const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API std::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor min_values(const Tensor & self, DimnameList dim, bool keepdim=false);\n#endif", "CAFFE2_API Tensor mkldnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups);\n", "CAFFE2_API Tensor mkldnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined);\n", "CAFFE2_API std::tuple<Tensor,Tensor> mkldnn_convolution_backward_weights(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> mkldnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, std::array<bool,3> output_mask);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon);\n", "CAFFE2_API Tensor miopen_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "CAFFE2_API Tensor miopen_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> miopen_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);\n", "CAFFE2_API Tensor miopen_convolution_backward_bias(const Tensor & grad_output);\n", "CAFFE2_API Tensor miopen_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "CAFFE2_API Tensor miopen_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> miopen_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);\n", "CAFFE2_API Tensor miopen_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "CAFFE2_API Tensor miopen_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "CAFFE2_API Tensor miopen_depthwise_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "CAFFE2_API Tensor miopen_depthwise_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> miopen_depthwise_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask);\n", "CAFFE2_API Tensor miopen_depthwise_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> miopen_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & hx, const Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> miopen_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, const Tensor & output, const Tensor & grad_output, const Tensor & grad_hy, const Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask);\n", "CAFFE2_API Tensor _sparse_mm(const Tensor & self, const Tensor & mat2);\n", "CAFFE2_API Tensor & _sparse_mm_out(Tensor & out, const Tensor & self, const Tensor & mat2);\n", "CAFFE2_API Tensor _sparse_mm(const Tensor & sparse, const Tensor & dense);\n", "CAFFE2_API std::tuple<Tensor,Tensor> mode(const Tensor & self, int64_t dim=-1, bool keepdim=false);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim=-1, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API std::tuple<Tensor,Tensor> mode(const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API std::tuple<Tensor &,Tensor &> mode_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim=false);\n#endif", "CAFFE2_API Tensor mul(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor mkldnn_mul(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor mul_sparse(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & mul_(Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & mkldnn_mul_(Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & mul_sparse_(Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & mul_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & mkldnn_mul_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & mul_out_sparse_cpu(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & mul_out_sparse_cuda(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor mul(const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & mul_(Tensor & self, Scalar other);\n", "CAFFE2_API Tensor mvlgamma(const Tensor & self, int64_t p);\n", "CAFFE2_API Tensor & mvlgamma_(Tensor & self, int64_t p);\n", "CAFFE2_API Tensor narrow_copy_dense(const Tensor & self, int64_t dim, int64_t start, int64_t length);\n", "CAFFE2_API Tensor narrow_copy_sparse(const Tensor & self, int64_t dim, int64_t start, int64_t length);\n", "CAFFE2_API Tensor narrow(const Tensor & self, int64_t dim, int64_t start, int64_t length);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> batch_norm_cpu(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> batch_norm_cuda(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> mkldnn_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps);\n", "CAFFE2_API std::tuple<Tensor,Tensor> batch_norm_stats_cuda(const Tensor & input, double eps);\n", "CAFFE2_API Tensor batch_norm_elemt_cuda(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & mean, const Tensor & invstd, double eps);\n", "CAFFE2_API std::tuple<Tensor,Tensor> batch_norm_gather_stats_cuda(const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & running_mean, const Tensor & running_var, double momentum, double eps, int64_t count);\n", "CAFFE2_API std::tuple<Tensor,Tensor> batch_norm_gather_stats_with_counts_cuda(const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & running_mean, const Tensor & running_var, double momentum, double eps, IntArrayRef counts);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> batch_norm_backward_cpu(const Tensor & grad_out, const Tensor & input, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> batch_norm_backward_cuda(const Tensor & grad_out, const Tensor & input, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor,Tensor> batch_norm_backward_reduce_cuda(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & weight, bool input_g, bool weight_g, bool bias_g);\n", "CAFFE2_API Tensor batch_norm_backward_elemt_cuda(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & weight, const Tensor & mean_dy, const Tensor & mean_dy_xmu);\n", "CAFFE2_API std::tuple<Tensor,Tensor> batch_norm_update_stats_cpu(const Tensor & input, const Tensor & running_mean, const Tensor & running_var, double momentum);\n", "CAFFE2_API std::tuple<Tensor,Tensor> batch_norm_update_stats_cuda(const Tensor & input, const Tensor & running_mean, const Tensor & running_var, double momentum);\n", "CAFFE2_API bool _nnpack_available();\n", "CAFFE2_API Tensor _nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef padding);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> _nnpack_spatial_convolution_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, std::array<bool,3> output_mask);\n", "CAFFE2_API Tensor _nnpack_spatial_convolution_backward_input(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding);\n", "CAFFE2_API Tensor _nnpack_spatial_convolution_backward_weight(const Tensor & input, IntArrayRef weightsize, const Tensor & grad_output, IntArrayRef padding);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor ones(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options={});\n#endif", "CAFFE2_API Tensor ones(IntArrayRef size, const TensorOptions & options={});\n", "CAFFE2_API Tensor & ones_out(Tensor & out, IntArrayRef size);\n", "CAFFE2_API Tensor ones_like(const Tensor & self);\n", "CAFFE2_API Tensor ones_like(const Tensor & self, const TensorOptions & options);\n", "CAFFE2_API Tensor pairwise_distance(const Tensor & x1, const Tensor & x2, double p=2, double eps=1e-06, bool keepdim=false);\n", "CAFFE2_API Tensor cdist(const Tensor & x1, const Tensor & x2, double p=2);\n", "CAFFE2_API Tensor _cdist_backward(const Tensor & grad, const Tensor & x1, const Tensor & x2, double p, const Tensor & cdist);\n", "CAFFE2_API Tensor pdist(const Tensor & self, double p=2);\n", "CAFFE2_API Tensor _pdist_forward(const Tensor & self, double p=2);\n", "CAFFE2_API Tensor _pdist_backward(const Tensor & grad, const Tensor & self, double p, const Tensor & pdist);\n", "CAFFE2_API Tensor cosine_similarity(const Tensor & x1, const Tensor & x2, int64_t dim=1, double eps=1e-08);\n", "CAFFE2_API Tensor permute(const Tensor & self, IntArrayRef dims);\n", "CAFFE2_API Tensor numpy_T(const Tensor & self);\n", "CAFFE2_API Tensor pixel_shuffle(const Tensor & self, int64_t upscale_factor);\n", "CAFFE2_API bool is_pinned(const Tensor & self);\n", "CAFFE2_API Tensor pin_memory(const Tensor & self);\n", "CAFFE2_API Tensor pinverse(const Tensor & self, double rcond=1e-15);\n", "CAFFE2_API Tensor poisson_nll_loss(const Tensor & input, const Tensor & target, bool log_input, bool full, double eps, int64_t reduction);\n", "CAFFE2_API Tensor scalar_tensor(Scalar s, const TensorOptions & options={});\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor rand(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options={});\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor rand(IntArrayRef size, Generator * generator, c10::optional<DimnameList> names, const TensorOptions & options={});\n#endif", "CAFFE2_API Tensor rand(IntArrayRef size, const TensorOptions & options={});\n", "CAFFE2_API Tensor rand(IntArrayRef size, Generator * generator, const TensorOptions & options={});\n", "CAFFE2_API Tensor & rand_out(Tensor & out, IntArrayRef size);\n", "CAFFE2_API Tensor & rand_out(Tensor & out, IntArrayRef size, Generator * generator);\n", "CAFFE2_API Tensor rand_like(const Tensor & self);\n", "CAFFE2_API Tensor rand_like(const Tensor & self, const TensorOptions & options);\n", "CAFFE2_API Tensor randint(int64_t high, IntArrayRef size, const TensorOptions & options={});\n", "CAFFE2_API Tensor randint(int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options={});\n", "CAFFE2_API Tensor randint(int64_t low, int64_t high, IntArrayRef size, const TensorOptions & options={});\n", "CAFFE2_API Tensor randint(int64_t low, int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options={});\n", "CAFFE2_API Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size);\n", "CAFFE2_API Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size, Generator * generator);\n", "CAFFE2_API Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size);\n", "CAFFE2_API Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size, Generator * generator);\n", "CAFFE2_API Tensor randint_like(const Tensor & self, int64_t high);\n", "CAFFE2_API Tensor randint_like(const Tensor & self, int64_t low, int64_t high);\n", "CAFFE2_API Tensor randint_like(const Tensor & self, int64_t high, const TensorOptions & options);\n", "CAFFE2_API Tensor randint_like(const Tensor & self, int64_t low, int64_t high, const TensorOptions & options);\n", "CAFFE2_API Tensor randn(IntArrayRef size, const TensorOptions & options={});\n", "CAFFE2_API Tensor randn(IntArrayRef size, Generator * generator, const TensorOptions & options={});\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor randn(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options={});\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor randn(IntArrayRef size, Generator * generator, c10::optional<DimnameList> names, const TensorOptions & options={});\n#endif", "CAFFE2_API Tensor & randn_out(Tensor & out, IntArrayRef size);\n", "CAFFE2_API Tensor & randn_out(Tensor & out, IntArrayRef size, Generator * generator);\n", "CAFFE2_API Tensor randn_like(const Tensor & self);\n", "CAFFE2_API Tensor randn_like(const Tensor & self, const TensorOptions & options);\n", "CAFFE2_API Tensor randperm(int64_t n, const TensorOptions & options={});\n", "CAFFE2_API Tensor randperm(int64_t n, Generator * generator, const TensorOptions & options={});\n", "CAFFE2_API Tensor & randperm_out(Tensor & out, int64_t n);\n", "CAFFE2_API Tensor & randperm_out_cpu(Tensor & out, int64_t n, Generator * generator);\n", "CAFFE2_API Tensor & randperm_out_cuda(Tensor & out, int64_t n, Generator * generator);\n", "CAFFE2_API Tensor range(Scalar start, Scalar end, Scalar step=1, const TensorOptions & options={});\n", "CAFFE2_API Tensor range(Scalar start, Scalar end, const TensorOptions & options={});\n", "CAFFE2_API Tensor & range_cpu_out(Tensor & out, Scalar start, Scalar end, Scalar step=1);\n", "CAFFE2_API Tensor & range_cuda_out(Tensor & out, Scalar start, Scalar end, Scalar step=1);\n", "CAFFE2_API Tensor reciprocal(const Tensor & self);\n", "CAFFE2_API Tensor & _reciprocal__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _reciprocal__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _reciprocal_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _reciprocal_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor neg(const Tensor & self);\n", "CAFFE2_API Tensor & neg_(Tensor & self);\n", "CAFFE2_API Tensor & neg_out(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor repeat(const Tensor & self, IntArrayRef repeats);\n", "CAFFE2_API Tensor repeat_interleave_cpu(const Tensor & repeats);\n", "CAFFE2_API Tensor repeat_interleave_cuda(const Tensor & repeats);\n", "CAFFE2_API Tensor repeat_interleave(const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim=c10::nullopt);\n", "CAFFE2_API Tensor repeat_interleave(const Tensor & self, int64_t repeats, c10::optional<int64_t> dim=c10::nullopt);\n", "CAFFE2_API Tensor reshape(const Tensor & self, IntArrayRef shape);\n", "CAFFE2_API Tensor mkldnn_reshape(const Tensor & self, IntArrayRef shape);\n", "CAFFE2_API Tensor reshape_as(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor round(const Tensor & self);\n", "CAFFE2_API Tensor & round_(Tensor & self);\n", "CAFFE2_API Tensor & round_out(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor rrelu(const Tensor & self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=false, Generator * generator=nullptr);\n", "CAFFE2_API Tensor & rrelu_(Tensor & self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=false, Generator * generator=nullptr);\n", "CAFFE2_API Tensor relu(const Tensor & self);\n", "CAFFE2_API Tensor mkldnn_relu(const Tensor & self);\n", "CAFFE2_API Tensor quantized_relu(const Tensor & self);\n", "CAFFE2_API Tensor & relu_(Tensor & self);\n", "CAFFE2_API Tensor & mkldnn_relu_(Tensor & self);\n", "CAFFE2_API Tensor & quantized_relu_(Tensor & self);\n", "CAFFE2_API Tensor prelu_cpu(const Tensor & self, const Tensor & weight);\n", "CAFFE2_API Tensor prelu_cuda(const Tensor & self, const Tensor & weight);\n", "CAFFE2_API std::tuple<Tensor,Tensor> prelu_backward_cpu(const Tensor & grad_output, const Tensor & self, const Tensor & weight);\n", "CAFFE2_API std::tuple<Tensor,Tensor> prelu_backward_cuda(const Tensor & grad_output, const Tensor & self, const Tensor & weight);\n", "CAFFE2_API Tensor gelu_cpu(const Tensor & self);\n", "CAFFE2_API Tensor gelu_cuda(const Tensor & self);\n", "CAFFE2_API Tensor gelu_backward_cpu(const Tensor & grad, const Tensor & self);\n", "CAFFE2_API Tensor gelu_backward_cuda(const Tensor & grad, const Tensor & self);\n", "CAFFE2_API Tensor hardshrink_cpu(const Tensor & self, Scalar lambd=0.5);\n", "CAFFE2_API Tensor hardshrink_cuda(const Tensor & self, Scalar lambd=0.5);\n", "CAFFE2_API Tensor hardshrink_backward_cpu(const Tensor & grad_out, const Tensor & self, Scalar lambd);\n", "CAFFE2_API Tensor hardshrink_backward_cuda(const Tensor & grad_out, const Tensor & self, Scalar lambd);\n", "CAFFE2_API Tensor rsqrt(const Tensor & self);\n", "CAFFE2_API Tensor & rsqrt_(Tensor & self);\n", "CAFFE2_API Tensor & rsqrt_out(Tensor & out, const Tensor & self);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor select(const Tensor & self, Dimname dim, int64_t index);\n#endif", "CAFFE2_API Tensor select(const Tensor & self, int64_t dim, int64_t index);\n", "CAFFE2_API Tensor selu(const Tensor & self);\n", "CAFFE2_API Tensor & selu_(Tensor & self);\n", "CAFFE2_API Tensor celu(const Tensor & self, Scalar alpha=1.0);\n", "CAFFE2_API Tensor & celu_(Tensor & self, Scalar alpha=1.0);\n", "CAFFE2_API Tensor sigmoid(const Tensor & self);\n", "CAFFE2_API Tensor mkldnn_sigmoid(const Tensor & self);\n", "CAFFE2_API Tensor & _sigmoid__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _sigmoid__cuda(Tensor & self);\n", "CAFFE2_API Tensor & mkldnn_sigmoid_(Tensor & self);\n", "CAFFE2_API Tensor & _sigmoid_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _sigmoid_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor sin(const Tensor & self);\n", "CAFFE2_API Tensor & _sin__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _sin__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _sin_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _sin_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor sinh(const Tensor & self);\n", "CAFFE2_API Tensor & _sinh__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _sinh__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _sinh_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _sinh_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor detach(const Tensor & self);\n", "CAFFE2_API Tensor & detach_(Tensor & self);\n", "CAFFE2_API int64_t size(const Tensor & self, int64_t dim);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API int64_t size(const Tensor & self, Dimname dim);\n#endif", "CAFFE2_API Tensor slice(const Tensor & self, int64_t dim=0, int64_t start=0, int64_t end=9223372036854775807, int64_t step=1);\n", "CAFFE2_API std::tuple<Tensor,Tensor> slogdet(const Tensor & self);\n", "CAFFE2_API Tensor smm(const Tensor & self, const Tensor & mat2);\n", "CAFFE2_API Tensor softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype=c10::nullopt);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor softmax(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "CAFFE2_API Tensor softmax_cpu(const Tensor & self, int64_t dim, bool half_to_float);\n", "CAFFE2_API Tensor softmax_cuda(const Tensor & self, int64_t dim, bool half_to_float);\n", "CAFFE2_API Tensor mkldnn_softmax(const Tensor & self, int64_t dim, bool half_to_float);\n", "CAFFE2_API Tensor softmax_backward_cpu(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self);\n", "CAFFE2_API Tensor softmax_backward_cuda(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self);\n", "CAFFE2_API std::vector<Tensor> split(const Tensor & self, int64_t split_size, int64_t dim=0);\n", "CAFFE2_API std::vector<Tensor> split_with_sizes(const Tensor & self, IntArrayRef split_sizes, int64_t dim=0);\n", "CAFFE2_API Tensor squeeze(const Tensor & self);\n", "CAFFE2_API Tensor squeeze(const Tensor & self, int64_t dim);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor squeeze(const Tensor & self, Dimname dim);\n#endif", "CAFFE2_API Tensor & squeeze_(Tensor & self);\n", "CAFFE2_API Tensor & squeeze_(Tensor & self, int64_t dim);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & squeeze_(Tensor & self, Dimname dim);\n#endif", "CAFFE2_API Tensor sspaddmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor & _sspaddmm_out_only_sparse(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor & _sspaddmm_out_only_sparse_cuda(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor & _sspaddmm_out_cpu(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor & _sspaddmm_out_cuda(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor stack(TensorList tensors, int64_t dim=0);\n", "CAFFE2_API Tensor & stack_out(Tensor & out, TensorList tensors, int64_t dim=0);\n", "CAFFE2_API Tensor stft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length=c10::nullopt, c10::optional<int64_t> win_length=c10::nullopt, const Tensor & window={}, bool normalized=false, bool onesided=true);\n", "CAFFE2_API int64_t stride(const Tensor & self, int64_t dim);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API int64_t stride(const Tensor & self, Dimname dim);\n#endif", "CAFFE2_API Tensor sum(const Tensor & self, c10::optional<ScalarType> dtype=c10::nullopt);\n", "CAFFE2_API Tensor sum(const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor sum(const Tensor & self, DimnameList dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "CAFFE2_API Tensor & sum_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & sum_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "CAFFE2_API Tensor sum_to_size(const Tensor & self, IntArrayRef size);\n", "CAFFE2_API Tensor sqrt(const Tensor & self);\n", "CAFFE2_API Tensor & _sqrt__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _sqrt__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _sqrt_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _sqrt_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor std(const Tensor & self, bool unbiased=true);\n", "CAFFE2_API Tensor std(const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);\n", "CAFFE2_API std::tuple<Tensor,Tensor> std_mean(const Tensor & self, bool unbiased=true);\n", "CAFFE2_API std::tuple<Tensor,Tensor> std_mean(const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API std::tuple<Tensor,Tensor> std_mean(const Tensor & self, DimnameList dim, bool unbiased=true, bool keepdim=false);\n#endif", "CAFFE2_API Tensor & std_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor std(const Tensor & self, DimnameList dim, bool unbiased=true, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & std_out(Tensor & out, const Tensor & self, DimnameList dim, bool unbiased=true, bool keepdim=false);\n#endif", "CAFFE2_API Tensor prod(const Tensor & self, c10::optional<ScalarType> dtype=c10::nullopt);\n", "CAFFE2_API Tensor prod(const Tensor & self, int64_t dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n", "CAFFE2_API Tensor & prod_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor prod(const Tensor & self, Dimname dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & prod_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim=false, c10::optional<ScalarType> dtype=c10::nullopt);\n#endif", "CAFFE2_API Tensor t(const Tensor & self);\n", "CAFFE2_API Tensor & t_(Tensor & self);\n", "CAFFE2_API Tensor tan(const Tensor & self);\n", "CAFFE2_API Tensor & _tan__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _tan__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _tan_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _tan_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor tanh(const Tensor & self);\n", "CAFFE2_API Tensor & _tanh__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _tanh__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _tanh_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _tanh_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor tensordot(const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other);\n", "CAFFE2_API Tensor threshold(const Tensor & self, Scalar threshold, Scalar value);\n", "CAFFE2_API Tensor & threshold_(Tensor & self, Scalar threshold, Scalar value);\n", "CAFFE2_API Tensor & threshold_out(Tensor & out, const Tensor & self, Scalar threshold, Scalar value);\n", "CAFFE2_API Tensor threshold_backward(const Tensor & grad_output, const Tensor & self, Scalar threshold);\n", "CAFFE2_API Tensor transpose(const Tensor & self, int64_t dim0, int64_t dim1);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor transpose(const Tensor & self, Dimname dim0, Dimname dim1);\n#endif", "CAFFE2_API Tensor mkldnn_transpose(const Tensor & self, int64_t dim0, int64_t dim1);\n", "CAFFE2_API Tensor & transpose_(Tensor & self, int64_t dim0, int64_t dim1);\n", "CAFFE2_API Tensor & mkldnn_transpose_(Tensor & self, int64_t dim0, int64_t dim1);\n", "CAFFE2_API Tensor one_hot(const Tensor & self, int64_t num_classes=-1);\n", "CAFFE2_API Tensor flip_cpu(const Tensor & self, IntArrayRef dims);\n", "CAFFE2_API Tensor flip_cuda(const Tensor & self, IntArrayRef dims);\n", "CAFFE2_API Tensor roll_cpu(const Tensor & self, IntArrayRef shifts, IntArrayRef dims={});\n", "CAFFE2_API Tensor roll_cuda(const Tensor & self, IntArrayRef shifts, IntArrayRef dims={});\n", "CAFFE2_API Tensor rot90(const Tensor & self, int64_t k=1, IntArrayRef dims={0,1});\n", "CAFFE2_API Tensor trapz(const Tensor & y, const Tensor & x, int64_t dim=-1);\n", "CAFFE2_API Tensor trapz(const Tensor & y, double dx=1, int64_t dim=-1);\n", "CAFFE2_API Tensor _trilinear(const Tensor & i1, const Tensor & i2, const Tensor & i3, IntArrayRef expand1, IntArrayRef expand2, IntArrayRef expand3, IntArrayRef sumdim, int64_t unroll_dim=1);\n", "CAFFE2_API Tensor triplet_margin_loss(const Tensor & anchor, const Tensor & positive, const Tensor & negative, double margin=1.0, double p=2, double eps=1e-06, bool swap=false, int64_t reduction=Reduction::Mean);\n", "CAFFE2_API Tensor trunc(const Tensor & self);\n", "CAFFE2_API Tensor & trunc_(Tensor & self);\n", "CAFFE2_API Tensor & trunc_out(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor type_as(const Tensor & self, const Tensor & other);\n", "CAFFE2_API bool _has_compatible_shallow_copy_type(const Tensor & self, const Tensor & from);\n", "CAFFE2_API std::tuple<Tensor,Tensor> _unique_cpu(const Tensor & self, bool sorted=true, bool return_inverse=false);\n", "CAFFE2_API std::tuple<Tensor,Tensor> _unique_cuda(const Tensor & self, bool sorted=true, bool return_inverse=false);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> unique_dim_cpu(const Tensor & self, int64_t dim, bool sorted=true, bool return_inverse=false, bool return_counts=false);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> unique_dim_cuda(const Tensor & self, int64_t dim, bool sorted=true, bool return_inverse=false, bool return_counts=false);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> unique_consecutive_cpu(const Tensor & self, bool return_inverse=false, bool return_counts=false, c10::optional<int64_t> dim=c10::nullopt);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> unique_consecutive_cuda(const Tensor & self, bool return_inverse=false, bool return_counts=false, c10::optional<int64_t> dim=c10::nullopt);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> unique_dim_consecutive_cpu(const Tensor & self, int64_t dim, bool return_inverse=false, bool return_counts=false);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> unique_dim_consecutive_cuda(const Tensor & self, int64_t dim, bool return_inverse=false, bool return_counts=false);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> _unique2_cpu(const Tensor & self, bool sorted=true, bool return_inverse=false, bool return_counts=false);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> _unique2_cuda(const Tensor & self, bool sorted=true, bool return_inverse=false, bool return_counts=false);\n", "CAFFE2_API Tensor _unsafe_view(const Tensor & self, IntArrayRef size);\n", "CAFFE2_API Tensor unsqueeze(const Tensor & self, int64_t dim);\n", "CAFFE2_API Tensor & unsqueeze_(Tensor & self, int64_t dim);\n", "CAFFE2_API Tensor var(const Tensor & self, bool unbiased=true);\n", "CAFFE2_API Tensor var(const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);\n", "CAFFE2_API Tensor & var_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor var(const Tensor & self, DimnameList dim, bool unbiased=true, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & var_out(Tensor & out, const Tensor & self, DimnameList dim, bool unbiased=true, bool keepdim=false);\n#endif", "CAFFE2_API std::tuple<Tensor,Tensor> var_mean(const Tensor & self, bool unbiased=true);\n", "CAFFE2_API std::tuple<Tensor,Tensor> var_mean(const Tensor & self, IntArrayRef dim, bool unbiased=true, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API std::tuple<Tensor,Tensor> var_mean(const Tensor & self, DimnameList dim, bool unbiased=true, bool keepdim=false);\n#endif", "CAFFE2_API Tensor view_as(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor where(const Tensor & condition, const Tensor & self, const Tensor & other);\n", "CAFFE2_API std::vector<Tensor> where(const Tensor & condition);\n", "CAFFE2_API Tensor _s_where_cpu(const Tensor & condition, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor _s_where_cuda(const Tensor & condition, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor norm_except_dim(const Tensor & v, int64_t pow=2, int64_t dim=0);\n", "CAFFE2_API Tensor _weight_norm(const Tensor & v, const Tensor & g, int64_t dim=0);\n", "CAFFE2_API std::tuple<Tensor,Tensor> weight_norm_cuda(const Tensor & v, const Tensor & g, int64_t dim=0);\n", "CAFFE2_API std::tuple<Tensor,Tensor> weight_norm_cuda_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim);\n", "CAFFE2_API std::tuple<Tensor,Tensor> _weight_norm_differentiable_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor zeros(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options={});\n#endif", "CAFFE2_API Tensor zeros(IntArrayRef size, const TensorOptions & options={});\n", "CAFFE2_API Tensor & zeros_out(Tensor & out, IntArrayRef size);\n", "CAFFE2_API Tensor zeros_like(const Tensor & self);\n", "CAFFE2_API Tensor zeros_like(const Tensor & self, const TensorOptions & options);\n", "CAFFE2_API Tensor _standard_gamma_grad_cpu(const Tensor & self, const Tensor & output);\n", "CAFFE2_API Tensor _standard_gamma_grad_cuda(const Tensor & self, const Tensor & output);\n", "CAFFE2_API Tensor _s_gamma_cpu(const Tensor & self, Generator * generator=nullptr);\n", "CAFFE2_API Tensor _s_gamma_cuda(const Tensor & self, Generator * generator=nullptr);\n", "CAFFE2_API Tensor _dirichlet_grad_cpu(const Tensor & x, const Tensor & alpha, const Tensor & total);\n", "CAFFE2_API Tensor _dirichlet_grad_cuda(const Tensor & x, const Tensor & alpha, const Tensor & total);\n", "CAFFE2_API Tensor _s_dirichlet_cpu(const Tensor & self, Generator * generator=nullptr);\n", "CAFFE2_API Tensor _s_dirichlet_cuda(const Tensor & self, Generator * generator=nullptr);\n", "CAFFE2_API Tensor _s_poisson_cpu(const Tensor & self, Generator * generator=nullptr);\n", "CAFFE2_API Tensor _s_poisson_cuda(const Tensor & self, Generator * generator=nullptr);\n", "CAFFE2_API Tensor norm_sparse(const Tensor & self, Scalar p=2);\n", "CAFFE2_API Tensor _sparse_sum(const Tensor & self);\n", "CAFFE2_API Tensor _sparse_sum(const Tensor & self, ScalarType dtype);\n", "CAFFE2_API Tensor _sparse_sum(const Tensor & self, IntArrayRef dim);\n", "CAFFE2_API Tensor _sparse_sum(const Tensor & self, IntArrayRef dim, ScalarType dtype);\n", "CAFFE2_API Tensor _sparse_sum_backward_cpu(const Tensor & grad, const Tensor & self, IntArrayRef dim);\n", "CAFFE2_API Tensor _sparse_sum_backward_cuda(const Tensor & grad, const Tensor & self, IntArrayRef dim);\n", "CAFFE2_API Tensor norm(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype);\n", "CAFFE2_API Tensor norm(const Tensor & self, Scalar p=2);\n", "CAFFE2_API Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype);\n", "CAFFE2_API Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim=false);\n", "CAFFE2_API Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype);\n", "CAFFE2_API Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim=false);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor norm(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor norm(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim=false);\n#endif", "CAFFE2_API Tensor frobenius_norm(const Tensor & self);\n", "CAFFE2_API Tensor frobenius_norm(const Tensor & self, IntArrayRef dim, bool keepdim=false);\n", "CAFFE2_API Tensor & frobenius_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false);\n", "CAFFE2_API Tensor nuclear_norm(const Tensor & self, bool keepdim=false);\n", "CAFFE2_API Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, bool keepdim=false);\n", "CAFFE2_API Tensor nuclear_norm(const Tensor & self, IntArrayRef dim, bool keepdim=false);\n", "CAFFE2_API Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim=false);\n", "CAFFE2_API Tensor clone(const Tensor & self);\n", "CAFFE2_API Tensor mkldnn_clone(const Tensor & self);\n", "CAFFE2_API Tensor quantized_clone(const Tensor & self);\n", "CAFFE2_API Tensor clone_sparse(const Tensor & self);\n", "CAFFE2_API Tensor & resize_as_(Tensor & self, const Tensor & the_template);\n", "CAFFE2_API Tensor & pow_out(Tensor & out, const Tensor & self, Scalar exponent);\n", "CAFFE2_API Tensor & pow_out_sparse_scalar(Tensor & out, const Tensor & self, Scalar exponent);\n", "CAFFE2_API Tensor pow(const Tensor & self, Scalar exponent);\n", "CAFFE2_API Tensor pow_sparse_scalar(const Tensor & self, Scalar exponent);\n", "CAFFE2_API Tensor & mkldnn_zero_(Tensor & self);\n", "CAFFE2_API Tensor & zero_sparse_(Tensor & self);\n", "CAFFE2_API Tensor & sub_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha=1);\n", "CAFFE2_API Tensor & sub_out_sparse(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha=1);\n", "CAFFE2_API Tensor sub(const Tensor & self, const Tensor & other, Scalar alpha=1);\n", "CAFFE2_API Tensor sub_sparse(const Tensor & self, const Tensor & other, Scalar alpha=1);\n", "CAFFE2_API Tensor & sub_(Tensor & self, const Tensor & other, Scalar alpha=1);\n", "CAFFE2_API Tensor & sub_sparse_(Tensor & self, const Tensor & other, Scalar alpha=1);\n", "CAFFE2_API Tensor sub(const Tensor & self, Scalar other, Scalar alpha=1);\n", "CAFFE2_API Tensor & sub_(Tensor & self, Scalar other, Scalar alpha=1);\n", "CAFFE2_API Tensor rsub(const Tensor & self, const Tensor & other, Scalar alpha=1);\n", "CAFFE2_API Tensor rsub(const Tensor & self, Scalar other, Scalar alpha=1);\n", "CAFFE2_API Tensor _sparse_addmm(const Tensor & self, const Tensor & sparse, const Tensor & dense, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor & addmm_out_sparse_dense_cpu(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor & addmm_out_sparse_dense_cuda(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor addmm_sparse_dense_cpu(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor addmm_sparse_dense_cuda(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor & s_addmm_sparse_dense_cpu_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor & s_addmm_sparse_dense_cuda_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta=1, Scalar alpha=1);\n", "CAFFE2_API Tensor sparse_coo_tensor(IntArrayRef size, const TensorOptions & options);\n", "CAFFE2_API Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, const TensorOptions & options={});\n", "CAFFE2_API Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options={});\n", "CAFFE2_API Tensor _sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options={});\n", "CAFFE2_API Tensor new_with_dims_sparse(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const TensorOptions & options);\n", "CAFFE2_API Tensor new_with_dims_and_tensor_sparse(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const Tensor & indices, const Tensor & values, const TensorOptions & options);\n", "CAFFE2_API Tensor & sparse_resize_(Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim);\n", "CAFFE2_API Tensor & sparse_resize_and_clear_(Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim);\n", "CAFFE2_API Tensor sparse_mask_cpu(const Tensor & self, const Tensor & mask);\n", "CAFFE2_API Tensor sparse_mask_cuda(const Tensor & self, const Tensor & mask);\n", "CAFFE2_API Tensor mkldnn_to_dense(const Tensor & self);\n", "CAFFE2_API Tensor sparse_to_dense(const Tensor & self);\n", "CAFFE2_API Tensor to_dense_backward(const Tensor & grad, const Tensor & input);\n", "CAFFE2_API int64_t sparse_dim_sparse(const Tensor & self);\n", "CAFFE2_API int64_t sparse_dim_sparse(const Tensor & self);\n", "CAFFE2_API int64_t dense_dim_sparse(const Tensor & self);\n", "CAFFE2_API int64_t dense_dim_sparse(const Tensor & self);\n", "CAFFE2_API int64_t _nnz_sparse(const Tensor & self);\n", "CAFFE2_API Tensor coalesce_sparse_cpu(const Tensor & self);\n", "CAFFE2_API Tensor coalesce_sparse_cuda(const Tensor & self);\n", "CAFFE2_API bool is_coalesced_sparse(const Tensor & self);\n", "CAFFE2_API Tensor _indices_sparse(const Tensor & self);\n", "CAFFE2_API Tensor _values_sparse(const Tensor & self);\n", "CAFFE2_API Tensor & _coalesced_sparse_(Tensor & self, bool coalesced);\n", "CAFFE2_API Tensor indices_sparse(const Tensor & self);\n", "CAFFE2_API Tensor values_sparse(const Tensor & self);\n", "CAFFE2_API Tensor & hspmm_out_sparse_cpu(Tensor & out, const Tensor & mat1, const Tensor & mat2);\n", "CAFFE2_API Tensor & hspmm_out_sparse_cuda(Tensor & out, const Tensor & mat1, const Tensor & mat2);\n", "CAFFE2_API Tensor hspmm_sparse_cpu(const Tensor & mat1, const Tensor & mat2);\n", "CAFFE2_API Tensor hspmm_sparse_cuda(const Tensor & mat1, const Tensor & mat2);\n", "CAFFE2_API Tensor & copy_sparse_(Tensor & self, const Tensor & src, bool non_blocking=false);\n", "CAFFE2_API int64_t numel(const Tensor & self);\n", "CAFFE2_API std::vector<Tensor> unbind(const Tensor & self, int64_t dim=0);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API std::vector<Tensor> unbind(const Tensor & self, Dimname dim);\n#endif", "CAFFE2_API Tensor dense_to_sparse(const Tensor & self, int64_t sparse_dim);\n", "CAFFE2_API Tensor dense_to_sparse(const Tensor & self);\n", "CAFFE2_API Tensor dense_to_mkldnn(const Tensor & self);\n", "CAFFE2_API Tensor mkldnn_reorder_conv2d_weight(const Tensor & self, IntArrayRef padding=0, IntArrayRef stride=1, IntArrayRef dilation=1, int64_t groups=1);\n", "CAFFE2_API Tensor to_mkldnn_backward(const Tensor & grad, const Tensor & input);\n", "CAFFE2_API Tensor quantize_per_tensor_cpu(const Tensor & self, double scale, int64_t zero_point, ScalarType dtype);\n", "CAFFE2_API Tensor quantize_per_channel_cpu(const Tensor & self, const Tensor & scales, const Tensor & zero_points, int64_t axis, ScalarType dtype);\n", "CAFFE2_API Tensor dequantize_quant(const Tensor & self);\n", "CAFFE2_API double q_scale_quant(const Tensor & self);\n", "CAFFE2_API int64_t q_zero_point_quant(const Tensor & self);\n", "CAFFE2_API Tensor q_per_channel_scales_quant(const Tensor & self);\n", "CAFFE2_API Tensor q_per_channel_zero_points_quant(const Tensor & self);\n", "CAFFE2_API int64_t q_per_channel_axis_quant(const Tensor & self);\n", "CAFFE2_API Tensor int_repr_quant(const Tensor & self);\n", "CAFFE2_API Tensor make_per_tensor_quantized_tensor_cpu(const Tensor & self, double scale, int64_t zero_point);\n", "CAFFE2_API Tensor make_per_channel_quantized_tensor_cpu(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis);\n", "CAFFE2_API QScheme qscheme_quant(const Tensor & self);\n", "CAFFE2_API Tensor fake_quantize_per_tensor_affine_cpu(const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max);\n", "CAFFE2_API Tensor fake_quantize_per_tensor_affine_cuda(const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max);\n", "CAFFE2_API Tensor fake_quantize_per_tensor_affine_backward_cpu(const Tensor & grad, const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max);\n", "CAFFE2_API Tensor fake_quantize_per_tensor_affine_backward_cuda(const Tensor & grad, const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max);\n", "CAFFE2_API Tensor fake_quantize_per_channel_affine_cpu(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max);\n", "CAFFE2_API Tensor fake_quantize_per_channel_affine_cuda(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max);\n", "CAFFE2_API Tensor fake_quantize_per_channel_affine_backward_cpu(const Tensor & grad, const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max);\n", "CAFFE2_API Tensor fake_quantize_per_channel_affine_backward_cuda(const Tensor & grad, const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max);\n", "CAFFE2_API Tensor to(const Tensor & self, const TensorOptions & options, bool non_blocking=false, bool copy=false);\n", "CAFFE2_API Tensor to(const Tensor & self, Device device, ScalarType dtype, bool non_blocking=false, bool copy=false);\n", "CAFFE2_API Tensor to(const Tensor & self, ScalarType dtype, bool non_blocking=false, bool copy=false);\n", "CAFFE2_API Tensor to(const Tensor & self, const Tensor & other, bool non_blocking=false, bool copy=false);\n", "CAFFE2_API std::vector<Tensor> meshgrid(TensorList tensors);\n", "CAFFE2_API Tensor cartesian_prod(TensorList tensors);\n", "CAFFE2_API Tensor combinations(const Tensor & self, int64_t r=2, bool with_replacement=false);\n", "CAFFE2_API Scalar item(const Tensor & self);\n", "CAFFE2_API ScalarType result_type(const Tensor & tensor, const Tensor & other);\n", "CAFFE2_API ScalarType result_type(const Tensor & tensor, Scalar other);\n", "CAFFE2_API ScalarType result_type(Scalar scalar, const Tensor & tensor);\n", "CAFFE2_API ScalarType result_type(Scalar scalar1, Scalar scalar2);\n", "CAFFE2_API bool can_cast(ScalarType from, ScalarType to);\n", "CAFFE2_API ScalarType promote_types(ScalarType type1, ScalarType type2);\n", "CAFFE2_API Scalar _local_scalar_dense_cpu(const Tensor & self);\n", "CAFFE2_API Scalar _local_scalar_dense_cuda(const Tensor & self);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> _thnn_fused_lstm_cell_cuda(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & cx, const Tensor & input_bias={}, const Tensor & hidden_bias={});\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_lstm_cell_backward_cuda(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & cx, const Tensor & cy, const Tensor & workspace, bool has_bias);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & input_bias, const Tensor & hidden_bias, const Tensor & cx, const Tensor & cy);\n", "CAFFE2_API std::tuple<Tensor,Tensor> _thnn_fused_gru_cell_cuda(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias={}, const Tensor & hidden_bias={});\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_gru_cell_backward_cuda(const Tensor & grad_hy, const Tensor & workspace, bool has_bias);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_gru_cell_backward(const Tensor & grad_hy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);\n", "CAFFE2_API std::tuple<Tensor,Tensor> gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);\n", "CAFFE2_API std::tuple<Tensor,Tensor> gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);\n", "CAFFE2_API std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);\n", "CAFFE2_API std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);\n", "CAFFE2_API std::tuple<Tensor,Tensor> rnn_relu(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);\n", "CAFFE2_API std::tuple<Tensor,Tensor> rnn_relu(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);\n", "CAFFE2_API std::tuple<Tensor,Tensor> lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih={}, const Tensor & b_hh={});\n", "CAFFE2_API Tensor gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih={}, const Tensor & b_hh={});\n", "CAFFE2_API Tensor rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih={}, const Tensor & b_hh={});\n", "CAFFE2_API Tensor rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih={}, const Tensor & b_hh={});\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> quantized_lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first, c10::optional<ScalarType> dtype=c10::nullopt, bool use_dynamic=false);\n", "CAFFE2_API std::tuple<Tensor,Tensor> quantized_gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);\n", "CAFFE2_API std::tuple<Tensor,Tensor> quantized_gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);\n", "CAFFE2_API std::tuple<Tensor,Tensor> quantized_lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh);\n", "CAFFE2_API Tensor quantized_gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh);\n", "CAFFE2_API Tensor quantized_rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh);\n", "CAFFE2_API Tensor quantized_rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh);\n", "CAFFE2_API std::tuple<Tensor,Tensor> _pack_padded_sequence(const Tensor & input, const Tensor & lengths, bool batch_first);\n", "CAFFE2_API Tensor _pack_padded_sequence_backward(const Tensor & grad, IntArrayRef input_size, const Tensor & batch_sizes, bool batch_first);\n", "CAFFE2_API std::tuple<Tensor,Tensor> _pad_packed_sequence(const Tensor & data, const Tensor & batch_sizes, bool batch_first, Scalar padding_value, int64_t total_length);\n", "CAFFE2_API Tensor & set_storage(Tensor & self, Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride={});\n", "CAFFE2_API Tensor & set_quantizer_(Tensor & self, ConstQuantizerPtr quantizer);\n", "CAFFE2_API Tensor & masked_fill__cpu(Tensor & self, const Tensor & mask, Scalar value);\n", "CAFFE2_API Tensor & masked_fill__cuda(Tensor & self, const Tensor & mask, Scalar value);\n", "CAFFE2_API Tensor masked_fill(const Tensor & self, const Tensor & mask, Scalar value);\n", "CAFFE2_API Tensor & masked_fill__cpu(Tensor & self, const Tensor & mask, const Tensor & value);\n", "CAFFE2_API Tensor & masked_fill__cuda(Tensor & self, const Tensor & mask, const Tensor & value);\n", "CAFFE2_API Tensor masked_fill(const Tensor & self, const Tensor & mask, const Tensor & value);\n", "CAFFE2_API Tensor & masked_scatter__cpu(Tensor & self, const Tensor & mask, const Tensor & source);\n", "CAFFE2_API Tensor & masked_scatter__cuda(Tensor & self, const Tensor & mask, const Tensor & source);\n", "CAFFE2_API Tensor masked_scatter(const Tensor & self, const Tensor & mask, const Tensor & source);\n", "CAFFE2_API Tensor view(const Tensor & self, IntArrayRef size);\n", "CAFFE2_API Tensor mkldnn_view(const Tensor & self, IntArrayRef size);\n", "CAFFE2_API Tensor index_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor index_add(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source);\n#endif", "CAFFE2_API Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, Scalar value);\n", "CAFFE2_API Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & value);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & index_fill_(Tensor & self, Dimname dim, const Tensor & index, Scalar value);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & index_fill_(Tensor & self, Dimname dim, const Tensor & index, const Tensor & value);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor index_fill(const Tensor & self, Dimname dim, const Tensor & index, Scalar value);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor index_fill(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & value);\n#endif", "CAFFE2_API Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src);\n", "CAFFE2_API Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, Scalar value);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor scatter(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor scatter(const Tensor & self, Dimname dim, const Tensor & index, Scalar value);\n#endif", "CAFFE2_API Tensor scatter_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor scatter_add(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src);\n#endif", "CAFFE2_API Tensor & lt_(Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & lt_(Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & gt_(Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & gt_(Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & le_(Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & le_(Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & ge_(Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & ge_(Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & eq_(Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & eq_(Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & ne_(Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & ne_(Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & _lgamma__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _lgamma__cuda(Tensor & self);\n", "CAFFE2_API Tensor & atan2_(Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & tril_cpu_(Tensor & self, int64_t diagonal=0);\n", "CAFFE2_API Tensor & tril_cuda_(Tensor & self, int64_t diagonal=0);\n", "CAFFE2_API Tensor & triu_cpu_(Tensor & self, int64_t diagonal=0);\n", "CAFFE2_API Tensor & triu_cuda_(Tensor & self, int64_t diagonal=0);\n", "CAFFE2_API Tensor & digamma_(Tensor & self);\n", "CAFFE2_API Tensor & polygamma_(Tensor & self, int64_t n);\n", "CAFFE2_API Tensor & pow_(Tensor & self, Scalar exponent);\n", "CAFFE2_API Tensor & pow_(Tensor & self, const Tensor & exponent);\n", "CAFFE2_API Tensor & lerp_cpu_scalar_(Tensor & self, const Tensor & end, Scalar weight);\n", "CAFFE2_API Tensor & lerp_cuda_scalar_(Tensor & self, const Tensor & end, Scalar weight);\n", "CAFFE2_API Tensor & lerp_cpu_tensor_(Tensor & self, const Tensor & end, const Tensor & weight);\n", "CAFFE2_API Tensor & lerp_cuda_tensor_(Tensor & self, const Tensor & end, const Tensor & weight);\n", "CAFFE2_API Tensor & addcdiv_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value=1);\n", "CAFFE2_API Tensor & clamped_random_cuda_(Tensor & self, int64_t from, int64_t to, Generator * generator=nullptr);\n", "CAFFE2_API Tensor & capped_random_cuda_(Tensor & self, int64_t to, Generator * generator=nullptr);\n", "CAFFE2_API Tensor & random_cuda_(Tensor & self, Generator * generator=nullptr);\n", "CAFFE2_API Tensor & uniform_cuda_(Tensor & self, double from=0, double to=1, Generator * generator=nullptr);\n", "CAFFE2_API Tensor & normal_cuda_(Tensor & self, double mean=0, double std=1, Generator * generator=nullptr);\n", "CAFFE2_API Tensor & cauchy_cuda_(Tensor & self, double median=0, double sigma=1, Generator * generator=nullptr);\n", "CAFFE2_API Tensor & log_normal_cuda_(Tensor & self, double mean=1, double std=2, Generator * generator=nullptr);\n", "CAFFE2_API Tensor & exponential_cuda_(Tensor & self, double lambd=1, Generator * generator=nullptr);\n", "CAFFE2_API Tensor & geometric_cuda_(Tensor & self, double p, Generator * generator=nullptr);\n", "CAFFE2_API Tensor & cross_out(Tensor & out, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim=c10::nullopt);\n", "CAFFE2_API Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim=c10::nullopt);\n", "CAFFE2_API Tensor & triu_cpu_out(Tensor & out, const Tensor & self, int64_t diagonal=0);\n", "CAFFE2_API Tensor & triu_cuda_out(Tensor & out, const Tensor & self, int64_t diagonal=0);\n", "CAFFE2_API Tensor triu(const Tensor & self, int64_t diagonal=0);\n", "CAFFE2_API Tensor & tril_cpu_out(Tensor & out, const Tensor & self, int64_t diagonal=0);\n", "CAFFE2_API Tensor & tril_cuda_out(Tensor & out, const Tensor & self, int64_t diagonal=0);\n", "CAFFE2_API Tensor tril(const Tensor & self, int64_t diagonal=0);\n", "CAFFE2_API Tensor tril_indices_cpu(int64_t row, int64_t col, int64_t offset=0, const TensorOptions & options=at::kLong);\n", "CAFFE2_API Tensor tril_indices_cuda(int64_t row, int64_t col, int64_t offset=0, const TensorOptions & options=at::kLong);\n", "CAFFE2_API Tensor triu_indices_cpu(int64_t row, int64_t col, int64_t offset=0, const TensorOptions & options=at::kLong);\n", "CAFFE2_API Tensor triu_indices_cuda(int64_t row, int64_t col, int64_t offset=0, const TensorOptions & options=at::kLong);\n", "CAFFE2_API Tensor & ne_out(Tensor & out, const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & ne_out_quantized_cpu(Tensor & out, const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor ne(const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor ne_quantized_cpu(const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & ne_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & ne_out_quantized_cpu(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor ne(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor ne_quantized_cpu(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & eq_out(Tensor & out, const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & eq_out_quantized_cpu(Tensor & out, const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor eq(const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor eq_quantized_cpu(const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & eq_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & eq_out_quantized_cpu(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor eq(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor eq_quantized_cpu(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & ge_out(Tensor & out, const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & ge_out_quantized_cpu(Tensor & out, const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor ge(const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor ge_quantized_cpu(const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & ge_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & ge_out_quantized_cpu(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor ge(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor ge_quantized_cpu(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & le_out(Tensor & out, const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & le_out_quantized_cpu(Tensor & out, const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor le(const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor le_quantized_cpu(const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & le_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & le_out_quantized_cpu(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor le(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor le_quantized_cpu(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & gt_out(Tensor & out, const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & gt_out_quantized_cpu(Tensor & out, const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor gt(const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor gt_quantized_cpu(const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & gt_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & gt_out_quantized_cpu(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor gt(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor gt_quantized_cpu(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & lt_out(Tensor & out, const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & lt_out_quantized_cpu(Tensor & out, const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor lt(const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor lt_quantized_cpu(const Tensor & self, Scalar other);\n", "CAFFE2_API Tensor & lt_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & lt_out_quantized_cpu(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor lt(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor lt_quantized_cpu(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor index_select_sparse(const Tensor & self, int64_t dim, const Tensor & index);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & index_select_out(Tensor & out, const Tensor & self, Dimname dim, const Tensor & index);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor index_select(const Tensor & self, Dimname dim, const Tensor & index);\n#endif", "CAFFE2_API Tensor & masked_select_out_cpu(Tensor & out, const Tensor & self, const Tensor & mask);\n", "CAFFE2_API Tensor & masked_select_out_cuda(Tensor & out, const Tensor & self, const Tensor & mask);\n", "CAFFE2_API Tensor masked_select_cpu(const Tensor & self, const Tensor & mask);\n", "CAFFE2_API Tensor masked_select_cuda(const Tensor & self, const Tensor & mask);\n", "CAFFE2_API std::vector<Tensor> nonzero_numpy(const Tensor & self);\n", "CAFFE2_API Tensor & gather_out_cpu(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad=false);\n", "CAFFE2_API Tensor & gather_out_cuda(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad=false);\n", "CAFFE2_API Tensor gather_cpu(const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad=false);\n", "CAFFE2_API Tensor gather_cuda(const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad=false);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor & gather_out(Tensor & out, const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor gather(const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad=false);\n#endif", "CAFFE2_API Tensor _gather_sparse_backward(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & grad);\n", "CAFFE2_API Tensor & addcmul_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value=1);\n", "CAFFE2_API Tensor addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value=1);\n", "CAFFE2_API Tensor & addcmul_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value=1);\n", "CAFFE2_API Tensor & addcdiv_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value=1);\n", "CAFFE2_API Tensor addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value=1);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> triangular_solve_out(Tensor & X, Tensor & M, const Tensor & self, const Tensor & A, bool upper=true, bool transpose=false, bool unitriangular=false);\n", "CAFFE2_API std::tuple<Tensor,Tensor> triangular_solve(const Tensor & self, const Tensor & A, bool upper=true, bool transpose=false, bool unitriangular=false);\n", "CAFFE2_API std::tuple<Tensor,Tensor> _triangular_solve_helper_cpu(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular);\n", "CAFFE2_API std::tuple<Tensor,Tensor> _triangular_solve_helper_cuda(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> symeig_out(Tensor & e, Tensor & V, const Tensor & self, bool eigenvectors=false, bool upper=true);\n", "CAFFE2_API std::tuple<Tensor,Tensor> symeig(const Tensor & self, bool eigenvectors=false, bool upper=true);\n", "CAFFE2_API std::tuple<Tensor,Tensor> _symeig_helper_cpu(const Tensor & self, bool eigenvectors, bool upper);\n", "CAFFE2_API std::tuple<Tensor,Tensor> _symeig_helper_cuda(const Tensor & self, bool eigenvectors, bool upper);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &,Tensor &> svd_out(Tensor & U, Tensor & S, Tensor & V, const Tensor & self, bool some=true, bool compute_uv=true);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> svd(const Tensor & self, bool some=true, bool compute_uv=true);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> _svd_helper_cpu(const Tensor & self, bool some, bool compute_uv);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> _svd_helper_cuda(const Tensor & self, bool some, bool compute_uv);\n", "CAFFE2_API Tensor & cholesky_out(Tensor & out, const Tensor & self, bool upper=false);\n", "CAFFE2_API Tensor cholesky(const Tensor & self, bool upper=false);\n", "CAFFE2_API Tensor _cholesky_helper_cpu(const Tensor & self, bool upper);\n", "CAFFE2_API Tensor _cholesky_helper_cuda(const Tensor & self, bool upper);\n", "CAFFE2_API Tensor & cholesky_solve_out(Tensor & out, const Tensor & self, const Tensor & input2, bool upper=false);\n", "CAFFE2_API Tensor cholesky_solve(const Tensor & self, const Tensor & input2, bool upper=false);\n", "CAFFE2_API Tensor _cholesky_solve_helper_cpu(const Tensor & self, const Tensor & A, bool upper);\n", "CAFFE2_API Tensor _cholesky_solve_helper_cuda(const Tensor & self, const Tensor & A, bool upper);\n", "CAFFE2_API std::tuple<Tensor,Tensor> solve(const Tensor & self, const Tensor & A);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> solve_out(Tensor & solution, Tensor & lu, const Tensor & self, const Tensor & A);\n", "CAFFE2_API std::tuple<Tensor,Tensor> _solve_helper_cpu(const Tensor & self, const Tensor & A);\n", "CAFFE2_API std::tuple<Tensor,Tensor> _solve_helper_cuda(const Tensor & self, const Tensor & A);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> qr_out(Tensor & Q, Tensor & R, const Tensor & self, bool some=true);\n", "CAFFE2_API std::tuple<Tensor,Tensor> qr(const Tensor & self, bool some=true);\n", "CAFFE2_API std::tuple<Tensor,Tensor> _qr_helper_cpu(const Tensor & self, bool some);\n", "CAFFE2_API std::tuple<Tensor,Tensor> _qr_helper_cuda(const Tensor & self, bool some);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> _lu_with_info_cpu(const Tensor & self, bool pivot=true, bool check_errors=true);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> _lu_with_info_cuda(const Tensor & self, bool pivot=true, bool check_errors=true);\n", "CAFFE2_API Tensor & lu_solve_out(Tensor & out, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots);\n", "CAFFE2_API Tensor lu_solve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots);\n", "CAFFE2_API Tensor _lu_solve_helper_cpu(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots);\n", "CAFFE2_API Tensor _lu_solve_helper_cuda(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots);\n", "CAFFE2_API Tensor & multinomial_out(Tensor & out, const Tensor & self, int64_t num_samples, bool replacement=false, Generator * generator=nullptr);\n", "CAFFE2_API Tensor multinomial(const Tensor & self, int64_t num_samples, bool replacement=false, Generator * generator=nullptr);\n", "CAFFE2_API Tensor & _lgamma_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _lgamma_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor lgamma(const Tensor & self);\n", "CAFFE2_API Tensor & digamma_out(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor digamma(const Tensor & self);\n", "CAFFE2_API Tensor & polygamma_out(Tensor & out, int64_t n, const Tensor & self);\n", "CAFFE2_API Tensor polygamma(int64_t n, const Tensor & self);\n", "CAFFE2_API Tensor erfinv(const Tensor & self);\n", "CAFFE2_API Tensor & _erfinv__cpu(Tensor & self);\n", "CAFFE2_API Tensor & _erfinv__cuda(Tensor & self);\n", "CAFFE2_API Tensor & _erfinv_out_cpu(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & _erfinv_out_cuda(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor sign(const Tensor & self);\n", "CAFFE2_API Tensor & sign_(Tensor & self);\n", "CAFFE2_API Tensor & sign_out(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor & atan2_out(Tensor & out, const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor atan2(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & lerp_cpu_scalar_out(Tensor & out, const Tensor & self, const Tensor & end, Scalar weight);\n", "CAFFE2_API Tensor & lerp_cuda_scalar_out(Tensor & out, const Tensor & self, const Tensor & end, Scalar weight);\n", "CAFFE2_API Tensor & lerp_cpu_tensor_out(Tensor & out, const Tensor & self, const Tensor & end, const Tensor & weight);\n", "CAFFE2_API Tensor & lerp_cuda_tensor_out(Tensor & out, const Tensor & self, const Tensor & end, const Tensor & weight);\n", "CAFFE2_API Tensor lerp_cpu_scalar(const Tensor & self, const Tensor & end, Scalar weight);\n", "CAFFE2_API Tensor lerp_cuda_scalar(const Tensor & self, const Tensor & end, Scalar weight);\n", "CAFFE2_API Tensor lerp_cpu_tensor(const Tensor & self, const Tensor & end, const Tensor & weight);\n", "CAFFE2_API Tensor lerp_cuda_tensor(const Tensor & self, const Tensor & end, const Tensor & weight);\n", "CAFFE2_API Tensor & _histc_out_cuda(Tensor & out, const Tensor & self, int64_t bins=100, Scalar min=0, Scalar max=0);\n", "CAFFE2_API Tensor _histc_cuda(const Tensor & self, int64_t bins=100, Scalar min=0, Scalar max=0);\n", "CAFFE2_API Tensor min_quant(const Tensor & self);\n", "CAFFE2_API Tensor max_quant(const Tensor & self);\n", "CAFFE2_API Tensor median_cpu(const Tensor & self);\n", "CAFFE2_API Tensor median_cuda(const Tensor & self);\n", "CAFFE2_API std::tuple<Tensor,Tensor> sort_quant(const Tensor & self, int64_t dim=-1, bool descending=false);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API std::tuple<Tensor &,Tensor &> sort_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool descending=false);\n#endif", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API std::tuple<Tensor,Tensor> sort(const Tensor & self, Dimname dim, bool descending=false);\n#endif", "CAFFE2_API Tensor argsort(const Tensor & self, int64_t dim=-1, bool descending=false);\n", "#ifdef BUILD_NAMEDTENSOR\nCAFFE2_API Tensor argsort(const Tensor & self, Dimname dim, bool descending=false);\n#endif", "CAFFE2_API std::tuple<Tensor &,Tensor &> topk_out_cpu(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim=-1, bool largest=true, bool sorted=true);\n", "CAFFE2_API std::tuple<Tensor,Tensor> topk(const Tensor & self, int64_t k, int64_t dim=-1, bool largest=true, bool sorted=true);\n", "CAFFE2_API std::tuple<Tensor,Tensor> quantized_topk_cpu(const Tensor & self, int64_t k, int64_t dim=-1, bool largest=true, bool sorted=true);\n", "CAFFE2_API Tensor all(const Tensor & self);\n", "CAFFE2_API Tensor any(const Tensor & self);\n", "CAFFE2_API bool quantized_equal(const Tensor & self, const Tensor & other);\n", "CAFFE2_API Tensor & pow_out(Tensor & out, const Tensor & self, const Tensor & exponent);\n", "CAFFE2_API Tensor pow(const Tensor & self, const Tensor & exponent);\n", "CAFFE2_API Tensor & pow_out(Tensor & out, Scalar self, const Tensor & exponent);\n", "CAFFE2_API Tensor pow(Scalar self, const Tensor & exponent);\n", "CAFFE2_API Tensor & normal_out_cuda(Tensor & out, const Tensor & mean, double std=1, Generator * generator=nullptr);\n", "CAFFE2_API Tensor normal_cuda(const Tensor & mean, double std=1, Generator * generator=nullptr);\n", "CAFFE2_API Tensor & normal_out_cuda(Tensor & out, double mean, const Tensor & std, Generator * generator=nullptr);\n", "CAFFE2_API Tensor normal_cuda(double mean, const Tensor & std, Generator * generator=nullptr);\n", "CAFFE2_API Tensor & normal_out_cuda(Tensor & out, const Tensor & mean, const Tensor & std, Generator * generator=nullptr);\n", "CAFFE2_API Tensor normal_cuda(const Tensor & mean, const Tensor & std, Generator * generator=nullptr);\n", "CAFFE2_API Tensor normal(double mean, double std, IntArrayRef size, Generator * generator=nullptr, const TensorOptions & options={});\n", "CAFFE2_API Tensor & normal_out(Tensor & out, double mean, double std, IntArrayRef size, Generator * generator=nullptr);\n", "CAFFE2_API Tensor alias(const Tensor & self);\n", "CAFFE2_API Tensor & multilabel_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction=Reduction::Mean);\n", "CAFFE2_API Tensor multilabel_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction=Reduction::Mean);\n", "CAFFE2_API Tensor & nll_loss_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight={}, int64_t reduction=Reduction::Mean, int64_t ignore_index=-100);\n", "CAFFE2_API Tensor nll_loss(const Tensor & self, const Tensor & target, const Tensor & weight={}, int64_t reduction=Reduction::Mean, int64_t ignore_index=-100);\n", "CAFFE2_API Tensor & nll_loss2d_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight={}, int64_t reduction=Reduction::Mean, int64_t ignore_index=-100);\n", "CAFFE2_API Tensor nll_loss2d(const Tensor & self, const Tensor & target, const Tensor & weight={}, int64_t reduction=Reduction::Mean, int64_t ignore_index=-100);\n", "CAFFE2_API Tensor & log_sigmoid_out(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor log_sigmoid(const Tensor & self);\n", "CAFFE2_API Tensor & adaptive_avg_pool2d_out_cpu(Tensor & out, const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor & adaptive_avg_pool2d_out_cuda(Tensor & out, const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor & mkldnn_adaptive_avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor mkldnn_adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor adaptive_avg_pool2d_cpu(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor adaptive_avg_pool2d_cuda(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor quantized_adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor adaptive_avg_pool2d_backward_cpu(const Tensor & grad_output, const Tensor & self);\n", "CAFFE2_API Tensor adaptive_avg_pool2d_backward_cuda(const Tensor & grad_output, const Tensor & self);\n", "CAFFE2_API Tensor & adaptive_avg_pool3d_out_cpu(Tensor & out, const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor & adaptive_avg_pool3d_out_cuda(Tensor & out, const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor adaptive_avg_pool3d_cpu(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor adaptive_avg_pool3d_cuda(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor & adaptive_avg_pool3d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, const Tensor & self);\n", "CAFFE2_API Tensor & adaptive_avg_pool3d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, const Tensor & self);\n", "CAFFE2_API Tensor adaptive_avg_pool3d_backward_cpu(const Tensor & grad_output, const Tensor & self);\n", "CAFFE2_API Tensor adaptive_avg_pool3d_backward_cuda(const Tensor & grad_output, const Tensor & self);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> adaptive_max_pool2d_out_cpu(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> adaptive_max_pool2d_out_cuda(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API std::tuple<Tensor,Tensor> adaptive_max_pool2d_cpu(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API std::tuple<Tensor,Tensor> adaptive_max_pool2d_cuda(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor & adaptive_max_pool2d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices);\n", "CAFFE2_API Tensor & adaptive_max_pool2d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices);\n", "CAFFE2_API Tensor adaptive_max_pool2d_backward_cpu(const Tensor & grad_output, const Tensor & self, const Tensor & indices);\n", "CAFFE2_API Tensor adaptive_max_pool2d_backward_cuda(const Tensor & grad_output, const Tensor & self, const Tensor & indices);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> adaptive_max_pool3d_out_cpu(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> adaptive_max_pool3d_out_cuda(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API std::tuple<Tensor,Tensor> adaptive_max_pool3d_cpu(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API std::tuple<Tensor,Tensor> adaptive_max_pool3d_cuda(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor & adaptive_max_pool3d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices);\n", "CAFFE2_API Tensor & adaptive_max_pool3d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices);\n", "CAFFE2_API Tensor adaptive_max_pool3d_backward_cpu(const Tensor & grad_output, const Tensor & self, const Tensor & indices);\n", "CAFFE2_API Tensor adaptive_max_pool3d_backward_cuda(const Tensor & grad_output, const Tensor & self, const Tensor & indices);\n", "CAFFE2_API Tensor & avg_pool2d_out_cpu(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);\n", "CAFFE2_API Tensor & avg_pool2d_out_cuda(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);\n", "CAFFE2_API Tensor & mkldnn_avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);\n", "CAFFE2_API Tensor avg_pool2d_cpu(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);\n", "CAFFE2_API Tensor avg_pool2d_cuda(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);\n", "CAFFE2_API Tensor mkldnn_avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);\n", "CAFFE2_API Tensor quantized_avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);\n", "CAFFE2_API Tensor & avg_pool2d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);\n", "CAFFE2_API Tensor & avg_pool2d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);\n", "CAFFE2_API Tensor avg_pool2d_backward_cpu(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);\n", "CAFFE2_API Tensor avg_pool2d_backward_cuda(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);\n", "CAFFE2_API Tensor & avg_pool3d_out_cpu(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);\n", "CAFFE2_API Tensor & avg_pool3d_out_cuda(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);\n", "CAFFE2_API Tensor avg_pool3d_cpu(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);\n", "CAFFE2_API Tensor avg_pool3d_cuda(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, c10::optional<int64_t> divisor_override=c10::nullopt);\n", "CAFFE2_API Tensor & avg_pool3d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);\n", "CAFFE2_API Tensor & avg_pool3d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);\n", "CAFFE2_API Tensor avg_pool3d_backward_cpu(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);\n", "CAFFE2_API Tensor avg_pool3d_backward_cuda(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> fractional_max_pool2d_out_cpu(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> fractional_max_pool2d_out_cuda(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);\n", "CAFFE2_API std::tuple<Tensor,Tensor> fractional_max_pool2d_cpu(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);\n", "CAFFE2_API std::tuple<Tensor,Tensor> fractional_max_pool2d_cuda(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);\n", "CAFFE2_API Tensor & fractional_max_pool2d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);\n", "CAFFE2_API Tensor & fractional_max_pool2d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);\n", "CAFFE2_API Tensor fractional_max_pool2d_backward_cpu(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);\n", "CAFFE2_API Tensor fractional_max_pool2d_backward_cuda(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> fractional_max_pool3d_out_cpu(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> fractional_max_pool3d_out_cuda(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);\n", "CAFFE2_API std::tuple<Tensor,Tensor> fractional_max_pool3d_cpu(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);\n", "CAFFE2_API std::tuple<Tensor,Tensor> fractional_max_pool3d_cuda(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples);\n", "CAFFE2_API Tensor & fractional_max_pool3d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);\n", "CAFFE2_API Tensor & fractional_max_pool3d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);\n", "CAFFE2_API Tensor fractional_max_pool3d_backward_cpu(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);\n", "CAFFE2_API Tensor fractional_max_pool3d_backward_cuda(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> max_pool2d_with_indices_out_cpu(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> max_pool2d_with_indices_out_cuda(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "CAFFE2_API std::tuple<Tensor,Tensor> max_pool2d_with_indices_cpu(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "CAFFE2_API std::tuple<Tensor,Tensor> max_pool2d_with_indices_cuda(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "CAFFE2_API Tensor & max_pool2d_with_indices_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);\n", "CAFFE2_API Tensor & max_pool2d_with_indices_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);\n", "CAFFE2_API Tensor max_pool2d_with_indices_backward_cpu(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);\n", "CAFFE2_API Tensor max_pool2d_with_indices_backward_cuda(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> max_pool3d_with_indices_out_cpu(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &> max_pool3d_with_indices_out_cuda(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "CAFFE2_API std::tuple<Tensor,Tensor> max_pool3d_with_indices_cpu(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "CAFFE2_API std::tuple<Tensor,Tensor> max_pool3d_with_indices_cuda(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride={}, IntArrayRef padding=0, IntArrayRef dilation=1, bool ceil_mode=false);\n", "CAFFE2_API Tensor & max_pool3d_with_indices_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);\n", "CAFFE2_API Tensor & max_pool3d_with_indices_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);\n", "CAFFE2_API Tensor max_pool3d_with_indices_backward_cpu(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);\n", "CAFFE2_API Tensor max_pool3d_with_indices_backward_cuda(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices);\n", "CAFFE2_API Tensor & max_unpooling2d_forward_out_cpu(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size);\n", "CAFFE2_API Tensor & max_unpooling2d_forward_out_cuda(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size);\n", "CAFFE2_API Tensor max_unpooling2d_forward_cpu(const Tensor & self, const Tensor & indices, IntArrayRef output_size);\n", "CAFFE2_API Tensor max_unpooling2d_forward_cuda(const Tensor & self, const Tensor & indices, IntArrayRef output_size);\n", "CAFFE2_API Tensor & max_unpooling2d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size);\n", "CAFFE2_API Tensor & max_unpooling2d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size);\n", "CAFFE2_API Tensor max_unpooling2d_backward_cpu(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size);\n", "CAFFE2_API Tensor max_unpooling2d_backward_cuda(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size);\n", "CAFFE2_API Tensor & max_unpooling3d_forward_out_cpu(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);\n", "CAFFE2_API Tensor & max_unpooling3d_forward_out_cuda(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);\n", "CAFFE2_API Tensor max_unpooling3d_forward_cpu(const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);\n", "CAFFE2_API Tensor max_unpooling3d_forward_cuda(const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);\n", "CAFFE2_API Tensor & max_unpooling3d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);\n", "CAFFE2_API Tensor & max_unpooling3d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);\n", "CAFFE2_API Tensor max_unpooling3d_backward_cpu(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);\n", "CAFFE2_API Tensor max_unpooling3d_backward_cuda(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding);\n", "CAFFE2_API Tensor & reflection_pad1d_out_cpu(Tensor & out, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & reflection_pad1d_out_cuda(Tensor & out, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor reflection_pad1d_cpu(const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor reflection_pad1d_cuda(const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & reflection_pad1d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & reflection_pad1d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor reflection_pad1d_backward_cpu(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor reflection_pad1d_backward_cuda(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & reflection_pad2d_out_cpu(Tensor & out, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & reflection_pad2d_out_cuda(Tensor & out, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor reflection_pad2d_cpu(const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor reflection_pad2d_cuda(const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & reflection_pad2d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & reflection_pad2d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor reflection_pad2d_backward_cpu(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor reflection_pad2d_backward_cuda(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & replication_pad1d_out_cpu(Tensor & out, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & replication_pad1d_out_cuda(Tensor & out, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor replication_pad1d_cpu(const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor replication_pad1d_cuda(const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & replication_pad1d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & replication_pad1d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor replication_pad1d_backward_cpu(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor replication_pad1d_backward_cuda(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & replication_pad2d_out_cpu(Tensor & out, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & replication_pad2d_out_cuda(Tensor & out, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor replication_pad2d_cpu(const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor replication_pad2d_cuda(const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & replication_pad2d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & replication_pad2d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor replication_pad2d_backward_cpu(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor replication_pad2d_backward_cuda(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & replication_pad3d_out_cpu(Tensor & out, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & replication_pad3d_out_cuda(Tensor & out, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor replication_pad3d_cpu(const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor replication_pad3d_cuda(const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & replication_pad3d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & replication_pad3d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor replication_pad3d_backward_cpu(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor replication_pad3d_backward_cuda(const Tensor & grad_output, const Tensor & self, IntArrayRef padding);\n", "CAFFE2_API Tensor & upsample_linear1d_out_cpu(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "CAFFE2_API Tensor & upsample_linear1d_out_cuda(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "CAFFE2_API Tensor upsample_linear1d_cpu(const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "CAFFE2_API Tensor upsample_linear1d_cuda(const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "CAFFE2_API Tensor & upsample_linear1d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "CAFFE2_API Tensor & upsample_linear1d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "CAFFE2_API Tensor upsample_linear1d_backward_cpu(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "CAFFE2_API Tensor upsample_linear1d_backward_cuda(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "CAFFE2_API Tensor & upsample_bilinear2d_out_cpu(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "CAFFE2_API Tensor & upsample_bilinear2d_out_cuda(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "CAFFE2_API Tensor upsample_bilinear2d_cpu(const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "CAFFE2_API Tensor upsample_bilinear2d_cuda(const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "CAFFE2_API Tensor quantized_upsample_bilinear2d_cpu(const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "CAFFE2_API Tensor & upsample_bilinear2d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "CAFFE2_API Tensor & upsample_bilinear2d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "CAFFE2_API Tensor upsample_bilinear2d_backward_cpu(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "CAFFE2_API Tensor upsample_bilinear2d_backward_cuda(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "CAFFE2_API Tensor & upsample_bicubic2d_out_cpu(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "CAFFE2_API Tensor & upsample_bicubic2d_out_cuda(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "CAFFE2_API Tensor upsample_bicubic2d_cpu(const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "CAFFE2_API Tensor upsample_bicubic2d_cuda(const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "CAFFE2_API Tensor & upsample_bicubic2d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "CAFFE2_API Tensor & upsample_bicubic2d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "CAFFE2_API Tensor upsample_bicubic2d_backward_cpu(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "CAFFE2_API Tensor upsample_bicubic2d_backward_cuda(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "CAFFE2_API Tensor & upsample_trilinear3d_out_cpu(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "CAFFE2_API Tensor & upsample_trilinear3d_out_cuda(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "CAFFE2_API Tensor upsample_trilinear3d_cpu(const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "CAFFE2_API Tensor upsample_trilinear3d_cuda(const Tensor & self, IntArrayRef output_size, bool align_corners);\n", "CAFFE2_API Tensor & upsample_trilinear3d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "CAFFE2_API Tensor & upsample_trilinear3d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "CAFFE2_API Tensor upsample_trilinear3d_backward_cpu(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "CAFFE2_API Tensor upsample_trilinear3d_backward_cuda(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners);\n", "CAFFE2_API Tensor & upsample_nearest1d_out_cpu(Tensor & out, const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor & upsample_nearest1d_out_cuda(Tensor & out, const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor upsample_nearest1d_cpu(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor upsample_nearest1d_cuda(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor & upsample_nearest1d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size);\n", "CAFFE2_API Tensor & upsample_nearest1d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size);\n", "CAFFE2_API Tensor upsample_nearest1d_backward_cpu(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size);\n", "CAFFE2_API Tensor upsample_nearest1d_backward_cuda(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size);\n", "CAFFE2_API Tensor & upsample_nearest2d_out_cpu(Tensor & out, const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor & upsample_nearest2d_out_cuda(Tensor & out, const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor upsample_nearest2d_cpu(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor upsample_nearest2d_cuda(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor quantized_upsample_nearest2d_cpu(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor & upsample_nearest2d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size);\n", "CAFFE2_API Tensor & upsample_nearest2d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size);\n", "CAFFE2_API Tensor upsample_nearest2d_backward_cpu(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size);\n", "CAFFE2_API Tensor upsample_nearest2d_backward_cuda(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size);\n", "CAFFE2_API Tensor & upsample_nearest3d_out_cpu(Tensor & out, const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor & upsample_nearest3d_out_cuda(Tensor & out, const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor upsample_nearest3d_cpu(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor upsample_nearest3d_cuda(const Tensor & self, IntArrayRef output_size);\n", "CAFFE2_API Tensor & upsample_nearest3d_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size);\n", "CAFFE2_API Tensor & upsample_nearest3d_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size);\n", "CAFFE2_API Tensor upsample_nearest3d_backward_cpu(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size);\n", "CAFFE2_API Tensor upsample_nearest3d_backward_cuda(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size);\n", "CAFFE2_API Tensor & slow_conv_transpose2d_out_cpu(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);\n", "CAFFE2_API Tensor & slow_conv_transpose2d_out_cuda(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);\n", "CAFFE2_API Tensor slow_conv_transpose2d_cpu(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);\n", "CAFFE2_API Tensor slow_conv_transpose2d_cuda(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose2d_backward_out_cpu(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose2d_backward_out_cuda(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose2d_backward_cpu(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose2d_backward_cuda(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask);\n", "CAFFE2_API Tensor & slow_conv_transpose3d_out_cpu(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);\n", "CAFFE2_API Tensor & slow_conv_transpose3d_out_cuda(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);\n", "CAFFE2_API Tensor slow_conv_transpose3d_cpu(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);\n", "CAFFE2_API Tensor slow_conv_transpose3d_cuda(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef output_padding=0, IntArrayRef dilation=1);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose3d_backward_out_cpu(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input);\n", "CAFFE2_API std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose3d_backward_out_cuda(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose3d_backward_cpu(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose3d_backward_cuda(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask);\n", "CAFFE2_API Tensor & thnn_conv2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0);\n", "CAFFE2_API Tensor thnn_conv2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0);\n", "CAFFE2_API Tensor & thnn_conv_depthwise2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1);\n", "CAFFE2_API Tensor thnn_conv_depthwise2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1);\n", "CAFFE2_API Tensor & thnn_conv3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0);\n", "CAFFE2_API Tensor thnn_conv3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0);\n", "CAFFE2_API Tensor slow_conv_dilated2d_cpu(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1);\n", "CAFFE2_API Tensor slow_conv_dilated2d_cuda(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated2d_backward_cpu(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated2d_backward_cuda(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask);\n", "CAFFE2_API Tensor slow_conv_dilated3d_cpu(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1);\n", "CAFFE2_API Tensor slow_conv_dilated3d_cuda(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias={}, IntArrayRef stride=1, IntArrayRef padding=0, IntArrayRef dilation=1);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated3d_backward_cpu(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask);\n", "CAFFE2_API std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated3d_backward_cuda(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask);\n", "CAFFE2_API Tensor & col2im_out_cpu(Tensor & out, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "CAFFE2_API Tensor & col2im_out_cuda(Tensor & out, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "CAFFE2_API Tensor col2im_cpu(const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "CAFFE2_API Tensor col2im_cuda(const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "CAFFE2_API Tensor & col2im_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "CAFFE2_API Tensor & col2im_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "CAFFE2_API Tensor col2im_backward_cpu(const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "CAFFE2_API Tensor col2im_backward_cuda(const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "CAFFE2_API Tensor & im2col_out_cpu(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "CAFFE2_API Tensor & im2col_out_cuda(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "CAFFE2_API Tensor im2col_cpu(const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "CAFFE2_API Tensor im2col_cuda(const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "CAFFE2_API Tensor & im2col_backward_out_cpu(Tensor & grad_input, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "CAFFE2_API Tensor & im2col_backward_out_cuda(Tensor & grad_input, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "CAFFE2_API Tensor im2col_backward_cpu(const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "CAFFE2_API Tensor im2col_backward_cuda(const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride);\n", "CAFFE2_API Tensor & rivergold_test_out(Tensor & out, const Tensor & self);\n", "CAFFE2_API Tensor rivergold_test(const Tensor & self);\n"], "registration_declarations": ["Tensor _cast_Byte(const Tensor & self, bool non_blocking); // aten::_cast_Byte(Tensor self, bool non_blocking=False) -> Tensor\n", "Tensor _cast_Char(const Tensor & self, bool non_blocking); // aten::_cast_Char(Tensor self, bool non_blocking=False) -> Tensor\n", "Tensor _cast_Double(const Tensor & self, bool non_blocking); // aten::_cast_Double(Tensor self, bool non_blocking=False) -> Tensor\n", "Tensor _cast_Float(const Tensor & self, bool non_blocking); // aten::_cast_Float(Tensor self, bool non_blocking=False) -> Tensor\n", "Tensor _cast_Int(const Tensor & self, bool non_blocking); // aten::_cast_Int(Tensor self, bool non_blocking=False) -> Tensor\n", "Tensor _cast_Long(const Tensor & self, bool non_blocking); // aten::_cast_Long(Tensor self, bool non_blocking=False) -> Tensor\n", "Tensor _cast_Short(const Tensor & self, bool non_blocking); // aten::_cast_Short(Tensor self, bool non_blocking=False) -> Tensor\n", "Tensor _cast_Half(const Tensor & self, bool non_blocking); // aten::_cast_Half(Tensor self, bool non_blocking=False) -> Tensor\n", "void backward(const Tensor & self, const Tensor & gradient, bool keep_graph, bool create_graph); // aten::backward(Tensor self, Tensor? gradient=None, bool keep_graph=False, bool create_graph=False) -> void\n", "void set_data(const Tensor & self, const Tensor & new_data); // aten::set_data(Tensor(a!) self, Tensor new_data) -> void\n", "Tensor data(const Tensor & self); // aten::data(Tensor self) -> Tensor\n", "bool is_leaf(const Tensor & self); // aten::is_leaf(Tensor self) -> bool\n", "int64_t output_nr(const Tensor & self); // aten::output_nr(Tensor self) -> int\n", "int64_t _version(const Tensor & self); // aten::_version(Tensor self) -> int\n", "std::tuple<Tensor,Tensor> _cudnn_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool deterministic, bool zero_infinity); // aten::_cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank, bool deterministic, bool zero_infinity) -> (Tensor, Tensor)\n", "Tensor _cudnn_rnn_flatten_weight(TensorList weight_arr, int64_t weight_stride0, int64_t input_size, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, bool bidirectional); // aten::_cudnn_rnn_flatten_weight(Tensor[] weight_arr, int weight_stride0, int input_size, int mode, int hidden_size, int num_layers, bool batch_first, bool bidirectional) -> Tensor\n", "std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _cudnn_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state); // aten::_cudnn_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor? weight_buf, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> _cudnn_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, const Tensor & output, const Tensor & grad_output, const Tensor & grad_hy, const Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask); // aten::_cudnn_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])\n", "Tensor _cudnn_init_dropout_state(double dropout, bool train, int64_t dropout_seed, const TensorOptions & options); // aten::_cudnn_init_dropout_state(float dropout, bool train, int dropout_seed, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\n", "int64_t _debug_has_internal_overlap(const Tensor & self); // aten::_debug_has_internal_overlap(Tensor self) -> int\n", "std::tuple<Tensor,Tensor> _fused_dropout(const Tensor & self, double p, Generator * generator); // aten::_fused_dropout(Tensor self, float p, Generator? generator=None) -> (Tensor, Tensor)\n", "Tensor _masked_scale(const Tensor & self, const Tensor & mask, double scale); // aten::_masked_scale(Tensor self, Tensor mask, float scale) -> Tensor\n", "std::tuple<Tensor,Tensor> _sobol_engine_draw(const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype); // aten::_sobol_engine_draw(Tensor quasi, int n, Tensor sobolstate, int dimension, int num_generated, ScalarType? dtype) -> (Tensor, Tensor)\n", "Tensor & _sobol_engine_ff_(Tensor & self, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated); // aten::_sobol_engine_ff_(Tensor(a!) self, int n, Tensor sobolstate, int dimension, int num_generated) -> Tensor(a!)\n", "Tensor & _sobol_engine_scramble_(Tensor & self, const Tensor & ltm, int64_t dimension); // aten::_sobol_engine_scramble_(Tensor(a!) self, Tensor ltm, int dimension) -> Tensor(a!)\n", "Tensor & _sobol_engine_initialize_state_(Tensor & self, int64_t dimension); // aten::_sobol_engine_initialize_state_(Tensor(a!) self, int dimension) -> Tensor(a!)\n", "Tensor _reshape_from_tensor(const Tensor & self, const Tensor & shape); // aten::_reshape_from_tensor(Tensor self, Tensor shape) -> Tensor\n", "Tensor _shape_as_tensor(const Tensor & self); // aten::_shape_as_tensor(Tensor self) -> Tensor\n", "Tensor dropout(const Tensor & input, double p, bool train); // aten::dropout(Tensor input, float p, bool train) -> Tensor\n", "Tensor & dropout_(Tensor & self, double p, bool train); // aten::dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)\n", "Tensor feature_dropout(const Tensor & input, double p, bool train); // aten::feature_dropout(Tensor input, float p, bool train) -> Tensor\n", "Tensor & feature_dropout_(Tensor & self, double p, bool train); // aten::feature_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)\n", "Tensor alpha_dropout(const Tensor & input, double p, bool train); // aten::alpha_dropout(Tensor input, float p, bool train) -> Tensor\n", "Tensor & alpha_dropout_(Tensor & self, double p, bool train); // aten::alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)\n", "Tensor feature_alpha_dropout(const Tensor & input, double p, bool train); // aten::feature_alpha_dropout(Tensor input, float p, bool train) -> Tensor\n", "Tensor & feature_alpha_dropout_(Tensor & self, double p, bool train); // aten::feature_alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)\n", "Tensor abs(const Tensor & self); // aten::abs(Tensor self) -> Tensor\n", "Tensor & abs_(Tensor & self); // aten::abs_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & abs_out(Tensor & out, const Tensor & self); // aten::abs.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor acos(const Tensor & self); // aten::acos(Tensor self) -> Tensor\n", "Tensor & acos_(Tensor & self); // aten::acos_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & acos_out(Tensor & out, const Tensor & self); // aten::acos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor avg_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad); // aten::avg_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, bool ceil_mode=False, bool count_include_pad=True) -> Tensor\n", "Tensor adaptive_avg_pool1d(const Tensor & self, IntArrayRef output_size); // aten::adaptive_avg_pool1d(Tensor self, int[1] output_size) -> Tensor\n", "std::tuple<Tensor,Tensor> adaptive_max_pool1d(const Tensor & self, IntArrayRef output_size); // aten::adaptive_max_pool1d(Tensor self, int[1] output_size) -> (Tensor, Tensor)\n", "Tensor add(const Tensor & self, const Tensor & other, Scalar alpha); // aten::add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor\n", "Tensor & add_(Tensor & self, const Tensor & other, Scalar alpha); // aten::add_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)\n", "Tensor & add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha); // aten::add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\n", "Tensor add(const Tensor & self, Scalar other, Scalar alpha); // aten::add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor\n", "Tensor & add_(Tensor & self, Scalar other, Scalar alpha); // aten::add_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)\n", "Tensor addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha); // aten::addmv(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor\n", "Tensor & addmv_(Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha); // aten::addmv_(Tensor(a!) self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)\n", "Tensor & addmv_out(Tensor & out, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha); // aten::addmv.out(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\n", "Tensor addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha); // aten::addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor\n", "Tensor & addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha); // aten::addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)\n", "Tensor & addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha); // aten::addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\n", "Tensor affine_grid_generator(const Tensor & theta, IntArrayRef size, bool align_corners); // aten::affine_grid_generator(Tensor theta, int[] size, bool align_corners) -> Tensor\n", "Tensor affine_grid_generator_backward(const Tensor & grad, IntArrayRef size, bool align_corners); // aten::affine_grid_generator_backward(Tensor grad, int[] size, bool align_corners) -> Tensor\n", "Tensor all(const Tensor & self, int64_t dim, bool keepdim); // aten::all.dim(Tensor self, int dim, bool keepdim=False) -> Tensor\n", "Tensor & all_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim); // aten::all.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\n", "bool allclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan); // aten::allclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> bool\n", "Tensor any(const Tensor & self, int64_t dim, bool keepdim); // aten::any.dim(Tensor self, int dim, bool keepdim=False) -> Tensor\n", "Tensor & any_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim); // aten::any.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor arange(Scalar end, const TensorOptions & options); // aten::arange(Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor arange(Scalar start, Scalar end, const TensorOptions & options); // aten::arange.start(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor arange(Scalar start, Scalar end, Scalar step, const TensorOptions & options); // aten::arange.start_step(Scalar start, Scalar end, Scalar step, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor & arange_out(Tensor & out, Scalar end); // aten::arange.out(Scalar end, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor & arange_out(Tensor & out, Scalar start, Scalar end, Scalar step); // aten::arange.start_out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor _dim_arange(const Tensor & like, int64_t dim); // aten::_dim_arange(Tensor like, int dim) -> Tensor\n", "Tensor argmax(const Tensor & self, c10::optional<int64_t> dim, bool keepdim); // aten::argmax(Tensor self, int? dim=None, bool keepdim=False) -> Tensor\n", "Tensor argmin(const Tensor & self, c10::optional<int64_t> dim, bool keepdim); // aten::argmin(Tensor self, int? dim=None, bool keepdim=False) -> Tensor\n", "Tensor as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset); // aten::as_strided(Tensor(a) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a)\n", "Tensor & as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset); // aten::as_strided_(Tensor(a!) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a!)\n", "Tensor asin(const Tensor & self); // aten::asin(Tensor self) -> Tensor\n", "Tensor & asin_(Tensor & self); // aten::asin_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & asin_out(Tensor & out, const Tensor & self); // aten::asin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor atan(const Tensor & self); // aten::atan(Tensor self) -> Tensor\n", "Tensor & atan_(Tensor & self); // aten::atan_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & atan_out(Tensor & out, const Tensor & self); // aten::atan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha); // aten::baddbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor\n", "Tensor & baddbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha); // aten::baddbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)\n", "Tensor & _baddbmm_mkl_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha); // aten::_baddbmm_mkl_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)\n", "Tensor & baddbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha); // aten::baddbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\n", "Tensor bartlett_window(int64_t window_length, const TensorOptions & options); // aten::bartlett_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor bartlett_window(int64_t window_length, bool periodic, const TensorOptions & options); // aten::bartlett_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled); // aten::batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> Tensor\n", "std::tuple<Tensor,Tensor,Tensor,int64_t> _batch_norm_impl_index(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled); // aten::_batch_norm_impl_index(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor, Tensor, Tensor, int)\n", "std::tuple<Tensor,Tensor,Tensor> _batch_norm_impl_index_backward(int64_t impl_index, const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var_transform, bool train, double eps, std::array<bool,3> output_mask); // aten::_batch_norm_impl_index_backward(int impl_index, Tensor input, Tensor grad_output, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var_transform, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\n", "Tensor bernoulli(const Tensor & self, Generator * generator); // aten::bernoulli(Tensor self, *, Generator? generator=None) -> Tensor\n", "Tensor & bernoulli_out(Tensor & out, const Tensor & self, Generator * generator); // aten::bernoulli.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)\n", "Tensor & bernoulli_(Tensor & self, const Tensor & p, Generator * generator); // aten::bernoulli_.Tensor(Tensor(a!) self, Tensor p, *, Generator? generator=None) -> Tensor(a!)\n", "Tensor & bernoulli_(Tensor & self, double p, Generator * generator); // aten::bernoulli_.float(Tensor(a!) self, float p=0.5, *, Generator? generator=None) -> Tensor(a!)\n", "Tensor bernoulli(const Tensor & self, double p, Generator * generator); // aten::bernoulli.p(Tensor self, float p, *, Generator? generator=None) -> Tensor\n", "Tensor bilinear(const Tensor & input1, const Tensor & input2, const Tensor & weight, const Tensor & bias); // aten::bilinear(Tensor input1, Tensor input2, Tensor weight, Tensor? bias) -> Tensor\n", "Tensor binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction); // aten::binary_cross_entropy_with_logits(Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor\n", "Tensor binary_cross_entropy_with_logits_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction); // aten::binary_cross_entropy_with_logits_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor\n", "Tensor bincount(const Tensor & self, const Tensor & weights, int64_t minlength); // aten::bincount(Tensor self, Tensor? weights=None, int minlength=0) -> Tensor\n", "Tensor bitwise_not(const Tensor & self); // aten::bitwise_not(Tensor self) -> Tensor\n", "Tensor & bitwise_not_(Tensor & self); // aten::bitwise_not_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & bitwise_not_out(Tensor & out, const Tensor & self); // aten::bitwise_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor logical_not(const Tensor & self); // aten::logical_not(Tensor self) -> Tensor\n", "Tensor & logical_not_(Tensor & self); // aten::logical_not_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & logical_not_out(Tensor & out, const Tensor & self); // aten::logical_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor logical_xor(const Tensor & self, const Tensor & other); // aten::logical_xor(Tensor self, Tensor other) -> Tensor\n", "Tensor & logical_xor_(Tensor & self, const Tensor & other); // aten::logical_xor_(Tensor(a!) self, Tensor other) -> Tensor(a!)\n", "Tensor & logical_xor_out(Tensor & out, const Tensor & self, const Tensor & other); // aten::logical_xor.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor blackman_window(int64_t window_length, const TensorOptions & options); // aten::blackman_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor blackman_window(int64_t window_length, bool periodic, const TensorOptions & options); // aten::blackman_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor bmm(const Tensor & self, const Tensor & mat2); // aten::bmm(Tensor self, Tensor mat2) -> Tensor\n", "Tensor & bmm_out(Tensor & out, const Tensor & self, const Tensor & mat2); // aten::bmm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)\n", "std::vector<Tensor> broadcast_tensors(TensorList tensors); // aten::broadcast_tensors(Tensor[] tensors) -> Tensor[]\n", "Tensor cat(TensorList tensors, int64_t dim); // aten::cat(Tensor[] tensors, int dim=0) -> Tensor\n", "Tensor & cat_out(Tensor & out, TensorList tensors, int64_t dim); // aten::cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor ceil(const Tensor & self); // aten::ceil(Tensor self) -> Tensor\n", "Tensor & ceil_(Tensor & self); // aten::ceil_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & ceil_out(Tensor & out, const Tensor & self); // aten::ceil.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor chain_matmul(TensorList matrices); // aten::chain_matmul(Tensor[] matrices) -> Tensor\n", "std::vector<Tensor> chunk(const Tensor & self, int64_t chunks, int64_t dim); // aten::chunk(Tensor(a) self, int chunks, int dim=0) -> Tensor(a)[]\n", "Tensor clamp(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max); // aten::clamp(Tensor self, Scalar? min=None, Scalar? max=None) -> Tensor\n", "Tensor & clamp_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max); // aten::clamp_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> Tensor(a!)\n", "Tensor & clamp_out(Tensor & out, const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max); // aten::clamp.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor clamp_max(const Tensor & self, Scalar max); // aten::clamp_max(Tensor self, Scalar max) -> Tensor\n", "Tensor & clamp_max_(Tensor & self, Scalar max); // aten::clamp_max_(Tensor(a!) self, Scalar max) -> Tensor(a!)\n", "Tensor & clamp_max_out(Tensor & out, const Tensor & self, Scalar max); // aten::clamp_max.out(Tensor self, Scalar max, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor clamp_min(const Tensor & self, Scalar min); // aten::clamp_min(Tensor self, Scalar min) -> Tensor\n", "Tensor & clamp_min_(Tensor & self, Scalar min); // aten::clamp_min_(Tensor(a!) self, Scalar min) -> Tensor(a!)\n", "Tensor & clamp_min_out(Tensor & out, const Tensor & self, Scalar min); // aten::clamp_min.out(Tensor self, Scalar min, *, Tensor(a!) out) -> Tensor(a!)\n", "bool cudnn_is_acceptable(const Tensor & self); // aten::cudnn_is_acceptable(Tensor self) -> bool\n", "Tensor constant_pad_nd(const Tensor & self, IntArrayRef pad, Scalar value); // aten::constant_pad_nd(Tensor self, int[] pad, Scalar value=0) -> Tensor\n", "Tensor contiguous(const Tensor & self, MemoryFormat memory_format); // aten::contiguous(Tensor self, *, MemoryFormat memory_format=contiguous_format) -> Tensor\n", "Tensor convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups); // aten::convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor\n", "Tensor convolution_overrideable(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups); // aten::convolution_overrideable(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor\n", "std::tuple<Tensor,Tensor,Tensor> convolution_backward_overrideable(const Tensor & grad_output, const Tensor & input, const Tensor & weight, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, std::array<bool,3> output_mask); // aten::convolution_backward_overrideable(Tensor grad_output, Tensor input, Tensor weight, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)\n", "Tensor _convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled); // aten::_convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled) -> Tensor\n", "Tensor _convolution_nogroup(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding); // aten::_convolution_nogroup(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding) -> Tensor\n", "std::tuple<Tensor,Tensor,Tensor> _convolution_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask); // aten::_convolution_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor weight, Tensor self, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\n", "Tensor conv1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups); // aten::conv1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] dilation=1, int groups=1) -> Tensor\n", "Tensor conv2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups); // aten::conv2d(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, int groups=1) -> Tensor\n", "Tensor conv3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups); // aten::conv3d(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1, int groups=1) -> Tensor\n", "Tensor conv_tbc(const Tensor & self, const Tensor & weight, const Tensor & bias, int64_t pad); // aten::conv_tbc(Tensor self, Tensor weight, Tensor bias, int pad=0) -> Tensor\n", "std::tuple<Tensor,Tensor,Tensor> conv_tbc_backward(const Tensor & self, const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t pad); // aten::conv_tbc_backward(Tensor self, Tensor input, Tensor weight, Tensor bias, int pad) -> (Tensor, Tensor, Tensor)\n", "Tensor conv_transpose1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation); // aten::conv_transpose1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] output_padding=0, int groups=1, int[1] dilation=1) -> Tensor\n", "Tensor conv_transpose2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation); // aten::conv_transpose2d.input(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int groups=1, int[2] dilation=1) -> Tensor\n", "Tensor conv_transpose3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation); // aten::conv_transpose3d.input(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int groups=1, int[3] dilation=1) -> Tensor\n", "Tensor & copy_(Tensor & self, const Tensor & src, bool non_blocking); // aten::copy_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)\n", "Tensor _copy_from(const Tensor & self, const Tensor & dst, bool non_blocking); // aten::_copy_from(Tensor self, Tensor dst, bool non_blocking=False) -> Tensor\n", "Tensor cos(const Tensor & self); // aten::cos(Tensor self) -> Tensor\n", "Tensor & cos_(Tensor & self); // aten::cos_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & cos_out(Tensor & out, const Tensor & self); // aten::cos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor cosh(const Tensor & self); // aten::cosh(Tensor self) -> Tensor\n", "Tensor & cosh_(Tensor & self); // aten::cosh_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & cosh_out(Tensor & out, const Tensor & self); // aten::cosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor cosine_embedding_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction); // aten::cosine_embedding_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor\n", "Tensor cudnn_affine_grid_generator(const Tensor & theta, int64_t N, int64_t C, int64_t H, int64_t W); // aten::cudnn_affine_grid_generator(Tensor theta, int N, int C, int H, int W) -> Tensor grid\n", "Tensor cudnn_affine_grid_generator_backward(const Tensor & grad, int64_t N, int64_t C, int64_t H, int64_t W); // aten::cudnn_affine_grid_generator_backward(Tensor grad, int N, int C, int H, int W) -> Tensor grad_theta\n", "std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon); // aten::cudnn_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon); // aten::cudnn_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon) -> (Tensor, Tensor, Tensor)\n", "Tensor cudnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic); // aten::cudnn_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\n", "Tensor cudnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic); // aten::cudnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\n", "std::tuple<Tensor,Tensor,Tensor> cudnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask); // aten::cudnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\n", "Tensor cudnn_convolution_backward_bias(const Tensor & grad_output); // aten::cudnn_convolution_backward_bias(Tensor grad_output) -> Tensor\n", "Tensor cudnn_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic); // aten::cudnn_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\n", "Tensor cudnn_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic); // aten::cudnn_convolution_transpose(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\n", "std::tuple<Tensor,Tensor,Tensor> cudnn_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask); // aten::cudnn_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\n", "Tensor cudnn_convolution_transpose_backward_bias(const Tensor & grad_output); // aten::cudnn_convolution_transpose_backward_bias(Tensor grad_output) -> Tensor\n", "Tensor cudnn_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic); // aten::cudnn_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\n", "Tensor cudnn_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic); // aten::cudnn_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\n", "Tensor cudnn_grid_sampler(const Tensor & self, const Tensor & grid); // aten::cudnn_grid_sampler(Tensor self, Tensor grid) -> Tensor output\n", "std::tuple<Tensor,Tensor> cudnn_grid_sampler_backward(const Tensor & self, const Tensor & grid, const Tensor & grad_output); // aten::cudnn_grid_sampler_backward(Tensor self, Tensor grid, Tensor grad_output) -> (Tensor grad_self, Tensor grad_grid)\n", "Tensor cumsum(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype); // aten::cumsum(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor\n", "Tensor & cumsum_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype); // aten::cumsum.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\n", "Tensor cumprod(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype); // aten::cumprod(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor\n", "Tensor & cumprod_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype); // aten::cumprod.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\n", "Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, int64_t reduction, bool zero_infinity); // aten::ctc_loss.IntList(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor\n", "Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, const Tensor & input_lengths, const Tensor & target_lengths, int64_t blank, int64_t reduction, bool zero_infinity); // aten::ctc_loss.Tensor(Tensor log_probs, Tensor targets, Tensor input_lengths, Tensor target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor\n", "std::tuple<Tensor,Tensor> _ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool zero_infinity); // aten::_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, bool zero_infinity=False) -> (Tensor, Tensor)\n", "Tensor _ctc_loss_backward(const Tensor & grad, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, const Tensor & neg_log_likelihood, const Tensor & log_alpha, int64_t blank, bool zero_infinity); // aten::_ctc_loss_backward(Tensor grad, Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, Tensor neg_log_likelihood, Tensor log_alpha, int blank, bool zero_infinity=False) -> Tensor\n", "Tensor det(const Tensor & self); // aten::det(Tensor self) -> Tensor\n", "Tensor diag_embed(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2); // aten::diag_embed(Tensor self, int offset=0, int dim1=-2, int dim2=-1) -> Tensor\n", "Tensor diagflat(const Tensor & self, int64_t offset); // aten::diagflat(Tensor self, int offset=0) -> Tensor\n", "Tensor diagonal(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2); // aten::diagonal(Tensor(a) self, int offset=0, int dim1=0, int dim2=1) -> Tensor(a)\n", "Tensor & fill_diagonal_(Tensor & self, Scalar fill_value, bool wrap); // aten::fill_diagonal_(Tensor(a!) self, Scalar fill_value, bool wrap=False) -> Tensor(a!)\n", "Tensor div(const Tensor & self, const Tensor & other); // aten::div.Tensor(Tensor self, Tensor other) -> Tensor\n", "Tensor & div_(Tensor & self, const Tensor & other); // aten::div_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\n", "Tensor & div_out(Tensor & out, const Tensor & self, const Tensor & other); // aten::div.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor div(const Tensor & self, Scalar other); // aten::div.Scalar(Tensor self, Scalar other) -> Tensor\n", "Tensor & div_(Tensor & self, Scalar other); // aten::div_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\n", "Tensor dot(const Tensor & self, const Tensor & tensor); // aten::dot(Tensor self, Tensor tensor) -> Tensor\n", "Tensor & dot_out(Tensor & out, const Tensor & self, const Tensor & tensor); // aten::dot.out(Tensor self, Tensor tensor, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor einsum(std::string equation, TensorList tensors); // aten::einsum(str equation, Tensor[] tensors) -> Tensor\n", "Tensor embedding(const Tensor & weight, const Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse); // aten::embedding(Tensor weight, Tensor indices, int padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> Tensor\n", "Tensor embedding_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse); // aten::embedding_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq, bool sparse) -> Tensor\n", "Tensor embedding_dense_backward(const Tensor & grad_output, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq); // aten::embedding_dense_backward(Tensor grad_output, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor\n", "Tensor & embedding_renorm_(Tensor & self, const Tensor & indices, double max_norm, double norm_type); // aten::embedding_renorm_(Tensor(a!) self, Tensor indices, float max_norm, float norm_type) -> Tensor(a!)\n", "Tensor embedding_sparse_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq); // aten::embedding_sparse_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor\n", "std::tuple<Tensor,Tensor,Tensor,Tensor> embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights); // aten::embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None) -> (Tensor, Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights); // aten::_embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None) -> (Tensor, Tensor, Tensor, Tensor)\n", "Tensor _embedding_bag_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights); // aten::_embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights) -> Tensor\n", "Tensor _embedding_bag_sparse_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights); // aten::_embedding_bag_sparse_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> Tensor\n", "Tensor _embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights); // aten::_embedding_bag_dense_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> Tensor\n", "Tensor _embedding_bag_per_sample_weights_backward(const Tensor & grad, const Tensor & weight, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, int64_t mode); // aten::_embedding_bag_per_sample_weights_backward(Tensor grad, Tensor weight, Tensor indices, Tensor offsets, Tensor offset2bag, int mode) -> Tensor\n", "Tensor empty(IntArrayRef size, const TensorOptions & options, c10::optional<MemoryFormat> memory_format); // aten::empty.memory_format(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor\n", "Tensor new_empty(const Tensor & self, IntArrayRef size, const TensorOptions & options); // aten::new_empty(Tensor self, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor new_full(const Tensor & self, IntArrayRef size, Scalar fill_value, const TensorOptions & options); // aten::new_full(Tensor self, int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor _empty_affine_quantized(IntArrayRef size, const TensorOptions & options, double scale, int64_t zero_point, c10::optional<MemoryFormat> memory_format); // aten::_empty_affine_quantized(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, float scale=1, int zero_point=0, MemoryFormat? memory_format=contiguous_format) -> Tensor\n", "Tensor _empty_per_channel_affine_quantized(IntArrayRef size, const Tensor & scales, const Tensor & zero_points, int64_t axis, const TensorOptions & options, c10::optional<MemoryFormat> memory_format); // aten::_empty_per_channel_affine_quantized(int[] size, *, Tensor scales, Tensor zero_points, int axis, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=contiguous_format) -> Tensor\n", "Tensor & resize_(Tensor & self, IntArrayRef size); // aten::resize_(Tensor(a!) self, int[] size) -> Tensor(a!)\n", "Tensor & empty_out(Tensor & out, IntArrayRef size, c10::optional<MemoryFormat> memory_format); // aten::empty.out(int[] size, *, MemoryFormat? memory_format=None, Tensor(a!) out) -> Tensor(a!)\n", "Tensor empty_like(const Tensor & self); // aten::empty_like(Tensor self) -> Tensor\n", "Tensor empty_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format); // aten::empty_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, MemoryFormat? memory_format=contiguous_format) -> Tensor\n", "Tensor empty_strided(IntArrayRef size, IntArrayRef stride, const TensorOptions & options); // aten::empty_strided(int[] size, int[] stride, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor erf(const Tensor & self); // aten::erf(Tensor self) -> Tensor\n", "Tensor & erf_(Tensor & self); // aten::erf_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & erf_out(Tensor & out, const Tensor & self); // aten::erf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor erfc(const Tensor & self); // aten::erfc(Tensor self) -> Tensor\n", "Tensor & erfc_(Tensor & self); // aten::erfc_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & erfc_out(Tensor & out, const Tensor & self); // aten::erfc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor exp(const Tensor & self); // aten::exp(Tensor self) -> Tensor\n", "Tensor & exp_(Tensor & self); // aten::exp_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & exp_out(Tensor & out, const Tensor & self); // aten::exp.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor expm1(const Tensor & self); // aten::expm1(Tensor self) -> Tensor\n", "Tensor & expm1_(Tensor & self); // aten::expm1_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & expm1_out(Tensor & out, const Tensor & self); // aten::expm1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor expand(const Tensor & self, IntArrayRef size, bool implicit); // aten::expand(Tensor(a) self, int[] size, *, bool implicit=False) -> Tensor(a)\n", "Tensor expand_as(const Tensor & self, const Tensor & other); // aten::expand_as(Tensor self, Tensor other) -> Tensor\n", "Tensor eye(int64_t n, const TensorOptions & options); // aten::eye(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor eye(int64_t n, int64_t m, const TensorOptions & options); // aten::eye.m(int n, int m, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor & eye_out(Tensor & out, int64_t n); // aten::eye.out(int n, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor & eye_out(Tensor & out, int64_t n, int64_t m); // aten::eye.m_out(int n, int m, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor flatten(const Tensor & self, int64_t start_dim, int64_t end_dim); // aten::flatten.using_ints(Tensor self, int start_dim=0, int end_dim=-1) -> Tensor\n", "Tensor & fill_(Tensor & self, Scalar value); // aten::fill_.Scalar(Tensor(a!) self, Scalar value) -> Tensor(a!)\n", "Tensor & fill_(Tensor & self, const Tensor & value); // aten::fill_.Tensor(Tensor(a!) self, Tensor value) -> Tensor(a!)\n", "Tensor floor(const Tensor & self); // aten::floor(Tensor self) -> Tensor\n", "Tensor & floor_(Tensor & self); // aten::floor_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & floor_out(Tensor & out, const Tensor & self); // aten::floor.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor frac(const Tensor & self); // aten::frac(Tensor self) -> Tensor\n", "Tensor & frac_(Tensor & self); // aten::frac_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & frac_out(Tensor & out, const Tensor & self); // aten::frac.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor full(IntArrayRef size, Scalar fill_value, const TensorOptions & options); // aten::full(int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor & full_out(Tensor & out, IntArrayRef size, Scalar fill_value); // aten::full.out(int[] size, Scalar fill_value, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor full_like(const Tensor & self, Scalar fill_value); // aten::full_like(Tensor self, Scalar fill_value) -> Tensor\n", "Tensor full_like(const Tensor & self, Scalar fill_value, const TensorOptions & options); // aten::full_like.dtype(Tensor self, Scalar fill_value, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\n", "Tensor from_file(std::string filename, c10::optional<bool> shared, c10::optional<int64_t> size, const TensorOptions & options); // aten::from_file(str filename, bool? shared=None, int? size=0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor grid_sampler(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners); // aten::grid_sampler(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor\n", "Tensor grid_sampler_2d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners); // aten::grid_sampler_2d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor\n", "std::tuple<Tensor,Tensor> grid_sampler_2d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners); // aten::grid_sampler_2d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)\n", "Tensor grid_sampler_3d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners); // aten::grid_sampler_3d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor\n", "std::tuple<Tensor,Tensor> grid_sampler_3d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners); // aten::grid_sampler_3d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)\n", "Tensor hann_window(int64_t window_length, const TensorOptions & options); // aten::hann_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor hann_window(int64_t window_length, bool periodic, const TensorOptions & options); // aten::hann_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor hamming_window(int64_t window_length, const TensorOptions & options); // aten::hamming_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor hamming_window(int64_t window_length, bool periodic, const TensorOptions & options); // aten::hamming_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor hamming_window(int64_t window_length, bool periodic, double alpha, const TensorOptions & options); // aten::hamming_window.periodic_alpha(int window_length, bool periodic, float alpha, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor hamming_window(int64_t window_length, bool periodic, double alpha, double beta, const TensorOptions & options); // aten::hamming_window.periodic_alpha_beta(int window_length, bool periodic, float alpha, float beta, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor hinge_embedding_loss(const Tensor & self, const Tensor & target, double margin, int64_t reduction); // aten::hinge_embedding_loss(Tensor self, Tensor target, float margin=1.0, int reduction=Mean) -> Tensor\n", "Tensor ger(const Tensor & self, const Tensor & vec2); // aten::ger(Tensor self, Tensor vec2) -> Tensor\n", "Tensor & ger_out(Tensor & out, const Tensor & self, const Tensor & vec2); // aten::ger.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor group_norm(const Tensor & input, int64_t num_groups, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enabled); // aten::group_norm(Tensor input, int num_groups, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enabled=True) -> Tensor\n", "Tensor fft(const Tensor & self, int64_t signal_ndim, bool normalized); // aten::fft(Tensor self, int signal_ndim, bool normalized=False) -> Tensor\n", "Tensor ifft(const Tensor & self, int64_t signal_ndim, bool normalized); // aten::ifft(Tensor self, int signal_ndim, bool normalized=False) -> Tensor\n", "Tensor rfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided); // aten::rfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True) -> Tensor\n", "Tensor irfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided, IntArrayRef signal_sizes); // aten::irfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True, int[] signal_sizes=[]) -> Tensor\n", "Tensor _fft_with_size(const Tensor & self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, IntArrayRef checked_signal_sizes, bool normalized, bool onesided, IntArrayRef output_sizes); // aten::_fft_with_size(Tensor self, int signal_ndim, bool complex_input, bool complex_output, bool inverse, int[] checked_signal_sizes, bool normalized, bool onesided, int[] output_sizes) -> Tensor\n", "int64_t _cufft_get_plan_cache_size(int64_t device_index); // aten::_cufft_get_plan_cache_size(int device_index) -> int\n", "int64_t _cufft_get_plan_cache_max_size(int64_t device_index); // aten::_cufft_get_plan_cache_max_size(int device_index) -> int\n", "void _cufft_set_plan_cache_max_size(int64_t device_index, int64_t max_size); // aten::_cufft_set_plan_cache_max_size(int device_index, int max_size) -> void\n", "void _cufft_clear_plan_cache(int64_t device_index); // aten::_cufft_clear_plan_cache(int device_index) -> void\n", "Tensor index(const Tensor & self, TensorList indices); // aten::index.Tensor(Tensor self, Tensor?[] indices) -> Tensor\n", "Tensor & index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source); // aten::index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)\n", "Tensor index_copy(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source); // aten::index_copy(Tensor self, int dim, Tensor index, Tensor source) -> Tensor\n", "Tensor & index_put_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate); // aten::index_put_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor(a!)\n", "Tensor index_put(const Tensor & self, TensorList indices, const Tensor & values, bool accumulate); // aten::index_put(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor\n", "Tensor & _index_put_impl_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate, bool unsafe); // aten::_index_put_impl_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> Tensor(a!)\n", "Tensor instance_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled); // aten::instance_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool use_input_stats, float momentum, float eps, bool cudnn_enabled) -> Tensor\n", "Tensor inverse(const Tensor & self); // aten::inverse(Tensor self) -> Tensor\n", "Tensor & inverse_out(Tensor & out, const Tensor & self); // aten::inverse.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor _inverse_helper(const Tensor & self); // aten::_inverse_helper(Tensor self) -> Tensor\n", "Tensor isclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan); // aten::isclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> Tensor\n", "Tensor isnan(const Tensor & self); // aten::isnan(Tensor self) -> Tensor\n", "bool is_distributed(const Tensor & self); // aten::is_distributed(Tensor self) -> bool\n", "bool is_floating_point(const Tensor & self); // aten::is_floating_point(Tensor self) -> bool\n", "bool is_complex(const Tensor & self); // aten::is_complex(Tensor self) -> bool\n", "bool is_nonzero(const Tensor & self); // aten::is_nonzero(Tensor self) -> bool\n", "bool is_same_size(const Tensor & self, const Tensor & other); // aten::is_same_size(Tensor self, Tensor other) -> bool\n", "bool is_signed(const Tensor & self); // aten::is_signed(Tensor self) -> bool\n", "Tensor kl_div(const Tensor & self, const Tensor & target, int64_t reduction); // aten::kl_div(Tensor self, Tensor target, int reduction=Mean) -> Tensor\n", "Tensor kl_div_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction); // aten::kl_div_backward(Tensor grad_output, Tensor self, Tensor target, int reduction=Mean) -> Tensor\n", "std::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, int64_t dim, bool keepdim); // aten::kthvalue(Tensor self, int k, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)\n", "std::tuple<Tensor &,Tensor &> kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool keepdim); // aten::kthvalue.values(Tensor self, int k, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)\n", "Tensor layer_norm(const Tensor & input, IntArrayRef normalized_shape, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enable); // aten::layer_norm(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enable=True) -> Tensor\n", "std::tuple<Tensor,Tensor,Tensor> native_layer_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t M, int64_t N, double eps); // aten::native_layer_norm(Tensor input, Tensor? weight, Tensor? bias, int M, int N, float eps) -> (Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor> native_layer_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & rstd, const Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask); // aten::native_layer_norm_backward(Tensor grad_out, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int M, int N, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor> native_layer_norm_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & input, const Tensor & mean, const Tensor & rstd, const Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask); // aten::native_layer_norm_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int M, int N, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\n", "Tensor linear(const Tensor & input, const Tensor & weight, const Tensor & bias); // aten::linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor\n", "Tensor mkldnn_linear(const Tensor & input, const Tensor & weight, const Tensor & bias); // aten::mkldnn_linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor\n", "Tensor fbgemm_linear_int8_weight_fp32_activation(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias); // aten::fbgemm_linear_int8_weight_fp32_activation(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor\n", "Tensor fbgemm_linear_int8_weight(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias); // aten::fbgemm_linear_int8_weight(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor\n", "std::tuple<Tensor,Tensor,double,int64_t> fbgemm_linear_quantize_weight(const Tensor & input); // aten::fbgemm_linear_quantize_weight(Tensor input) -> (Tensor, Tensor, float, int)\n", "Tensor fbgemm_pack_gemm_matrix_fp16(const Tensor & input); // aten::fbgemm_pack_gemm_matrix_fp16(Tensor input) -> Tensor\n", "Tensor fbgemm_linear_fp16_weight_fp32_activation(const Tensor & input, const Tensor & packed_weight, const Tensor & bias); // aten::fbgemm_linear_fp16_weight_fp32_activation(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor\n", "Tensor fbgemm_linear_fp16_weight(const Tensor & input, const Tensor & packed_weight, const Tensor & bias); // aten::fbgemm_linear_fp16_weight(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor\n", "Tensor fbgemm_pack_quantized_matrix(const Tensor & input); // aten::fbgemm_pack_quantized_matrix(Tensor input) -> Tensor\n", "Tensor fbgemm_pack_quantized_matrix(const Tensor & input, int64_t K, int64_t N); // aten::fbgemm_pack_quantized_matrix.KN(Tensor input, int K, int N) -> Tensor\n", "Tensor linspace(Scalar start, Scalar end, int64_t steps, const TensorOptions & options); // aten::linspace(Scalar start, Scalar end, int steps=100, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor & linspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps); // aten::linspace.out(Scalar start, Scalar end, int steps=100, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor log(const Tensor & self); // aten::log(Tensor self) -> Tensor\n", "Tensor & log_(Tensor & self); // aten::log_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & log_out(Tensor & out, const Tensor & self); // aten::log.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor log10(const Tensor & self); // aten::log10(Tensor self) -> Tensor\n", "Tensor & log10_(Tensor & self); // aten::log10_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & log10_out(Tensor & out, const Tensor & self); // aten::log10.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor log1p(const Tensor & self); // aten::log1p(Tensor self) -> Tensor\n", "Tensor & log1p_(Tensor & self); // aten::log1p_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & log1p_out(Tensor & out, const Tensor & self); // aten::log1p.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor log2(const Tensor & self); // aten::log2(Tensor self) -> Tensor\n", "Tensor & log2_(Tensor & self); // aten::log2_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & log2_out(Tensor & out, const Tensor & self); // aten::log2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor logdet(const Tensor & self); // aten::logdet(Tensor self) -> Tensor\n", "Tensor logspace(Scalar start, Scalar end, int64_t steps, double base, const TensorOptions & options); // aten::logspace(Scalar start, Scalar end, int steps=100, float base=10.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor & logspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps, double base); // aten::logspace.out(Scalar start, Scalar end, int steps=100, float base=10.0, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor log_softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype); // aten::log_softmax(Tensor self, int dim, ScalarType? dtype=None) -> Tensor\n", "Tensor _log_softmax(const Tensor & self, int64_t dim, bool half_to_float); // aten::_log_softmax(Tensor self, int dim, bool half_to_float) -> Tensor\n", "Tensor _log_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self); // aten::_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor\n", "Tensor logsumexp(const Tensor & self, IntArrayRef dim, bool keepdim); // aten::logsumexp(Tensor self, int[1] dim, bool keepdim=False) -> Tensor\n", "Tensor & logsumexp_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim); // aten::logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor margin_ranking_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction); // aten::margin_ranking_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor\n", "Tensor matmul(const Tensor & self, const Tensor & other); // aten::matmul(Tensor self, Tensor other) -> Tensor\n", "Tensor & matmul_out(Tensor & out, const Tensor & self, const Tensor & other); // aten::matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor matrix_rank(const Tensor & self, double tol, bool symmetric); // aten::matrix_rank.tol(Tensor self, float tol, bool symmetric=False) -> Tensor\n", "Tensor matrix_rank(const Tensor & self, bool symmetric); // aten::matrix_rank(Tensor self, bool symmetric=False) -> Tensor\n", "Tensor matrix_power(const Tensor & self, int64_t n); // aten::matrix_power(Tensor self, int n) -> Tensor\n", "std::tuple<Tensor,Tensor> max(const Tensor & self, int64_t dim, bool keepdim); // aten::max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)\n", "std::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, int64_t dim, bool keepdim); // aten::max.dim_max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)\n", "Tensor max_values(const Tensor & self, IntArrayRef dim, bool keepdim); // aten::max_values(Tensor self, int[1] dim, bool keepdim=False) -> Tensor\n", "std::tuple<Tensor,Tensor> max_pool1d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode); // aten::max_pool1d_with_indices(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)\n", "Tensor max_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode); // aten::max_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> Tensor\n", "Tensor max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode); // aten::max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor\n", "Tensor mkldnn_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode); // aten::mkldnn_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor\n", "Tensor quantized_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode); // aten::quantized_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor\n", "Tensor max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode); // aten::max_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> Tensor\n", "Tensor mean(const Tensor & self, c10::optional<ScalarType> dtype); // aten::mean(Tensor self, *, ScalarType? dtype=None) -> Tensor\n", "Tensor mean(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype); // aten::mean.dim(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\n", "Tensor & mean_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype); // aten::mean.out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\n", "std::tuple<Tensor,Tensor> median(const Tensor & self, int64_t dim, bool keepdim); // aten::median.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)\n", "std::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim); // aten::median.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)\n", "std::tuple<Tensor,Tensor> min(const Tensor & self, int64_t dim, bool keepdim); // aten::min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)\n", "std::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim); // aten::min.dim_min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)\n", "Tensor min_values(const Tensor & self, IntArrayRef dim, bool keepdim); // aten::min_values(Tensor self, int[1] dim, bool keepdim=False) -> Tensor\n", "Tensor mkldnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups); // aten::mkldnn_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups) -> Tensor\n", "Tensor mkldnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined); // aten::mkldnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> Tensor\n", "std::tuple<Tensor,Tensor> mkldnn_convolution_backward_weights(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined); // aten::mkldnn_convolution_backward_weights(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> (Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor> mkldnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, std::array<bool,3> output_mask); // aten::mkldnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon); // aten::miopen_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon); // aten::miopen_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon) -> (Tensor, Tensor, Tensor)\n", "Tensor miopen_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic); // aten::miopen_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\n", "Tensor miopen_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic); // aten::miopen_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\n", "std::tuple<Tensor,Tensor,Tensor> miopen_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask); // aten::miopen_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\n", "Tensor miopen_convolution_backward_bias(const Tensor & grad_output); // aten::miopen_convolution_backward_bias(Tensor grad_output) -> Tensor\n", "Tensor miopen_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic); // aten::miopen_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\n", "Tensor miopen_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic); // aten::miopen_convolution_transpose(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\n", "std::tuple<Tensor,Tensor,Tensor> miopen_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask); // aten::miopen_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\n", "Tensor miopen_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic); // aten::miopen_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\n", "Tensor miopen_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic); // aten::miopen_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\n", "Tensor miopen_depthwise_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic); // aten::miopen_depthwise_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\n", "Tensor miopen_depthwise_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic); // aten::miopen_depthwise_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\n", "std::tuple<Tensor,Tensor,Tensor> miopen_depthwise_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask); // aten::miopen_depthwise_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\n", "Tensor miopen_depthwise_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic); // aten::miopen_depthwise_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor\n", "std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> miopen_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & hx, const Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state); // aten::miopen_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> miopen_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, const Tensor & output, const Tensor & grad_output, const Tensor & grad_hy, const Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask); // aten::miopen_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])\n", "Tensor mm(const Tensor & self, const Tensor & mat2); // aten::mm(Tensor self, Tensor mat2) -> Tensor\n", "Tensor & mm_out(Tensor & out, const Tensor & self, const Tensor & mat2); // aten::mm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor _sparse_mm(const Tensor & sparse, const Tensor & dense); // aten::_sparse_mm(Tensor sparse, Tensor dense) -> Tensor\n", "std::tuple<Tensor,Tensor> mode(const Tensor & self, int64_t dim, bool keepdim); // aten::mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)\n", "std::tuple<Tensor &,Tensor &> mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim); // aten::mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)\n", "Tensor mul(const Tensor & self, const Tensor & other); // aten::mul.Tensor(Tensor self, Tensor other) -> Tensor\n", "Tensor & mul_(Tensor & self, const Tensor & other); // aten::mul_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\n", "Tensor & mul_out(Tensor & out, const Tensor & self, const Tensor & other); // aten::mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor mul(const Tensor & self, Scalar other); // aten::mul.Scalar(Tensor self, Scalar other) -> Tensor\n", "Tensor & mul_(Tensor & self, Scalar other); // aten::mul_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\n", "Tensor mv(const Tensor & self, const Tensor & vec); // aten::mv(Tensor self, Tensor vec) -> Tensor\n", "Tensor & mv_out(Tensor & out, const Tensor & self, const Tensor & vec); // aten::mv.out(Tensor self, Tensor vec, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor mvlgamma(const Tensor & self, int64_t p); // aten::mvlgamma(Tensor self, int p) -> Tensor\n", "Tensor & mvlgamma_(Tensor & self, int64_t p); // aten::mvlgamma_(Tensor(a!) self, int p) -> Tensor(a!)\n", "Tensor narrow_copy(const Tensor & self, int64_t dim, int64_t start, int64_t length); // aten::narrow_copy(Tensor self, int dim, int start, int length) -> Tensor\n", "Tensor narrow(const Tensor & self, int64_t dim, int64_t start, int64_t length); // aten::narrow(Tensor(a) self, int dim, int start, int length) -> Tensor(a)\n", "std::tuple<Tensor,Tensor,Tensor> native_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps); // aten::native_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor> batch_norm_stats(const Tensor & input, double eps); // aten::batch_norm_stats(Tensor input, float eps) -> (Tensor, Tensor)\n", "Tensor batch_norm_elemt(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & mean, const Tensor & invstd, double eps); // aten::batch_norm_elemt(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps) -> Tensor\n", "std::tuple<Tensor,Tensor> batch_norm_gather_stats(const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & running_mean, const Tensor & running_var, double momentum, double eps, int64_t count); // aten::batch_norm_gather_stats(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int count) -> (Tensor, Tensor)\n", "std::tuple<Tensor,Tensor> batch_norm_gather_stats_with_counts(const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & running_mean, const Tensor & running_var, double momentum, double eps, IntArrayRef counts); // aten::batch_norm_gather_stats_with_counts(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int[] counts) -> (Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor> native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask); // aten::native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor,Tensor> batch_norm_backward_reduce(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & weight, bool input_g, bool weight_g, bool bias_g); // aten::batch_norm_backward_reduce(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, bool input_g, bool weight_g, bool bias_g) -> (Tensor, Tensor, Tensor, Tensor)\n", "Tensor batch_norm_backward_elemt(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & weight, const Tensor & mean_dy, const Tensor & mean_dy_xmu); // aten::batch_norm_backward_elemt(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, Tensor mean_dy, Tensor mean_dy_xmu) -> Tensor\n", "std::tuple<Tensor,Tensor> batch_norm_update_stats(const Tensor & input, const Tensor & running_mean, const Tensor & running_var, double momentum); // aten::batch_norm_update_stats(Tensor input, Tensor? running_mean, Tensor? running_var, float momentum) -> (Tensor, Tensor)\n", "bool _nnpack_available(); // aten::_nnpack_available() -> bool\n", "Tensor _nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef padding); // aten::_nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, int[2] padding) -> Tensor\n", "std::tuple<Tensor,Tensor,Tensor> _nnpack_spatial_convolution_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, std::array<bool,3> output_mask); // aten::_nnpack_spatial_convolution_backward(Tensor input, Tensor grad_output, Tensor weight, int[2] padding, bool[3] output_mask) -> (Tensor, Tensor, Tensor)\n", "Tensor _nnpack_spatial_convolution_backward_input(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding); // aten::_nnpack_spatial_convolution_backward_input(Tensor input, Tensor grad_output, Tensor weight, int[2] padding) -> Tensor\n", "Tensor _nnpack_spatial_convolution_backward_weight(const Tensor & input, IntArrayRef weightsize, const Tensor & grad_output, IntArrayRef padding); // aten::_nnpack_spatial_convolution_backward_weight(Tensor input, int[] weightsize, Tensor grad_output, int[2] padding) -> Tensor\n", "Tensor ones(IntArrayRef size, const TensorOptions & options); // aten::ones(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor & ones_out(Tensor & out, IntArrayRef size); // aten::ones.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor ones_like(const Tensor & self); // aten::ones_like(Tensor self) -> Tensor\n", "Tensor ones_like(const Tensor & self, const TensorOptions & options); // aten::ones_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\n", "Tensor pairwise_distance(const Tensor & x1, const Tensor & x2, double p, double eps, bool keepdim); // aten::pairwise_distance(Tensor x1, Tensor x2, float p=2, float eps=1e-06, bool keepdim=False) -> Tensor\n", "Tensor cdist(const Tensor & x1, const Tensor & x2, double p); // aten::cdist(Tensor x1, Tensor x2, float p=2) -> Tensor\n", "Tensor _cdist_backward(const Tensor & grad, const Tensor & x1, const Tensor & x2, double p, const Tensor & cdist); // aten::_cdist_backward(Tensor grad, Tensor x1, Tensor x2, float p, Tensor cdist) -> Tensor\n", "Tensor pdist(const Tensor & self, double p); // aten::pdist(Tensor self, float p=2) -> Tensor\n", "Tensor _pdist_forward(const Tensor & self, double p); // aten::_pdist_forward(Tensor self, float p=2) -> Tensor\n", "Tensor _pdist_backward(const Tensor & grad, const Tensor & self, double p, const Tensor & pdist); // aten::_pdist_backward(Tensor grad, Tensor self, float p, Tensor pdist) -> Tensor\n", "Tensor cosine_similarity(const Tensor & x1, const Tensor & x2, int64_t dim, double eps); // aten::cosine_similarity(Tensor x1, Tensor x2, int dim=1, float eps=1e-08) -> Tensor\n", "Tensor permute(const Tensor & self, IntArrayRef dims); // aten::permute(Tensor(a) self, int[] dims) -> Tensor(a)\n", "Tensor numpy_T(const Tensor & self); // aten::numpy_T(Tensor(a) self) -> Tensor(a)\n", "Tensor pixel_shuffle(const Tensor & self, int64_t upscale_factor); // aten::pixel_shuffle(Tensor self, int upscale_factor) -> Tensor\n", "bool is_pinned(const Tensor & self); // aten::is_pinned(Tensor self) -> bool\n", "Tensor pin_memory(const Tensor & self); // aten::pin_memory(Tensor self) -> Tensor\n", "Tensor pinverse(const Tensor & self, double rcond); // aten::pinverse(Tensor self, float rcond=1e-15) -> Tensor\n", "Tensor poisson_nll_loss(const Tensor & input, const Tensor & target, bool log_input, bool full, double eps, int64_t reduction); // aten::poisson_nll_loss(Tensor input, Tensor target, bool log_input, bool full, float eps, int reduction) -> Tensor\n", "Tensor scalar_tensor(Scalar s, const TensorOptions & options); // aten::scalar_tensor(Scalar s, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor rand(IntArrayRef size, const TensorOptions & options); // aten::rand(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor rand(IntArrayRef size, Generator * generator, const TensorOptions & options); // aten::rand.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor & rand_out(Tensor & out, IntArrayRef size); // aten::rand.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor & rand_out(Tensor & out, IntArrayRef size, Generator * generator); // aten::rand.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)\n", "Tensor rand_like(const Tensor & self); // aten::rand_like(Tensor self) -> Tensor\n", "Tensor rand_like(const Tensor & self, const TensorOptions & options); // aten::rand_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\n", "Tensor randint(int64_t high, IntArrayRef size, const TensorOptions & options); // aten::randint(int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor randint(int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options); // aten::randint.generator(int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor randint(int64_t low, int64_t high, IntArrayRef size, const TensorOptions & options); // aten::randint.low(int low, int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor randint(int64_t low, int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options); // aten::randint.low_generator(int low, int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size); // aten::randint.out(int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size, Generator * generator); // aten::randint.generator_out(int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)\n", "Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size); // aten::randint.low_out(int low, int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size, Generator * generator); // aten::randint.low_generator_out(int low, int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)\n", "Tensor randint_like(const Tensor & self, int64_t high); // aten::randint_like(Tensor self, int high) -> Tensor\n", "Tensor randint_like(const Tensor & self, int64_t low, int64_t high); // aten::randint_like.low(Tensor self, int low, int high) -> Tensor\n", "Tensor randint_like(const Tensor & self, int64_t high, const TensorOptions & options); // aten::randint_like.dtype(Tensor self, int high, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\n", "Tensor randint_like(const Tensor & self, int64_t low, int64_t high, const TensorOptions & options); // aten::randint_like.low_dtype(Tensor self, int low, int high, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\n", "Tensor randn(IntArrayRef size, const TensorOptions & options); // aten::randn(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor randn(IntArrayRef size, Generator * generator, const TensorOptions & options); // aten::randn.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor & randn_out(Tensor & out, IntArrayRef size); // aten::randn.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor & randn_out(Tensor & out, IntArrayRef size, Generator * generator); // aten::randn.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)\n", "Tensor randn_like(const Tensor & self); // aten::randn_like(Tensor self) -> Tensor\n", "Tensor randn_like(const Tensor & self, const TensorOptions & options); // aten::randn_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\n", "Tensor randperm(int64_t n, const TensorOptions & options); // aten::randperm(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor randperm(int64_t n, Generator * generator, const TensorOptions & options); // aten::randperm.generator(int n, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor & randperm_out(Tensor & out, int64_t n); // aten::randperm.out(int n, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor & randperm_out(Tensor & out, int64_t n, Generator * generator); // aten::randperm.generator_out(int n, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)\n", "Tensor range(Scalar start, Scalar end, Scalar step, const TensorOptions & options); // aten::range.step(Scalar start, Scalar end, Scalar step=1, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor range(Scalar start, Scalar end, const TensorOptions & options); // aten::range(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor & range_out(Tensor & out, Scalar start, Scalar end, Scalar step); // aten::range.out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor reciprocal(const Tensor & self); // aten::reciprocal(Tensor self) -> Tensor\n", "Tensor & reciprocal_(Tensor & self); // aten::reciprocal_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & reciprocal_out(Tensor & out, const Tensor & self); // aten::reciprocal.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor neg(const Tensor & self); // aten::neg(Tensor self) -> Tensor\n", "Tensor & neg_(Tensor & self); // aten::neg_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & neg_out(Tensor & out, const Tensor & self); // aten::neg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor repeat(const Tensor & self, IntArrayRef repeats); // aten::repeat(Tensor self, int[] repeats) -> Tensor\n", "Tensor repeat_interleave(const Tensor & repeats); // aten::repeat_interleave.Tensor(Tensor repeats) -> Tensor\n", "Tensor repeat_interleave(const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim); // aten::repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None) -> Tensor\n", "Tensor repeat_interleave(const Tensor & self, int64_t repeats, c10::optional<int64_t> dim); // aten::repeat_interleave.self_int(Tensor self, int repeats, int? dim=None) -> Tensor\n", "Tensor reshape(const Tensor & self, IntArrayRef shape); // aten::reshape(Tensor self, int[] shape) -> Tensor\n", "Tensor _mkldnn_reshape(const Tensor & self, IntArrayRef shape); // aten::_mkldnn_reshape(Tensor self, int[] shape) -> Tensor\n", "Tensor reshape_as(const Tensor & self, const Tensor & other); // aten::reshape_as(Tensor self, Tensor other) -> Tensor\n", "Tensor round(const Tensor & self); // aten::round(Tensor self) -> Tensor\n", "Tensor & round_(Tensor & self); // aten::round_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & round_out(Tensor & out, const Tensor & self); // aten::round.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor rrelu(const Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator); // aten::rrelu(Tensor self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor\n", "Tensor & rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator); // aten::rrelu_(Tensor(a!) self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)\n", "Tensor relu(const Tensor & self); // aten::relu(Tensor self) -> Tensor\n", "Tensor & relu_(Tensor & self); // aten::relu_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor prelu(const Tensor & self, const Tensor & weight); // aten::prelu(Tensor self, Tensor weight) -> Tensor\n", "std::tuple<Tensor,Tensor> prelu_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight); // aten::prelu_backward(Tensor grad_output, Tensor self, Tensor weight) -> (Tensor, Tensor)\n", "Tensor gelu(const Tensor & self); // aten::gelu(Tensor self) -> Tensor\n", "Tensor gelu_backward(const Tensor & grad, const Tensor & self); // aten::gelu_backward(Tensor grad, Tensor self) -> Tensor\n", "Tensor hardshrink(const Tensor & self, Scalar lambd); // aten::hardshrink(Tensor self, Scalar lambd=0.5) -> Tensor\n", "Tensor hardshrink_backward(const Tensor & grad_out, const Tensor & self, Scalar lambd); // aten::hardshrink_backward(Tensor grad_out, Tensor self, Scalar lambd) -> Tensor\n", "Tensor rsqrt(const Tensor & self); // aten::rsqrt(Tensor self) -> Tensor\n", "Tensor & rsqrt_(Tensor & self); // aten::rsqrt_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & rsqrt_out(Tensor & out, const Tensor & self); // aten::rsqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor select(const Tensor & self, int64_t dim, int64_t index); // aten::select.int(Tensor(a) self, int dim, int index) -> Tensor(a)\n", "Tensor selu(const Tensor & self); // aten::selu(Tensor self) -> Tensor\n", "Tensor & selu_(Tensor & self); // aten::selu_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor celu(const Tensor & self, Scalar alpha); // aten::celu(Tensor self, Scalar alpha=1.0) -> Tensor\n", "Tensor & celu_(Tensor & self, Scalar alpha); // aten::celu_(Tensor(a!) self, Scalar alpha=1.0) -> Tensor(a!)\n", "Tensor sigmoid(const Tensor & self); // aten::sigmoid(Tensor self) -> Tensor\n", "Tensor & sigmoid_(Tensor & self); // aten::sigmoid_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & sigmoid_out(Tensor & out, const Tensor & self); // aten::sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor sin(const Tensor & self); // aten::sin(Tensor self) -> Tensor\n", "Tensor & sin_(Tensor & self); // aten::sin_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & sin_out(Tensor & out, const Tensor & self); // aten::sin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor sinh(const Tensor & self); // aten::sinh(Tensor self) -> Tensor\n", "Tensor & sinh_(Tensor & self); // aten::sinh_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & sinh_out(Tensor & out, const Tensor & self); // aten::sinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor detach(const Tensor & self); // aten::detach(Tensor self) -> Tensor\n", "Tensor & detach_(Tensor & self); // aten::detach_(Tensor(a!) self) -> Tensor(a!)\n", "int64_t size(const Tensor & self, int64_t dim); // aten::size.int(Tensor self, int dim) -> int\n", "Tensor slice(const Tensor & self, int64_t dim, int64_t start, int64_t end, int64_t step); // aten::slice.Tensor(Tensor(a) self, int dim=0, int start=0, int end=9223372036854775807, int step=1) -> Tensor(a)\n", "std::tuple<Tensor,Tensor> slogdet(const Tensor & self); // aten::slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)\n", "Tensor smm(const Tensor & self, const Tensor & mat2); // aten::smm(Tensor self, Tensor mat2) -> Tensor\n", "Tensor softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype); // aten::softmax(Tensor self, int dim, ScalarType? dtype=None) -> Tensor\n", "Tensor _softmax(const Tensor & self, int64_t dim, bool half_to_float); // aten::_softmax(Tensor self, int dim, bool half_to_float) -> Tensor\n", "Tensor _softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self); // aten::_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor\n", "std::vector<Tensor> split(const Tensor & self, int64_t split_size, int64_t dim); // aten::split.Tensor(Tensor(a) self, int split_size, int dim=0) -> Tensor(a)[]\n", "std::vector<Tensor> split_with_sizes(const Tensor & self, IntArrayRef split_sizes, int64_t dim); // aten::split_with_sizes(Tensor self, int[] split_sizes, int dim=0) -> Tensor[]\n", "Tensor squeeze(const Tensor & self); // aten::squeeze(Tensor(a) self) -> Tensor(a)\n", "Tensor squeeze(const Tensor & self, int64_t dim); // aten::squeeze.dim(Tensor(a) self, int dim) -> Tensor(a)\n", "Tensor & squeeze_(Tensor & self); // aten::squeeze_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & squeeze_(Tensor & self, int64_t dim); // aten::squeeze_.dim(Tensor(a!) self, int dim) -> Tensor(a!)\n", "Tensor sspaddmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha); // aten::sspaddmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor\n", "Tensor & sspaddmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha); // aten::sspaddmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\n", "Tensor stack(TensorList tensors, int64_t dim); // aten::stack(Tensor[] tensors, int dim=0) -> Tensor\n", "Tensor & stack_out(Tensor & out, TensorList tensors, int64_t dim); // aten::stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor stft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const Tensor & window, bool normalized, bool onesided); // aten::stft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool normalized=False, bool onesided=True) -> Tensor\n", "int64_t stride(const Tensor & self, int64_t dim); // aten::stride.int(Tensor self, int dim) -> int\n", "Tensor sum(const Tensor & self, c10::optional<ScalarType> dtype); // aten::sum(Tensor self, *, ScalarType? dtype=None) -> Tensor\n", "Tensor sum(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype); // aten::sum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\n", "Tensor & sum_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype); // aten::sum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\n", "Tensor sum_to_size(const Tensor & self, IntArrayRef size); // aten::sum_to_size(Tensor self, int[] size) -> Tensor\n", "Tensor sqrt(const Tensor & self); // aten::sqrt(Tensor self) -> Tensor\n", "Tensor & sqrt_(Tensor & self); // aten::sqrt_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & sqrt_out(Tensor & out, const Tensor & self); // aten::sqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor std(const Tensor & self, bool unbiased); // aten::std(Tensor self, bool unbiased=True) -> Tensor\n", "Tensor std(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim); // aten::std.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor\n", "std::tuple<Tensor,Tensor> std_mean(const Tensor & self, bool unbiased); // aten::std_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)\n", "std::tuple<Tensor,Tensor> std_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim); // aten::std_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)\n", "Tensor & std_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim); // aten::std.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor prod(const Tensor & self, c10::optional<ScalarType> dtype); // aten::prod(Tensor self, *, ScalarType? dtype=None) -> Tensor\n", "Tensor prod(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype); // aten::prod.dim_int(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor\n", "Tensor & prod_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype); // aten::prod.int_out(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)\n", "Tensor t(const Tensor & self); // aten::t(Tensor(a) self) -> Tensor(a)\n", "Tensor & t_(Tensor & self); // aten::t_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor tan(const Tensor & self); // aten::tan(Tensor self) -> Tensor\n", "Tensor & tan_(Tensor & self); // aten::tan_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & tan_out(Tensor & out, const Tensor & self); // aten::tan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor tanh(const Tensor & self); // aten::tanh(Tensor self) -> Tensor\n", "Tensor & tanh_(Tensor & self); // aten::tanh_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & tanh_out(Tensor & out, const Tensor & self); // aten::tanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor tensordot(const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other); // aten::tensordot(Tensor self, Tensor other, int[] dims_self, int[] dims_other) -> Tensor\n", "Tensor threshold(const Tensor & self, Scalar threshold, Scalar value); // aten::threshold(Tensor self, Scalar threshold, Scalar value) -> Tensor\n", "Tensor & threshold_(Tensor & self, Scalar threshold, Scalar value); // aten::threshold_(Tensor(a!) self, Scalar threshold, Scalar value) -> Tensor(a!)\n", "Tensor & threshold_out(Tensor & out, const Tensor & self, Scalar threshold, Scalar value); // aten::threshold.out(Tensor self, Scalar threshold, Scalar value, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor threshold_backward(const Tensor & grad_output, const Tensor & self, Scalar threshold); // aten::threshold_backward(Tensor grad_output, Tensor self, Scalar threshold) -> Tensor\n", "Tensor transpose(const Tensor & self, int64_t dim0, int64_t dim1); // aten::transpose.int(Tensor(a) self, int dim0, int dim1) -> Tensor(a)\n", "Tensor _mkldnn_transpose(const Tensor & self, int64_t dim0, int64_t dim1); // aten::_mkldnn_transpose(Tensor self, int dim0, int dim1) -> Tensor\n", "Tensor & transpose_(Tensor & self, int64_t dim0, int64_t dim1); // aten::transpose_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)\n", "Tensor & _mkldnn_transpose_(Tensor & self, int64_t dim0, int64_t dim1); // aten::_mkldnn_transpose_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)\n", "Tensor one_hot(const Tensor & self, int64_t num_classes); // aten::one_hot(Tensor self, int num_classes=-1) -> Tensor\n", "Tensor flip(const Tensor & self, IntArrayRef dims); // aten::flip(Tensor self, int[] dims) -> Tensor\n", "Tensor roll(const Tensor & self, IntArrayRef shifts, IntArrayRef dims); // aten::roll(Tensor self, int[1] shifts, int[1] dims=[]) -> Tensor\n", "Tensor rot90(const Tensor & self, int64_t k, IntArrayRef dims); // aten::rot90(Tensor self, int k=1, int[] dims=[0,1]) -> Tensor\n", "Tensor trapz(const Tensor & y, const Tensor & x, int64_t dim); // aten::trapz.x(Tensor y, Tensor x, *, int dim=-1) -> Tensor\n", "Tensor trapz(const Tensor & y, double dx, int64_t dim); // aten::trapz.dx(Tensor y, *, float dx=1, int dim=-1) -> Tensor\n", "Tensor _trilinear(const Tensor & i1, const Tensor & i2, const Tensor & i3, IntArrayRef expand1, IntArrayRef expand2, IntArrayRef expand3, IntArrayRef sumdim, int64_t unroll_dim); // aten::_trilinear(Tensor i1, Tensor i2, Tensor i3, int[] expand1, int[] expand2, int[] expand3, int[] sumdim, int unroll_dim=1) -> Tensor\n", "Tensor triplet_margin_loss(const Tensor & anchor, const Tensor & positive, const Tensor & negative, double margin, double p, double eps, bool swap, int64_t reduction); // aten::triplet_margin_loss(Tensor anchor, Tensor positive, Tensor negative, float margin=1.0, float p=2, float eps=1e-06, bool swap=False, int reduction=Mean) -> Tensor\n", "Tensor trunc(const Tensor & self); // aten::trunc(Tensor self) -> Tensor\n", "Tensor & trunc_(Tensor & self); // aten::trunc_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & trunc_out(Tensor & out, const Tensor & self); // aten::trunc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor type_as(const Tensor & self, const Tensor & other); // aten::type_as(Tensor self, Tensor other) -> Tensor\n", "bool _has_compatible_shallow_copy_type(const Tensor & self, const Tensor & from); // aten::_has_compatible_shallow_copy_type(Tensor self, Tensor from) -> bool\n", "std::tuple<Tensor,Tensor> _unique(const Tensor & self, bool sorted, bool return_inverse); // aten::_unique(Tensor self, bool sorted=True, bool return_inverse=False) -> (Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor> unique_dim(const Tensor & self, int64_t dim, bool sorted, bool return_inverse, bool return_counts); // aten::unique_dim(Tensor self, int dim, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor> unique_consecutive(const Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim); // aten::unique_consecutive(Tensor self, bool return_inverse=False, bool return_counts=False, int? dim=None) -> (Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor> unique_dim_consecutive(const Tensor & self, int64_t dim, bool return_inverse, bool return_counts); // aten::unique_dim_consecutive(Tensor self, int dim, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor> _unique2(const Tensor & self, bool sorted, bool return_inverse, bool return_counts); // aten::_unique2(Tensor self, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)\n", "Tensor _unsafe_view(const Tensor & self, IntArrayRef size); // aten::_unsafe_view(Tensor self, int[] size) -> Tensor\n", "Tensor unsqueeze(const Tensor & self, int64_t dim); // aten::unsqueeze(Tensor(a) self, int dim) -> Tensor(a)\n", "Tensor & unsqueeze_(Tensor & self, int64_t dim); // aten::unsqueeze_(Tensor(a!) self, int dim) -> Tensor(a!)\n", "Tensor var(const Tensor & self, bool unbiased); // aten::var(Tensor self, bool unbiased=True) -> Tensor\n", "Tensor var(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim); // aten::var.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor\n", "Tensor & var_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim); // aten::var.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\n", "std::tuple<Tensor,Tensor> var_mean(const Tensor & self, bool unbiased); // aten::var_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)\n", "std::tuple<Tensor,Tensor> var_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim); // aten::var_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)\n", "Tensor view_as(const Tensor & self, const Tensor & other); // aten::view_as(Tensor self, Tensor other) -> Tensor\n", "Tensor where(const Tensor & condition, const Tensor & self, const Tensor & other); // aten::where.self(Tensor condition, Tensor self, Tensor other) -> Tensor\n", "std::vector<Tensor> where(const Tensor & condition); // aten::where(Tensor condition) -> Tensor[]\n", "Tensor _s_where(const Tensor & condition, const Tensor & self, const Tensor & other); // aten::_s_where(Tensor condition, Tensor self, Tensor other) -> Tensor\n", "Tensor norm_except_dim(const Tensor & v, int64_t pow, int64_t dim); // aten::norm_except_dim(Tensor v, int pow=2, int dim=0) -> Tensor\n", "Tensor _weight_norm(const Tensor & v, const Tensor & g, int64_t dim); // aten::_weight_norm(Tensor v, Tensor g, int dim=0) -> Tensor\n", "std::tuple<Tensor,Tensor> _weight_norm_cuda_interface(const Tensor & v, const Tensor & g, int64_t dim); // aten::_weight_norm_cuda_interface(Tensor v, Tensor g, int dim=0) -> (Tensor, Tensor)\n", "std::tuple<Tensor,Tensor> _weight_norm_cuda_interface_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim); // aten::_weight_norm_cuda_interface_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)\n", "std::tuple<Tensor,Tensor> _weight_norm_differentiable_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim); // aten::_weight_norm_differentiable_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)\n", "Tensor zeros(IntArrayRef size, const TensorOptions & options); // aten::zeros(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor & zeros_out(Tensor & out, IntArrayRef size); // aten::zeros.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor zeros_like(const Tensor & self); // aten::zeros_like(Tensor self) -> Tensor\n", "Tensor zeros_like(const Tensor & self, const TensorOptions & options); // aten::zeros_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\n", "Tensor _standard_gamma_grad(const Tensor & self, const Tensor & output); // aten::_standard_gamma_grad(Tensor self, Tensor output) -> Tensor\n", "Tensor _standard_gamma(const Tensor & self, Generator * generator); // aten::_standard_gamma(Tensor self, Generator? generator=None) -> Tensor\n", "Tensor _dirichlet_grad(const Tensor & x, const Tensor & alpha, const Tensor & total); // aten::_dirichlet_grad(Tensor x, Tensor alpha, Tensor total) -> Tensor\n", "Tensor _sample_dirichlet(const Tensor & self, Generator * generator); // aten::_sample_dirichlet(Tensor self, Generator? generator=None) -> Tensor\n", "Tensor poisson(const Tensor & self, Generator * generator); // aten::poisson(Tensor self, Generator? generator=None) -> Tensor\n", "Tensor native_norm(const Tensor & self, Scalar p); // aten::native_norm(Tensor self, Scalar p=2) -> Tensor\n", "Tensor _sparse_sum(const Tensor & self); // aten::_sparse_sum(Tensor self) -> Tensor\n", "Tensor _sparse_sum(const Tensor & self, ScalarType dtype); // aten::_sparse_sum.dtype(Tensor self, *, ScalarType dtype) -> Tensor\n", "Tensor _sparse_sum(const Tensor & self, IntArrayRef dim); // aten::_sparse_sum.dim(Tensor self, int[1] dim) -> Tensor\n", "Tensor _sparse_sum(const Tensor & self, IntArrayRef dim, ScalarType dtype); // aten::_sparse_sum.dim_dtype(Tensor self, int[1] dim, *, ScalarType dtype) -> Tensor\n", "Tensor _sparse_sum_backward(const Tensor & grad, const Tensor & self, IntArrayRef dim); // aten::_sparse_sum_backward(Tensor grad, Tensor self, int[] dim) -> Tensor\n", "Tensor norm(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype); // aten::norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, ScalarType dtype) -> Tensor\n", "Tensor norm(const Tensor & self, Scalar p); // aten::norm.Scalar(Tensor self, Scalar p=2) -> Tensor\n", "Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype); // aten::norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor\n", "Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim); // aten::norm.ScalarOpt_dim(Tensor self, Scalar? p, int[1] dim, bool keepdim=False) -> Tensor\n", "Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype); // aten::norm.dtype_out(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)\n", "Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim); // aten::norm.out(Tensor self, Scalar? p, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor frobenius_norm(const Tensor & self); // aten::frobenius_norm(Tensor self) -> Tensor\n", "Tensor frobenius_norm(const Tensor & self, IntArrayRef dim, bool keepdim); // aten::frobenius_norm.dim(Tensor self, int[1] dim, bool keepdim=False) -> Tensor\n", "Tensor & frobenius_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim); // aten::frobenius_norm.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor nuclear_norm(const Tensor & self, bool keepdim); // aten::nuclear_norm(Tensor self, bool keepdim=False) -> Tensor\n", "Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, bool keepdim); // aten::nuclear_norm.out(Tensor self, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor nuclear_norm(const Tensor & self, IntArrayRef dim, bool keepdim); // aten::nuclear_norm.dim(Tensor self, int[2] dim, bool keepdim=False) -> Tensor\n", "Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim); // aten::nuclear_norm.dim_out(Tensor self, int[2] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor clone(const Tensor & self); // aten::clone(Tensor self) -> Tensor\n", "Tensor & resize_as_(Tensor & self, const Tensor & the_template); // aten::resize_as_(Tensor(a!) self, Tensor the_template) -> Tensor(a!)\n", "Tensor & pow_out(Tensor & out, const Tensor & self, Scalar exponent); // aten::pow.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor pow(const Tensor & self, Scalar exponent); // aten::pow.Tensor_Scalar(Tensor self, Scalar exponent) -> Tensor\n", "Tensor & zero_(Tensor & self); // aten::zero_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & sub_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha); // aten::sub.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\n", "Tensor sub(const Tensor & self, const Tensor & other, Scalar alpha); // aten::sub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor\n", "Tensor & sub_(Tensor & self, const Tensor & other, Scalar alpha); // aten::sub_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)\n", "Tensor sub(const Tensor & self, Scalar other, Scalar alpha); // aten::sub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor\n", "Tensor & sub_(Tensor & self, Scalar other, Scalar alpha); // aten::sub_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)\n", "Tensor rsub(const Tensor & self, const Tensor & other, Scalar alpha); // aten::rsub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor\n", "Tensor rsub(const Tensor & self, Scalar other, Scalar alpha); // aten::rsub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor\n", "Tensor _sparse_addmm(const Tensor & self, const Tensor & sparse, const Tensor & dense, Scalar beta, Scalar alpha); // aten::_sparse_addmm(Tensor self, Tensor sparse, Tensor dense, *, Scalar beta=1, Scalar alpha=1) -> Tensor\n", "Tensor & addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha); // aten::addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\n", "Tensor addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha); // aten::addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor\n", "Tensor & addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha); // aten::addmm_(Tensor(a!) self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)\n", "Tensor sparse_coo_tensor(IntArrayRef size, const TensorOptions & options); // aten::sparse_coo_tensor.size(int[] size, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\n", "Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, const TensorOptions & options); // aten::sparse_coo_tensor.indices(Tensor indices, Tensor values, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options); // aten::sparse_coo_tensor.indices_size(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor _sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options); // aten::_sparse_coo_tensor_unsafe(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor _sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const TensorOptions & options); // aten::_sparse_coo_tensor_with_dims(int sparse_dim, int dense_dim, int[] size, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\n", "Tensor _sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const Tensor & indices, const Tensor & values, const TensorOptions & options); // aten::_sparse_coo_tensor_with_dims_and_tensors(int sparse_dim, int dense_dim, int[] size, Tensor indices, Tensor values, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor\n", "Tensor & sparse_resize_(Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim); // aten::sparse_resize_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> Tensor(a!)\n", "Tensor & sparse_resize_and_clear_(Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim); // aten::sparse_resize_and_clear_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> Tensor(a!)\n", "Tensor sparse_mask(const Tensor & self, const Tensor & mask); // aten::sparse_mask(Tensor self, Tensor mask) -> Tensor\n", "Tensor to_dense(const Tensor & self); // aten::to_dense(Tensor self) -> Tensor\n", "Tensor to_dense_backward(const Tensor & grad, const Tensor & input); // aten::to_dense_backward(Tensor grad, Tensor input) -> Tensor\n", "int64_t sparse_dim(const Tensor & self); // aten::sparse_dim(Tensor self) -> int\n", "int64_t _dimI(const Tensor & self); // aten::_dimI(Tensor self) -> int\n", "int64_t dense_dim(const Tensor & self); // aten::dense_dim(Tensor self) -> int\n", "int64_t _dimV(const Tensor & self); // aten::_dimV(Tensor self) -> int\n", "int64_t _nnz(const Tensor & self); // aten::_nnz(Tensor self) -> int\n", "Tensor coalesce(const Tensor & self); // aten::coalesce(Tensor self) -> Tensor\n", "bool is_coalesced(const Tensor & self); // aten::is_coalesced(Tensor self) -> bool\n", "Tensor _indices(const Tensor & self); // aten::_indices(Tensor(a) self) -> Tensor(a)\n", "Tensor _values(const Tensor & self); // aten::_values(Tensor(a) self) -> Tensor(a)\n", "Tensor & _coalesced_(Tensor & self, bool coalesced); // aten::_coalesced_(Tensor(a!) self, bool coalesced) -> Tensor(a!)\n", "Tensor indices(const Tensor & self); // aten::indices(Tensor(a) self) -> Tensor(a)\n", "Tensor values(const Tensor & self); // aten::values(Tensor(a) self) -> Tensor(a)\n", "Tensor & hspmm_out(Tensor & out, const Tensor & mat1, const Tensor & mat2); // aten::hspmm.out(Tensor mat1, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor hspmm(const Tensor & mat1, const Tensor & mat2); // aten::hspmm(Tensor mat1, Tensor mat2) -> Tensor\n", "Tensor & copy_sparse_to_sparse_(Tensor & self, const Tensor & src, bool non_blocking); // aten::copy_sparse_to_sparse_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)\n", "int64_t numel(const Tensor & self); // aten::numel(Tensor self) -> int\n", "std::vector<Tensor> unbind(const Tensor & self, int64_t dim); // aten::unbind.int(Tensor(a) self, int dim=0) -> Tensor(a)[]\n", "Tensor to_sparse(const Tensor & self, int64_t sparse_dim); // aten::to_sparse.sparse_dim(Tensor self, int sparse_dim) -> Tensor\n", "Tensor to_sparse(const Tensor & self); // aten::to_sparse(Tensor self) -> Tensor\n", "Tensor to_mkldnn(const Tensor & self); // aten::to_mkldnn(Tensor self) -> Tensor\n", "Tensor mkldnn_reorder_conv2d_weight(const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups); // aten::mkldnn_reorder_conv2d_weight(Tensor self, int[2] padding=0, int[2] stride=1, int[2] dilation=1, int groups=1) -> Tensor\n", "Tensor to_mkldnn_backward(const Tensor & grad, const Tensor & input); // aten::to_mkldnn_backward(Tensor grad, Tensor input) -> Tensor\n", "Tensor quantize_per_tensor(const Tensor & self, double scale, int64_t zero_point, ScalarType dtype); // aten::quantize_per_tensor(Tensor self, float scale, int zero_point, ScalarType dtype) -> Tensor\n", "Tensor quantize_per_channel(const Tensor & self, const Tensor & scales, const Tensor & zero_points, int64_t axis, ScalarType dtype); // aten::quantize_per_channel(Tensor self, Tensor scales, Tensor zero_points, int axis, ScalarType dtype) -> Tensor\n", "Tensor dequantize(const Tensor & self); // aten::dequantize(Tensor self) -> Tensor\n", "double q_scale(const Tensor & self); // aten::q_scale(Tensor self) -> float\n", "int64_t q_zero_point(const Tensor & self); // aten::q_zero_point(Tensor self) -> int\n", "Tensor q_per_channel_scales(const Tensor & self); // aten::q_per_channel_scales(Tensor self) -> Tensor\n", "Tensor q_per_channel_zero_points(const Tensor & self); // aten::q_per_channel_zero_points(Tensor self) -> Tensor\n", "int64_t q_per_channel_axis(const Tensor & self); // aten::q_per_channel_axis(Tensor self) -> int\n", "Tensor int_repr(const Tensor & self); // aten::int_repr(Tensor self) -> Tensor\n", "Tensor _make_per_tensor_quantized_tensor(const Tensor & self, double scale, int64_t zero_point); // aten::_make_per_tensor_quantized_tensor(Tensor self, float scale, int zero_point) -> Tensor\n", "Tensor _make_per_channel_quantized_tensor(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis); // aten::_make_per_channel_quantized_tensor(Tensor self, Tensor scale, Tensor zero_point, int axis) -> Tensor\n", "QScheme qscheme(const Tensor & self); // aten::qscheme(Tensor self) -> QScheme\n", "Tensor fake_quantize_per_tensor_affine(const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max); // aten::fake_quantize_per_tensor_affine(Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> Tensor\n", "Tensor fake_quantize_per_tensor_affine_backward(const Tensor & grad, const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max); // aten::fake_quantize_per_tensor_affine_backward(Tensor grad, Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> Tensor\n", "Tensor fake_quantize_per_channel_affine(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max); // aten::fake_quantize_per_channel_affine(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> Tensor\n", "Tensor fake_quantize_per_channel_affine_backward(const Tensor & grad, const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max); // aten::fake_quantize_per_channel_affine_backward(Tensor grad, Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> Tensor\n", "Tensor to(const Tensor & self, const TensorOptions & options, bool non_blocking, bool copy); // aten::to.dtype_layout(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, bool non_blocking=False, bool copy=False) -> Tensor\n", "Tensor to(const Tensor & self, Device device, ScalarType dtype, bool non_blocking, bool copy); // aten::to.device(Tensor self, Device device, ScalarType dtype, bool non_blocking=False, bool copy=False) -> Tensor\n", "Tensor to(const Tensor & self, ScalarType dtype, bool non_blocking, bool copy); // aten::to.dtype(Tensor self, ScalarType dtype, bool non_blocking=False, bool copy=False) -> Tensor\n", "Tensor to(const Tensor & self, const Tensor & other, bool non_blocking, bool copy); // aten::to.other(Tensor self, Tensor other, bool non_blocking=False, bool copy=False) -> Tensor\n", "std::vector<Tensor> meshgrid(TensorList tensors); // aten::meshgrid(Tensor[] tensors) -> Tensor[]\n", "Tensor cartesian_prod(TensorList tensors); // aten::cartesian_prod(Tensor[] tensors) -> Tensor\n", "Tensor combinations(const Tensor & self, int64_t r, bool with_replacement); // aten::combinations(Tensor self, int r=2, bool with_replacement=False) -> Tensor\n", "Scalar item(const Tensor & self); // aten::item(Tensor self) -> Scalar\n", "ScalarType result_type(const Tensor & tensor, const Tensor & other); // aten::result_type.Tensor(Tensor tensor, Tensor other) -> ScalarType\n", "ScalarType result_type(const Tensor & tensor, Scalar other); // aten::result_type.Scalar(Tensor tensor, Scalar other) -> ScalarType\n", "ScalarType result_type(Scalar scalar, const Tensor & tensor); // aten::result_type.Scalar_Tensor(Scalar scalar, Tensor tensor) -> ScalarType\n", "ScalarType result_type(Scalar scalar1, Scalar scalar2); // aten::result_type.Scalar_Scalar(Scalar scalar1, Scalar scalar2) -> ScalarType\n", "bool can_cast(ScalarType from, ScalarType to); // aten::can_cast(ScalarType from, ScalarType to) -> bool\n", "ScalarType promote_types(ScalarType type1, ScalarType type2); // aten::promote_types(ScalarType type1, ScalarType type2) -> ScalarType\n", "Scalar _local_scalar_dense(const Tensor & self); // aten::_local_scalar_dense(Tensor self) -> Scalar\n", "std::tuple<Tensor,Tensor,Tensor> _thnn_fused_lstm_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & cx, const Tensor & input_bias, const Tensor & hidden_bias); // aten::_thnn_fused_lstm_cell(Tensor input_gates, Tensor hidden_gates, Tensor cx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & cx, const Tensor & cy, const Tensor & workspace, bool has_bias); // aten::_thnn_fused_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor cx, Tensor cy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & input_bias, const Tensor & hidden_bias, const Tensor & cx, const Tensor & cy); // aten::_thnn_differentiable_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor input_gates, Tensor hidden_gates, Tensor? input_bias, Tensor? hidden_bias, Tensor cx, Tensor cy) -> (Tensor, Tensor, Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor> _thnn_fused_gru_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias); // aten::_thnn_fused_gru_cell(Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_gru_cell_backward(const Tensor & grad_hy, const Tensor & workspace, bool has_bias); // aten::_thnn_fused_gru_cell_backward(Tensor grad_hy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_gru_cell_backward(const Tensor & grad_hy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias); // aten::_thnn_differentiable_gru_cell_backward(Tensor grad_hy, Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias, Tensor? hidden_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first); // aten::lstm.input(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional); // aten::lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor> gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first); // aten::gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)\n", "std::tuple<Tensor,Tensor> gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional); // aten::gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)\n", "std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first); // aten::rnn_tanh.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)\n", "std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional); // aten::rnn_tanh.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)\n", "std::tuple<Tensor,Tensor> rnn_relu(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first); // aten::rnn_relu.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)\n", "std::tuple<Tensor,Tensor> rnn_relu(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional); // aten::rnn_relu.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)\n", "std::tuple<Tensor,Tensor> lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh); // aten::lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor)\n", "Tensor gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh); // aten::gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor\n", "Tensor rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh); // aten::rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor\n", "Tensor rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh); // aten::rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor\n", "std::tuple<Tensor,Tensor,Tensor> quantized_lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first, c10::optional<ScalarType> dtype, bool use_dynamic); // aten::quantized_lstm(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, *, ScalarType? dtype=None, bool use_dynamic=False) -> (Tensor, Tensor, Tensor)\n", "std::tuple<Tensor,Tensor> quantized_gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first); // aten::quantized_gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)\n", "std::tuple<Tensor,Tensor> quantized_gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional); // aten::quantized_gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)\n", "std::tuple<Tensor,Tensor> quantized_lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh); // aten::quantized_lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor, Tensor)\n", "Tensor quantized_gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh); // aten::quantized_gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor\n", "Tensor quantized_rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh); // aten::quantized_rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor\n", "Tensor quantized_rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh); // aten::quantized_rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor\n", "std::tuple<Tensor,Tensor> _pack_padded_sequence(const Tensor & input, const Tensor & lengths, bool batch_first); // aten::_pack_padded_sequence(Tensor input, Tensor lengths, bool batch_first) -> (Tensor, Tensor)\n", "Tensor _pack_padded_sequence_backward(const Tensor & grad, IntArrayRef input_size, const Tensor & batch_sizes, bool batch_first); // aten::_pack_padded_sequence_backward(Tensor grad, int[] input_size, Tensor batch_sizes, bool batch_first) -> Tensor\n", "std::tuple<Tensor,Tensor> _pad_packed_sequence(const Tensor & data, const Tensor & batch_sizes, bool batch_first, Scalar padding_value, int64_t total_length); // aten::_pad_packed_sequence(Tensor data, Tensor batch_sizes, bool batch_first, Scalar padding_value, int total_length) -> (Tensor, Tensor)\n", "Tensor & set_(Tensor & self, Storage source); // aten::set_.source_Storage(Tensor(a!) self, Storage source) -> Tensor(a!)\n", "Tensor & set_(Tensor & self, Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride); // aten::set_.source_Storage_storage_offset(Tensor(a!) self, Storage source, int storage_offset, int[] size, int[] stride=[]) -> Tensor(a!)\n", "Tensor & set_(Tensor & self, const Tensor & source); // aten::set_.source_Tensor(Tensor(a!) self, Tensor source) -> Tensor(a!)\n", "Tensor & set_(Tensor & self); // aten::set_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & set_quantizer_(Tensor & self, ConstQuantizerPtr quantizer); // aten::set_quantizer_(Tensor(a!) self, ConstQuantizerPtr quantizer) -> Tensor(a!)\n", "bool is_set_to(const Tensor & self, const Tensor & tensor); // aten::is_set_to(Tensor self, Tensor tensor) -> bool\n", "Tensor & masked_fill_(Tensor & self, const Tensor & mask, Scalar value); // aten::masked_fill_.Scalar(Tensor(a!) self, Tensor mask, Scalar value) -> Tensor(a!)\n", "Tensor masked_fill(const Tensor & self, const Tensor & mask, Scalar value); // aten::masked_fill.Scalar(Tensor self, Tensor mask, Scalar value) -> Tensor\n", "Tensor & masked_fill_(Tensor & self, const Tensor & mask, const Tensor & value); // aten::masked_fill_.Tensor(Tensor(a!) self, Tensor mask, Tensor value) -> Tensor(a!)\n", "Tensor masked_fill(const Tensor & self, const Tensor & mask, const Tensor & value); // aten::masked_fill.Tensor(Tensor self, Tensor mask, Tensor value) -> Tensor\n", "Tensor & masked_scatter_(Tensor & self, const Tensor & mask, const Tensor & source); // aten::masked_scatter_(Tensor(a!) self, Tensor mask, Tensor source) -> Tensor(a!)\n", "Tensor masked_scatter(const Tensor & self, const Tensor & mask, const Tensor & source); // aten::masked_scatter(Tensor self, Tensor mask, Tensor source) -> Tensor\n", "Tensor view(const Tensor & self, IntArrayRef size); // aten::view(Tensor(a) self, int[] size) -> Tensor(a)\n", "Tensor & put_(Tensor & self, const Tensor & index, const Tensor & source, bool accumulate); // aten::put_(Tensor(a!) self, Tensor index, Tensor source, bool accumulate=False) -> Tensor(a!)\n", "Tensor & index_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source); // aten::index_add_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)\n", "Tensor index_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source); // aten::index_add(Tensor self, int dim, Tensor index, Tensor source) -> Tensor\n", "Tensor & index_fill_(Tensor & self, int64_t dim, const Tensor & index, Scalar value); // aten::index_fill_.Scalar(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)\n", "Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, Scalar value); // aten::index_fill.Scalar(Tensor self, int dim, Tensor index, Scalar value) -> Tensor\n", "Tensor & index_fill_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & value); // aten::index_fill_.Tensor(Tensor(a!) self, int dim, Tensor index, Tensor value) -> Tensor(a!)\n", "Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & value); // aten::index_fill.Tensor(Tensor self, int dim, Tensor index, Tensor value) -> Tensor\n", "Tensor & scatter_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src); // aten::scatter_.src(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)\n", "Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src); // aten::scatter.src(Tensor self, int dim, Tensor index, Tensor src) -> Tensor\n", "Tensor & scatter_(Tensor & self, int64_t dim, const Tensor & index, Scalar value); // aten::scatter_.value(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)\n", "Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, Scalar value); // aten::scatter.value(Tensor self, int dim, Tensor index, Scalar value) -> Tensor\n", "Tensor & scatter_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src); // aten::scatter_add_(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)\n", "Tensor scatter_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src); // aten::scatter_add(Tensor self, int dim, Tensor index, Tensor src) -> Tensor\n", "Tensor & lt_(Tensor & self, Scalar other); // aten::lt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\n", "Tensor & lt_(Tensor & self, const Tensor & other); // aten::lt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\n", "Tensor & gt_(Tensor & self, Scalar other); // aten::gt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\n", "Tensor & gt_(Tensor & self, const Tensor & other); // aten::gt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\n", "Tensor & le_(Tensor & self, Scalar other); // aten::le_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\n", "Tensor & le_(Tensor & self, const Tensor & other); // aten::le_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\n", "Tensor & ge_(Tensor & self, Scalar other); // aten::ge_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\n", "Tensor & ge_(Tensor & self, const Tensor & other); // aten::ge_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\n", "Tensor & eq_(Tensor & self, Scalar other); // aten::eq_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\n", "Tensor & eq_(Tensor & self, const Tensor & other); // aten::eq_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\n", "Tensor & ne_(Tensor & self, Scalar other); // aten::ne_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\n", "Tensor & ne_(Tensor & self, const Tensor & other); // aten::ne_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\n", "Tensor __and__(const Tensor & self, Scalar other); // aten::__and__.Scalar(Tensor self, Scalar other) -> Tensor\n", "Tensor __and__(const Tensor & self, const Tensor & other); // aten::__and__.Tensor(Tensor self, Tensor other) -> Tensor\n", "Tensor & __iand__(Tensor & self, Scalar other); // aten::__iand__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\n", "Tensor & __iand__(Tensor & self, const Tensor & other); // aten::__iand__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\n", "Tensor __or__(const Tensor & self, Scalar other); // aten::__or__.Scalar(Tensor self, Scalar other) -> Tensor\n", "Tensor __or__(const Tensor & self, const Tensor & other); // aten::__or__.Tensor(Tensor self, Tensor other) -> Tensor\n", "Tensor & __ior__(Tensor & self, Scalar other); // aten::__ior__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\n", "Tensor & __ior__(Tensor & self, const Tensor & other); // aten::__ior__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\n", "Tensor __xor__(const Tensor & self, Scalar other); // aten::__xor__.Scalar(Tensor self, Scalar other) -> Tensor\n", "Tensor __xor__(const Tensor & self, const Tensor & other); // aten::__xor__.Tensor(Tensor self, Tensor other) -> Tensor\n", "Tensor & __ixor__(Tensor & self, Scalar other); // aten::__ixor__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\n", "Tensor & __ixor__(Tensor & self, const Tensor & other); // aten::__ixor__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\n", "Tensor __lshift__(const Tensor & self, Scalar other); // aten::__lshift__.Scalar(Tensor self, Scalar other) -> Tensor\n", "Tensor __lshift__(const Tensor & self, const Tensor & other); // aten::__lshift__.Tensor(Tensor self, Tensor other) -> Tensor\n", "Tensor & __ilshift__(Tensor & self, Scalar other); // aten::__ilshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\n", "Tensor & __ilshift__(Tensor & self, const Tensor & other); // aten::__ilshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\n", "Tensor __rshift__(const Tensor & self, Scalar other); // aten::__rshift__.Scalar(Tensor self, Scalar other) -> Tensor\n", "Tensor __rshift__(const Tensor & self, const Tensor & other); // aten::__rshift__.Tensor(Tensor self, Tensor other) -> Tensor\n", "Tensor & __irshift__(Tensor & self, Scalar other); // aten::__irshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\n", "Tensor & __irshift__(Tensor & self, const Tensor & other); // aten::__irshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\n", "Tensor & lgamma_(Tensor & self); // aten::lgamma_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & atan2_(Tensor & self, const Tensor & other); // aten::atan2_(Tensor(a!) self, Tensor other) -> Tensor(a!)\n", "Tensor & tril_(Tensor & self, int64_t diagonal); // aten::tril_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)\n", "Tensor & triu_(Tensor & self, int64_t diagonal); // aten::triu_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)\n", "Tensor & digamma_(Tensor & self); // aten::digamma_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & polygamma_(Tensor & self, int64_t n); // aten::polygamma_(Tensor(a!) self, int n) -> Tensor(a!)\n", "Tensor & renorm_(Tensor & self, Scalar p, int64_t dim, Scalar maxnorm); // aten::renorm_(Tensor(a!) self, Scalar p, int dim, Scalar maxnorm) -> Tensor(a!)\n", "Tensor & pow_(Tensor & self, Scalar exponent); // aten::pow_.Scalar(Tensor(a!) self, Scalar exponent) -> Tensor(a!)\n", "Tensor & pow_(Tensor & self, const Tensor & exponent); // aten::pow_.Tensor(Tensor(a!) self, Tensor exponent) -> Tensor(a!)\n", "Tensor & lerp_(Tensor & self, const Tensor & end, Scalar weight); // aten::lerp_.Scalar(Tensor(a!) self, Tensor end, Scalar weight) -> Tensor(a!)\n", "Tensor & lerp_(Tensor & self, const Tensor & end, const Tensor & weight); // aten::lerp_.Tensor(Tensor(a!) self, Tensor end, Tensor weight) -> Tensor(a!)\n", "Tensor & fmod_(Tensor & self, Scalar other); // aten::fmod_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\n", "Tensor & fmod_(Tensor & self, const Tensor & other); // aten::fmod_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\n", "Tensor & remainder_(Tensor & self, Scalar other); // aten::remainder_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)\n", "Tensor & remainder_(Tensor & self, const Tensor & other); // aten::remainder_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)\n", "Tensor & addbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha); // aten::addbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)\n", "Tensor & addbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha); // aten::addbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\n", "Tensor addbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha); // aten::addbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor\n", "Tensor & addcdiv_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value); // aten::addcdiv_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)\n", "Tensor & random_(Tensor & self, int64_t from, int64_t to, Generator * generator); // aten::random_.from(Tensor(a!) self, int from, int to, *, Generator? generator=None) -> Tensor(a!)\n", "Tensor & random_(Tensor & self, int64_t to, Generator * generator); // aten::random_.to(Tensor(a!) self, int to, *, Generator? generator=None) -> Tensor(a!)\n", "Tensor & random_(Tensor & self, Generator * generator); // aten::random_(Tensor(a!) self, *, Generator? generator=None) -> Tensor(a!)\n", "Tensor & uniform_(Tensor & self, double from, double to, Generator * generator); // aten::uniform_(Tensor(a!) self, float from=0, float to=1, *, Generator? generator=None) -> Tensor(a!)\n", "Tensor & normal_(Tensor & self, double mean, double std, Generator * generator); // aten::normal_(Tensor(a!) self, float mean=0, float std=1, *, Generator? generator=None) -> Tensor(a!)\n", "Tensor & cauchy_(Tensor & self, double median, double sigma, Generator * generator); // aten::cauchy_(Tensor(a!) self, float median=0, float sigma=1, *, Generator? generator=None) -> Tensor(a!)\n", "Tensor & log_normal_(Tensor & self, double mean, double std, Generator * generator); // aten::log_normal_(Tensor(a!) self, float mean=1, float std=2, *, Generator? generator=None) -> Tensor(a!)\n", "Tensor & exponential_(Tensor & self, double lambd, Generator * generator); // aten::exponential_(Tensor(a!) self, float lambd=1, *, Generator? generator=None) -> Tensor(a!)\n", "Tensor & geometric_(Tensor & self, double p, Generator * generator); // aten::geometric_(Tensor(a!) self, float p, *, Generator? generator=None) -> Tensor(a!)\n", "Tensor & diag_out(Tensor & out, const Tensor & self, int64_t diagonal); // aten::diag.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor diag(const Tensor & self, int64_t diagonal); // aten::diag(Tensor self, int diagonal=0) -> Tensor\n", "Tensor & cross_out(Tensor & out, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim); // aten::cross.out(Tensor self, Tensor other, int? dim=None, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim); // aten::cross(Tensor self, Tensor other, int? dim=None) -> Tensor\n", "Tensor & triu_out(Tensor & out, const Tensor & self, int64_t diagonal); // aten::triu.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor triu(const Tensor & self, int64_t diagonal); // aten::triu(Tensor self, int diagonal=0) -> Tensor\n", "Tensor & tril_out(Tensor & out, const Tensor & self, int64_t diagonal); // aten::tril.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor tril(const Tensor & self, int64_t diagonal); // aten::tril(Tensor self, int diagonal=0) -> Tensor\n", "Tensor tril_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options); // aten::tril_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor triu_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options); // aten::triu_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor trace(const Tensor & self); // aten::trace(Tensor self) -> Tensor\n", "Tensor & ne_out(Tensor & out, const Tensor & self, Scalar other); // aten::ne.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor ne(const Tensor & self, Scalar other); // aten::ne.Scalar(Tensor self, Scalar other) -> Tensor\n", "Tensor & ne_out(Tensor & out, const Tensor & self, const Tensor & other); // aten::ne.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor ne(const Tensor & self, const Tensor & other); // aten::ne.Tensor(Tensor self, Tensor other) -> Tensor\n", "Tensor & eq_out(Tensor & out, const Tensor & self, Scalar other); // aten::eq.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor eq(const Tensor & self, Scalar other); // aten::eq.Scalar(Tensor self, Scalar other) -> Tensor\n", "Tensor & eq_out(Tensor & out, const Tensor & self, const Tensor & other); // aten::eq.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor eq(const Tensor & self, const Tensor & other); // aten::eq.Tensor(Tensor self, Tensor other) -> Tensor\n", "Tensor & ge_out(Tensor & out, const Tensor & self, Scalar other); // aten::ge.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor ge(const Tensor & self, Scalar other); // aten::ge.Scalar(Tensor self, Scalar other) -> Tensor\n", "Tensor & ge_out(Tensor & out, const Tensor & self, const Tensor & other); // aten::ge.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor ge(const Tensor & self, const Tensor & other); // aten::ge.Tensor(Tensor self, Tensor other) -> Tensor\n", "Tensor & le_out(Tensor & out, const Tensor & self, Scalar other); // aten::le.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor le(const Tensor & self, Scalar other); // aten::le.Scalar(Tensor self, Scalar other) -> Tensor\n", "Tensor & le_out(Tensor & out, const Tensor & self, const Tensor & other); // aten::le.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor le(const Tensor & self, const Tensor & other); // aten::le.Tensor(Tensor self, Tensor other) -> Tensor\n", "Tensor & gt_out(Tensor & out, const Tensor & self, Scalar other); // aten::gt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor gt(const Tensor & self, Scalar other); // aten::gt.Scalar(Tensor self, Scalar other) -> Tensor\n", "Tensor & gt_out(Tensor & out, const Tensor & self, const Tensor & other); // aten::gt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor gt(const Tensor & self, const Tensor & other); // aten::gt.Tensor(Tensor self, Tensor other) -> Tensor\n", "Tensor & lt_out(Tensor & out, const Tensor & self, Scalar other); // aten::lt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor lt(const Tensor & self, Scalar other); // aten::lt.Scalar(Tensor self, Scalar other) -> Tensor\n", "Tensor & lt_out(Tensor & out, const Tensor & self, const Tensor & other); // aten::lt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor lt(const Tensor & self, const Tensor & other); // aten::lt.Tensor(Tensor self, Tensor other) -> Tensor\n", "Tensor & take_out(Tensor & out, const Tensor & self, const Tensor & index); // aten::take.out(Tensor self, Tensor index, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor take(const Tensor & self, const Tensor & index); // aten::take(Tensor self, Tensor index) -> Tensor\n", "Tensor & index_select_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index); // aten::index_select.out(Tensor self, int dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor index_select(const Tensor & self, int64_t dim, const Tensor & index); // aten::index_select(Tensor self, int dim, Tensor index) -> Tensor\n", "Tensor & masked_select_out(Tensor & out, const Tensor & self, const Tensor & mask); // aten::masked_select.out(Tensor self, Tensor mask, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor masked_select(const Tensor & self, const Tensor & mask); // aten::masked_select(Tensor self, Tensor mask) -> Tensor\n", "Tensor & nonzero_out(Tensor & out, const Tensor & self); // aten::nonzero.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor nonzero(const Tensor & self); // aten::nonzero(Tensor self) -> Tensor\n", "std::vector<Tensor> nonzero_numpy(const Tensor & self); // aten::nonzero_numpy(Tensor self) -> Tensor[]\n", "Tensor & gather_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad); // aten::gather.out(Tensor self, int dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)\n", "Tensor gather(const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad); // aten::gather(Tensor self, int dim, Tensor index, *, bool sparse_grad=False) -> Tensor\n", "Tensor _gather_sparse_backward(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & grad); // aten::_gather_sparse_backward(Tensor self, int dim, Tensor index, Tensor grad) -> Tensor\n", "Tensor & addcmul_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value); // aten::addcmul.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)\n", "Tensor addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value); // aten::addcmul(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor\n", "Tensor & addcmul_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value); // aten::addcmul_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)\n", "Tensor & addcdiv_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value); // aten::addcdiv.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)\n", "Tensor addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value); // aten::addcdiv(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor\n", "std::tuple<Tensor &,Tensor &> lstsq_out(Tensor & X, Tensor & qr, const Tensor & self, const Tensor & A); // aten::lstsq.X(Tensor self, Tensor A, *, Tensor(a!) X, Tensor(b!) qr) -> (Tensor(a!) solution, Tensor(b!) QR)\n", "std::tuple<Tensor,Tensor> lstsq(const Tensor & self, const Tensor & A); // aten::lstsq(Tensor self, Tensor A) -> (Tensor solution, Tensor QR)\n", "std::tuple<Tensor &,Tensor &> triangular_solve_out(Tensor & X, Tensor & M, const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular); // aten::triangular_solve.X(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False, *, Tensor(a!) X, Tensor(b!) M) -> (Tensor(a!) solution, Tensor(b!) cloned_coefficient)\n", "std::tuple<Tensor,Tensor> triangular_solve(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular); // aten::triangular_solve(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False) -> (Tensor solution, Tensor cloned_coefficient)\n", "std::tuple<Tensor,Tensor> _triangular_solve_helper(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular); // aten::_triangular_solve_helper(Tensor self, Tensor A, bool upper, bool transpose, bool unitriangular) -> (Tensor, Tensor)\n", "std::tuple<Tensor &,Tensor &> symeig_out(Tensor & e, Tensor & V, const Tensor & self, bool eigenvectors, bool upper); // aten::symeig.e(Tensor self, bool eigenvectors=False, bool upper=True, *, Tensor(a!) e, Tensor(b!) V) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)\n", "std::tuple<Tensor,Tensor> symeig(const Tensor & self, bool eigenvectors, bool upper); // aten::symeig(Tensor self, bool eigenvectors=False, bool upper=True) -> (Tensor eigenvalues, Tensor eigenvectors)\n", "std::tuple<Tensor,Tensor> _symeig_helper(const Tensor & self, bool eigenvectors, bool upper); // aten::_symeig_helper(Tensor self, bool eigenvectors, bool upper) -> (Tensor, Tensor)\n", "std::tuple<Tensor &,Tensor &> eig_out(Tensor & e, Tensor & v, const Tensor & self, bool eigenvectors); // aten::eig.e(Tensor self, bool eigenvectors=False, *, Tensor(a!) e, Tensor(b!) v) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)\n", "std::tuple<Tensor,Tensor> eig(const Tensor & self, bool eigenvectors); // aten::eig(Tensor self, bool eigenvectors=False) -> (Tensor eigenvalues, Tensor eigenvectors)\n", "std::tuple<Tensor &,Tensor &,Tensor &> svd_out(Tensor & U, Tensor & S, Tensor & V, const Tensor & self, bool some, bool compute_uv); // aten::svd.U(Tensor self, bool some=True, bool compute_uv=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) V) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) V)\n", "std::tuple<Tensor,Tensor,Tensor> svd(const Tensor & self, bool some, bool compute_uv); // aten::svd(Tensor self, bool some=True, bool compute_uv=True) -> (Tensor U, Tensor S, Tensor V)\n", "std::tuple<Tensor,Tensor,Tensor> _svd_helper(const Tensor & self, bool some, bool compute_uv); // aten::_svd_helper(Tensor self, bool some, bool compute_uv) -> (Tensor, Tensor, Tensor)\n", "Tensor & cholesky_out(Tensor & out, const Tensor & self, bool upper); // aten::cholesky.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor cholesky(const Tensor & self, bool upper); // aten::cholesky(Tensor self, bool upper=False) -> Tensor\n", "Tensor _cholesky_helper(const Tensor & self, bool upper); // aten::_cholesky_helper(Tensor self, bool upper) -> Tensor\n", "Tensor & cholesky_solve_out(Tensor & out, const Tensor & self, const Tensor & input2, bool upper); // aten::cholesky_solve.out(Tensor self, Tensor input2, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor cholesky_solve(const Tensor & self, const Tensor & input2, bool upper); // aten::cholesky_solve(Tensor self, Tensor input2, bool upper=False) -> Tensor\n", "Tensor _cholesky_solve_helper(const Tensor & self, const Tensor & A, bool upper); // aten::_cholesky_solve_helper(Tensor self, Tensor A, bool upper) -> Tensor\n", "std::tuple<Tensor,Tensor> solve(const Tensor & self, const Tensor & A); // aten::solve(Tensor self, Tensor A) -> (Tensor solution, Tensor LU)\n", "std::tuple<Tensor &,Tensor &> solve_out(Tensor & solution, Tensor & lu, const Tensor & self, const Tensor & A); // aten::solve.solution(Tensor self, Tensor A, *, Tensor(a!) solution, Tensor(b!) lu) -> (Tensor(a!) solution, Tensor(b!) LU)\n", "std::tuple<Tensor,Tensor> _solve_helper(const Tensor & self, const Tensor & A); // aten::_solve_helper(Tensor self, Tensor A) -> (Tensor, Tensor)\n", "Tensor & cholesky_inverse_out(Tensor & out, const Tensor & self, bool upper); // aten::cholesky_inverse.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor cholesky_inverse(const Tensor & self, bool upper); // aten::cholesky_inverse(Tensor self, bool upper=False) -> Tensor\n", "std::tuple<Tensor &,Tensor &> qr_out(Tensor & Q, Tensor & R, const Tensor & self, bool some); // aten::qr.Q(Tensor self, bool some=True, *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)\n", "std::tuple<Tensor,Tensor> qr(const Tensor & self, bool some); // aten::qr(Tensor self, bool some=True) -> (Tensor Q, Tensor R)\n", "std::tuple<Tensor,Tensor> _qr_helper(const Tensor & self, bool some); // aten::_qr_helper(Tensor self, bool some) -> (Tensor, Tensor)\n", "std::tuple<Tensor &,Tensor &> geqrf_out(Tensor & a, Tensor & tau, const Tensor & self); // aten::geqrf.a(Tensor self, *, Tensor(a!) a, Tensor(b!) tau) -> (Tensor(a!) a, Tensor(b!) tau)\n", "std::tuple<Tensor,Tensor> geqrf(const Tensor & self); // aten::geqrf(Tensor self) -> (Tensor a, Tensor tau)\n", "Tensor & orgqr_out(Tensor & out, const Tensor & self, const Tensor & input2); // aten::orgqr.out(Tensor self, Tensor input2, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor orgqr(const Tensor & self, const Tensor & input2); // aten::orgqr(Tensor self, Tensor input2) -> Tensor\n", "Tensor & ormqr_out(Tensor & out, const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose); // aten::ormqr.out(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor ormqr(const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose); // aten::ormqr(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False) -> Tensor\n", "std::tuple<Tensor,Tensor,Tensor> _lu_with_info(const Tensor & self, bool pivot, bool check_errors); // aten::_lu_with_info(Tensor self, bool pivot=True, bool check_errors=True) -> (Tensor, Tensor, Tensor)\n", "Tensor & lu_solve_out(Tensor & out, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots); // aten::lu_solve.out(Tensor self, Tensor LU_data, Tensor LU_pivots, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor lu_solve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots); // aten::lu_solve(Tensor self, Tensor LU_data, Tensor LU_pivots) -> Tensor\n", "Tensor _lu_solve_helper(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots); // aten::_lu_solve_helper(Tensor self, Tensor LU_data, Tensor LU_pivots) -> Tensor\n", "Tensor & multinomial_out(Tensor & out, const Tensor & self, int64_t num_samples, bool replacement, Generator * generator); // aten::multinomial.out(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)\n", "Tensor multinomial(const Tensor & self, int64_t num_samples, bool replacement, Generator * generator); // aten::multinomial(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None) -> Tensor\n", "std::tuple<Tensor,Tensor> _multinomial_alias_setup(const Tensor & probs); // aten::_multinomial_alias_setup(Tensor probs) -> (Tensor, Tensor)\n", "Tensor _multinomial_alias_draw(const Tensor & J, const Tensor & q, int64_t num_samples, Generator * generator); // aten::_multinomial_alias_draw(Tensor J, Tensor q, int num_samples, *, Generator? generator=None) -> Tensor\n", "Tensor & lgamma_out(Tensor & out, const Tensor & self); // aten::lgamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor lgamma(const Tensor & self); // aten::lgamma(Tensor self) -> Tensor\n", "Tensor & digamma_out(Tensor & out, const Tensor & self); // aten::digamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor digamma(const Tensor & self); // aten::digamma(Tensor self) -> Tensor\n", "Tensor & polygamma_out(Tensor & out, int64_t n, const Tensor & self); // aten::polygamma.out(int n, Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor polygamma(int64_t n, const Tensor & self); // aten::polygamma(int n, Tensor self) -> Tensor\n", "Tensor erfinv(const Tensor & self); // aten::erfinv(Tensor self) -> Tensor\n", "Tensor & erfinv_(Tensor & self); // aten::erfinv_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & erfinv_out(Tensor & out, const Tensor & self); // aten::erfinv.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor sign(const Tensor & self); // aten::sign(Tensor self) -> Tensor\n", "Tensor & sign_(Tensor & self); // aten::sign_(Tensor(a!) self) -> Tensor(a!)\n", "Tensor & sign_out(Tensor & out, const Tensor & self); // aten::sign.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor dist(const Tensor & self, const Tensor & other, Scalar p); // aten::dist(Tensor self, Tensor other, Scalar p=2) -> Tensor\n", "Tensor & atan2_out(Tensor & out, const Tensor & self, const Tensor & other); // aten::atan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor atan2(const Tensor & self, const Tensor & other); // aten::atan2(Tensor self, Tensor other) -> Tensor\n", "Tensor & lerp_out(Tensor & out, const Tensor & self, const Tensor & end, Scalar weight); // aten::lerp.Scalar_out(Tensor self, Tensor end, Scalar weight, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor & lerp_out(Tensor & out, const Tensor & self, const Tensor & end, const Tensor & weight); // aten::lerp.Tensor_out(Tensor self, Tensor end, Tensor weight, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor lerp(const Tensor & self, const Tensor & end, Scalar weight); // aten::lerp.Scalar(Tensor self, Tensor end, Scalar weight) -> Tensor\n", "Tensor lerp(const Tensor & self, const Tensor & end, const Tensor & weight); // aten::lerp.Tensor(Tensor self, Tensor end, Tensor weight) -> Tensor\n", "Tensor & histc_out(Tensor & out, const Tensor & self, int64_t bins, Scalar min, Scalar max); // aten::histc.out(Tensor self, int bins=100, Scalar min=0, Scalar max=0, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor histc(const Tensor & self, int64_t bins, Scalar min, Scalar max); // aten::histc(Tensor self, int bins=100, Scalar min=0, Scalar max=0) -> Tensor\n", "Tensor & fmod_out(Tensor & out, const Tensor & self, Scalar other); // aten::fmod.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor fmod(const Tensor & self, Scalar other); // aten::fmod.Scalar(Tensor self, Scalar other) -> Tensor\n", "Tensor & fmod_out(Tensor & out, const Tensor & self, const Tensor & other); // aten::fmod.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor fmod(const Tensor & self, const Tensor & other); // aten::fmod.Tensor(Tensor self, Tensor other) -> Tensor\n", "Tensor & remainder_out(Tensor & out, const Tensor & self, Scalar other); // aten::remainder.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor remainder(const Tensor & self, Scalar other); // aten::remainder.Scalar(Tensor self, Scalar other) -> Tensor\n", "Tensor & remainder_out(Tensor & out, const Tensor & self, const Tensor & other); // aten::remainder.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor remainder(const Tensor & self, const Tensor & other); // aten::remainder.Tensor(Tensor self, Tensor other) -> Tensor\n", "Tensor & min_out(Tensor & out, const Tensor & self, const Tensor & other); // aten::min.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor min(const Tensor & self, const Tensor & other); // aten::min.other(Tensor self, Tensor other) -> Tensor\n", "Tensor min(const Tensor & self); // aten::min(Tensor self) -> Tensor\n", "Tensor & max_out(Tensor & out, const Tensor & self, const Tensor & other); // aten::max.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor max(const Tensor & self, const Tensor & other); // aten::max.other(Tensor self, Tensor other) -> Tensor\n", "Tensor max(const Tensor & self); // aten::max(Tensor self) -> Tensor\n", "Tensor median(const Tensor & self); // aten::median(Tensor self) -> Tensor\n", "std::tuple<Tensor &,Tensor &> sort_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool descending); // aten::sort.values(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)\n", "std::tuple<Tensor,Tensor> sort(const Tensor & self, int64_t dim, bool descending); // aten::sort(Tensor self, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)\n", "Tensor argsort(const Tensor & self, int64_t dim, bool descending); // aten::argsort(Tensor self, int dim=-1, bool descending=False) -> Tensor\n", "std::tuple<Tensor &,Tensor &> topk_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted); // aten::topk.values(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True, *, Tensor(a!) values, Tensor(b!) indices) ->(Tensor(a!) values, Tensor(b!) indices)\n", "std::tuple<Tensor,Tensor> topk(const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted); // aten::topk(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True) -> (Tensor values, Tensor indices)\n", "Tensor all(const Tensor & self); // aten::all(Tensor self) -> Tensor\n", "Tensor any(const Tensor & self); // aten::any(Tensor self) -> Tensor\n", "Tensor & renorm_out(Tensor & out, const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm); // aten::renorm.out(Tensor self, Scalar p, int dim, Scalar maxnorm, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor renorm(const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm); // aten::renorm(Tensor self, Scalar p, int dim, Scalar maxnorm) -> Tensor\n", "Tensor unfold(const Tensor & self, int64_t dimension, int64_t size, int64_t step); // aten::unfold(Tensor(a) self, int dimension, int size, int step) -> Tensor(a)\n", "bool equal(const Tensor & self, const Tensor & other); // aten::equal(Tensor self, Tensor other) -> bool\n", "Tensor & pow_out(Tensor & out, const Tensor & self, const Tensor & exponent); // aten::pow.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor pow(const Tensor & self, const Tensor & exponent); // aten::pow.Tensor_Tensor(Tensor self, Tensor exponent) -> Tensor\n", "Tensor & pow_out(Tensor & out, Scalar self, const Tensor & exponent); // aten::pow.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor pow(Scalar self, const Tensor & exponent); // aten::pow.Scalar(Scalar self, Tensor exponent) -> Tensor\n", "Tensor & normal_out(Tensor & out, const Tensor & mean, double std, Generator * generator); // aten::normal.Tensor_float_out(Tensor mean, float std=1, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)\n", "Tensor normal(const Tensor & mean, double std, Generator * generator); // aten::normal.Tensor_float(Tensor mean, float std=1, *, Generator? generator=None) -> Tensor\n", "Tensor & normal_out(Tensor & out, double mean, const Tensor & std, Generator * generator); // aten::normal.float_Tensor_out(float mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)\n", "Tensor normal(double mean, const Tensor & std, Generator * generator); // aten::normal.float_Tensor(float mean, Tensor std, *, Generator? generator=None) -> Tensor\n", "Tensor & normal_out(Tensor & out, const Tensor & mean, const Tensor & std, Generator * generator); // aten::normal.Tensor_Tensor_out(Tensor mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)\n", "Tensor normal(const Tensor & mean, const Tensor & std, Generator * generator); // aten::normal.Tensor_Tensor(Tensor mean, Tensor std, *, Generator? generator=None) -> Tensor\n", "Tensor normal(double mean, double std, IntArrayRef size, Generator * generator, const TensorOptions & options); // aten::normal.float_float(float mean, float std, int[] size, *, Generator? generator=None, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor\n", "Tensor & normal_out(Tensor & out, double mean, double std, IntArrayRef size, Generator * generator); // aten::normal.float_float_out(float mean, float std, int[] size, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)\n", "Tensor alias(const Tensor & self); // aten::alias(Tensor(a) self) -> Tensor(a)\n", "Tensor _addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha); // aten::_addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor\n", "Tensor & _addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha); // aten::_addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)\n", "Tensor & _addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha); // aten::_addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)\n", "Tensor & _index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source); // aten::_index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)\n", "Tensor _cumsum(const Tensor & self, int64_t dim); // aten::_cumsum(Tensor self, int dim) -> Tensor\n", "Tensor & _cumsum_out(Tensor & out, const Tensor & self, int64_t dim); // aten::_cumsum.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor _cumprod(const Tensor & self, int64_t dim); // aten::_cumprod(Tensor self, int dim) -> Tensor\n", "Tensor & _cumprod_out(Tensor & out, const Tensor & self, int64_t dim); // aten::_cumprod.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor _var(const Tensor & self, bool unbiased); // aten::_var(Tensor self, bool unbiased=True) -> Tensor\n", "Tensor _std(const Tensor & self, bool unbiased); // aten::_std(Tensor self, bool unbiased=True) -> Tensor\n", "Tensor _cat(TensorList tensors, int64_t dim); // aten::_cat(Tensor[] tensors, int dim=0) -> Tensor\n", "Tensor & _cat_out(Tensor & out, TensorList tensors, int64_t dim); // aten::_cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)\n", "std::tuple<Tensor,Tensor> _mode(const Tensor & self, int64_t dim, bool keepdim); // aten::_mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor, Tensor)\n", "std::tuple<Tensor &,Tensor &> _mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim); // aten::_mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))\n", "std::tuple<Tensor,Tensor> _max(const Tensor & self, int64_t dim, bool keepdim); // aten::_max(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor)\n", "std::tuple<Tensor &,Tensor &> _max_out(Tensor & max, Tensor & max_indices, const Tensor & self, int64_t dim, bool keepdim); // aten::_max.max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_indices) -> (Tensor(a!), Tensor(b!))\n", "std::tuple<Tensor,Tensor> _min(const Tensor & self, int64_t dim, bool keepdim); // aten::_min(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor)\n", "std::tuple<Tensor &,Tensor &> _min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim); // aten::_min.min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!), Tensor(b!))\n", "Tensor & binary_cross_entropy_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction); // aten::binary_cross_entropy.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor binary_cross_entropy(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction); // aten::binary_cross_entropy(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor\n", "Tensor & binary_cross_entropy_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction); // aten::binary_cross_entropy_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction); // aten::binary_cross_entropy_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor\n", "Tensor & mse_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction); // aten::mse_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor mse_loss(const Tensor & self, const Tensor & target, int64_t reduction); // aten::mse_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor\n", "Tensor & mse_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction); // aten::mse_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor mse_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction); // aten::mse_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor\n", "Tensor & l1_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction); // aten::l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor l1_loss(const Tensor & self, const Tensor & target, int64_t reduction); // aten::l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor\n", "Tensor & l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction); // aten::l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction); // aten::l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor\n", "Tensor & multi_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction); // aten::multi_margin_loss.out(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor multi_margin_loss(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction); // aten::multi_margin_loss(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean) -> Tensor\n", "Tensor & multi_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction); // aten::multi_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction); // aten::multi_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean) -> Tensor\n", "Tensor & multilabel_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction); // aten::multilabel_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor multilabel_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction); // aten::multilabel_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor\n", "std::tuple<Tensor &,Tensor &> multilabel_margin_loss_forward_out(Tensor & output, Tensor & is_target, const Tensor & self, const Tensor & target, int64_t reduction); // aten::multilabel_margin_loss_forward.output(Tensor self, Tensor target, int reduction, *, Tensor(a!) output, Tensor(b!) is_target) -> (Tensor(a!), Tensor(b!))\n", "std::tuple<Tensor,Tensor> multilabel_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction); // aten::multilabel_margin_loss_forward(Tensor self, Tensor target, int reduction) -> (Tensor output, Tensor is_target)\n", "Tensor & multilabel_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target); // aten::multilabel_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor multilabel_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target); // aten::multilabel_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target) -> Tensor\n", "Tensor & nll_loss_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index); // aten::nll_loss.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor nll_loss(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index); // aten::nll_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor\n", "std::tuple<Tensor &,Tensor &> nll_loss_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index); // aten::nll_loss_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))\n", "std::tuple<Tensor,Tensor> nll_loss_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index); // aten::nll_loss_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)\n", "Tensor & nll_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight); // aten::nll_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight); // aten::nll_loss_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor\n", "Tensor & nll_loss2d_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index); // aten::nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor nll_loss2d(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index); // aten::nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor\n", "std::tuple<Tensor &,Tensor &> nll_loss2d_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index); // aten::nll_loss2d_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))\n", "std::tuple<Tensor,Tensor> nll_loss2d_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index); // aten::nll_loss2d_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)\n", "Tensor & nll_loss2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight); // aten::nll_loss2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight); // aten::nll_loss2d_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor\n", "Tensor & smooth_l1_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction); // aten::smooth_l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor smooth_l1_loss(const Tensor & self, const Tensor & target, int64_t reduction); // aten::smooth_l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor\n", "Tensor & smooth_l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction); // aten::smooth_l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor smooth_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction); // aten::smooth_l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor\n", "Tensor & soft_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction); // aten::soft_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor soft_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction); // aten::soft_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor\n", "Tensor & soft_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction); // aten::soft_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor soft_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction); // aten::soft_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor\n", "Tensor & elu_out(Tensor & out, const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale); // aten::elu.out(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor elu(const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale); // aten::elu(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor\n", "Tensor & elu_backward_out(Tensor & grad_input, const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output); // aten::elu_backward.grad_input(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor elu_backward(const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output); // aten::elu_backward(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output) -> Tensor\n", "Tensor & elu_(Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale); // aten::elu_(Tensor(a!) self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor(a!)\n", "Tensor & glu_out(Tensor & out, const Tensor & self, int64_t dim); // aten::glu.out(Tensor self, int dim=-1, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor glu(const Tensor & self, int64_t dim); // aten::glu(Tensor self, int dim=-1) -> Tensor\n", "Tensor & glu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, int64_t dim); // aten::glu_backward.grad_input(Tensor grad_output, Tensor self, int dim, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor glu_backward(const Tensor & grad_output, const Tensor & self, int64_t dim); // aten::glu_backward(Tensor grad_output, Tensor self, int dim) -> Tensor\n", "Tensor & hardtanh_out(Tensor & out, const Tensor & self, Scalar min_val, Scalar max_val); // aten::hardtanh.out(Tensor self, Scalar min_val=-1, Scalar max_val=1, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor hardtanh(const Tensor & self, Scalar min_val, Scalar max_val); // aten::hardtanh(Tensor self, Scalar min_val=-1, Scalar max_val=1) -> Tensor\n", "Tensor & hardtanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val); // aten::hardtanh_backward.grad_input(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor hardtanh_backward(const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val); // aten::hardtanh_backward(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val) -> Tensor\n", "Tensor & hardtanh_(Tensor & self, Scalar min_val, Scalar max_val); // aten::hardtanh_(Tensor(a!) self, Scalar min_val=-1, Scalar max_val=1) -> Tensor(a!)\n", "Tensor & leaky_relu_out(Tensor & out, const Tensor & self, Scalar negative_slope); // aten::leaky_relu.out(Tensor self, Scalar negative_slope=0.01, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor leaky_relu(const Tensor & self, Scalar negative_slope); // aten::leaky_relu(Tensor self, Scalar negative_slope=0.01) -> Tensor\n", "Tensor & leaky_relu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar negative_slope); // aten::leaky_relu_backward.grad_input(Tensor grad_output, Tensor self, Scalar negative_slope, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor leaky_relu_backward(const Tensor & grad_output, const Tensor & self, Scalar negative_slope); // aten::leaky_relu_backward(Tensor grad_output, Tensor self, Scalar negative_slope) -> Tensor\n", "Tensor & leaky_relu_(Tensor & self, Scalar negative_slope); // aten::leaky_relu_(Tensor(a!) self, Scalar negative_slope=0.01) -> Tensor(a!)\n", "Tensor & log_sigmoid_out(Tensor & out, const Tensor & self); // aten::log_sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor log_sigmoid(const Tensor & self); // aten::log_sigmoid(Tensor self) -> Tensor\n", "std::tuple<Tensor &,Tensor &> log_sigmoid_forward_out(Tensor & output, Tensor & buffer, const Tensor & self); // aten::log_sigmoid_forward.output(Tensor self, *, Tensor(a!) output, Tensor(b!) buffer) -> (Tensor(a!), Tensor(b!))\n", "std::tuple<Tensor,Tensor> log_sigmoid_forward(const Tensor & self); // aten::log_sigmoid_forward(Tensor self) -> (Tensor output, Tensor buffer)\n", "Tensor & log_sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & buffer); // aten::log_sigmoid_backward.grad_input(Tensor grad_output, Tensor self, Tensor buffer, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor log_sigmoid_backward(const Tensor & grad_output, const Tensor & self, const Tensor & buffer); // aten::log_sigmoid_backward(Tensor grad_output, Tensor self, Tensor buffer) -> Tensor\n", "Tensor & rrelu_with_noise_out(Tensor & out, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator); // aten::rrelu_with_noise.out(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor rrelu_with_noise(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator); // aten::rrelu_with_noise(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor\n", "Tensor & rrelu_with_noise_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training); // aten::rrelu_with_noise_backward.grad_input(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor rrelu_with_noise_backward(const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training); // aten::rrelu_with_noise_backward(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training) -> Tensor\n", "Tensor & rrelu_with_noise_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator); // aten::rrelu_with_noise_(Tensor(a!) self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)\n", "Tensor & softplus_out(Tensor & out, const Tensor & self, Scalar beta, Scalar threshold); // aten::softplus.out(Tensor self, Scalar beta=1, Scalar threshold=20, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor softplus(const Tensor & self, Scalar beta, Scalar threshold); // aten::softplus(Tensor self, Scalar beta=1, Scalar threshold=20) -> Tensor\n", "Tensor & softplus_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output); // aten::softplus_backward.grad_input(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor softplus_backward(const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output); // aten::softplus_backward(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output) -> Tensor\n", "Tensor & softshrink_out(Tensor & out, const Tensor & self, Scalar lambd); // aten::softshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor softshrink(const Tensor & self, Scalar lambd); // aten::softshrink(Tensor self, Scalar lambd=0.5) -> Tensor\n", "Tensor & softshrink_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar lambd); // aten::softshrink_backward.grad_input(Tensor grad_output, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor softshrink_backward(const Tensor & grad_output, const Tensor & self, Scalar lambd); // aten::softshrink_backward(Tensor grad_output, Tensor self, Scalar lambd) -> Tensor\n", "Tensor & adaptive_avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size); // aten::adaptive_avg_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size); // aten::adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor\n", "Tensor mkldnn_adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size); // aten::mkldnn_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor\n", "Tensor _adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size); // aten::_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor\n", "Tensor _adaptive_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self); // aten::_adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> Tensor\n", "Tensor & adaptive_avg_pool3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size); // aten::adaptive_avg_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor adaptive_avg_pool3d(const Tensor & self, IntArrayRef output_size); // aten::adaptive_avg_pool3d(Tensor self, int[3] output_size) -> Tensor\n", "Tensor & adaptive_avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self); // aten::adaptive_avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor adaptive_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self); // aten::adaptive_avg_pool3d_backward(Tensor grad_output, Tensor self) -> Tensor\n", "std::tuple<Tensor &,Tensor &> adaptive_max_pool2d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size); // aten::adaptive_max_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))\n", "std::tuple<Tensor,Tensor> adaptive_max_pool2d(const Tensor & self, IntArrayRef output_size); // aten::adaptive_max_pool2d(Tensor self, int[2] output_size) -> (Tensor, Tensor)\n", "Tensor & adaptive_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices); // aten::adaptive_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor adaptive_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices); // aten::adaptive_max_pool2d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor\n", "std::tuple<Tensor &,Tensor &> adaptive_max_pool3d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size); // aten::adaptive_max_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))\n", "std::tuple<Tensor,Tensor> adaptive_max_pool3d(const Tensor & self, IntArrayRef output_size); // aten::adaptive_max_pool3d(Tensor self, int[3] output_size) -> (Tensor, Tensor)\n", "Tensor & adaptive_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices); // aten::adaptive_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor adaptive_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices); // aten::adaptive_max_pool3d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor\n", "Tensor & avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override); // aten::avg_pool2d.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override); // aten::avg_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor\n", "Tensor & avg_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override); // aten::avg_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override); // aten::avg_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor\n", "Tensor & avg_pool3d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override); // aten::avg_pool3d.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor avg_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override); // aten::avg_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor\n", "Tensor & avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override); // aten::avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override); // aten::avg_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor\n", "std::tuple<Tensor &,Tensor &> fractional_max_pool2d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples); // aten::fractional_max_pool2d.output(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))\n", "std::tuple<Tensor,Tensor> fractional_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples); // aten::fractional_max_pool2d(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples) -> (Tensor, Tensor)\n", "Tensor & fractional_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices); // aten::fractional_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor fractional_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices); // aten::fractional_max_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices) -> Tensor\n", "std::tuple<Tensor &,Tensor &> fractional_max_pool3d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples); // aten::fractional_max_pool3d.output(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))\n", "std::tuple<Tensor,Tensor> fractional_max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples); // aten::fractional_max_pool3d(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples) -> (Tensor, Tensor)\n", "Tensor & fractional_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices); // aten::fractional_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor fractional_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices); // aten::fractional_max_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices) -> Tensor\n", "std::tuple<Tensor &,Tensor &> max_pool2d_with_indices_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode); // aten::max_pool2d_with_indices.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))\n", "std::tuple<Tensor,Tensor> max_pool2d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode); // aten::max_pool2d_with_indices(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)\n", "Tensor & max_pool2d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices); // aten::max_pool2d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor max_pool2d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices); // aten::max_pool2d_with_indices_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices) -> Tensor\n", "std::tuple<Tensor &,Tensor &> max_pool3d_with_indices_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode); // aten::max_pool3d_with_indices.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))\n", "std::tuple<Tensor,Tensor> max_pool3d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode); // aten::max_pool3d_with_indices(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)\n", "Tensor & max_pool3d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices); // aten::max_pool3d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor max_pool3d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices); // aten::max_pool3d_with_indices_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices) -> Tensor\n", "Tensor & max_unpool2d_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size); // aten::max_unpool2d.out(Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor max_unpool2d(const Tensor & self, const Tensor & indices, IntArrayRef output_size); // aten::max_unpool2d(Tensor self, Tensor indices, int[2] output_size) -> Tensor\n", "Tensor & max_unpool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size); // aten::max_unpool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor max_unpool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size); // aten::max_unpool2d_backward(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size) -> Tensor\n", "Tensor & max_unpool3d_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding); // aten::max_unpool3d.out(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor max_unpool3d(const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding); // aten::max_unpool3d(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor\n", "Tensor & max_unpool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding); // aten::max_unpool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor max_unpool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding); // aten::max_unpool3d_backward(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor\n", "Tensor & reflection_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding); // aten::reflection_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor reflection_pad1d(const Tensor & self, IntArrayRef padding); // aten::reflection_pad1d(Tensor self, int[2] padding) -> Tensor\n", "Tensor & reflection_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding); // aten::reflection_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor reflection_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding); // aten::reflection_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor\n", "Tensor & reflection_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding); // aten::reflection_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor reflection_pad2d(const Tensor & self, IntArrayRef padding); // aten::reflection_pad2d(Tensor self, int[4] padding) -> Tensor\n", "Tensor & reflection_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding); // aten::reflection_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor reflection_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding); // aten::reflection_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor\n", "Tensor & replication_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding); // aten::replication_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor replication_pad1d(const Tensor & self, IntArrayRef padding); // aten::replication_pad1d(Tensor self, int[2] padding) -> Tensor\n", "Tensor & replication_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding); // aten::replication_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor replication_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding); // aten::replication_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor\n", "Tensor & replication_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding); // aten::replication_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor replication_pad2d(const Tensor & self, IntArrayRef padding); // aten::replication_pad2d(Tensor self, int[4] padding) -> Tensor\n", "Tensor & replication_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding); // aten::replication_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor replication_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding); // aten::replication_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor\n", "Tensor & replication_pad3d_out(Tensor & out, const Tensor & self, IntArrayRef padding); // aten::replication_pad3d.out(Tensor self, int[6] padding, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor replication_pad3d(const Tensor & self, IntArrayRef padding); // aten::replication_pad3d(Tensor self, int[6] padding) -> Tensor\n", "Tensor & replication_pad3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding); // aten::replication_pad3d_backward.grad_input(Tensor grad_output, Tensor self, int[6] padding, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor replication_pad3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding); // aten::replication_pad3d_backward(Tensor grad_output, Tensor self, int[6] padding) -> Tensor\n", "Tensor & upsample_linear1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners); // aten::upsample_linear1d.out(Tensor self, int[1] output_size, bool align_corners, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor upsample_linear1d(const Tensor & self, IntArrayRef output_size, bool align_corners); // aten::upsample_linear1d(Tensor self, int[1] output_size, bool align_corners) -> Tensor\n", "Tensor & upsample_linear1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners); // aten::upsample_linear1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners); // aten::upsample_linear1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners) -> Tensor\n", "Tensor & upsample_bilinear2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners); // aten::upsample_bilinear2d.out(Tensor self, int[2] output_size, bool align_corners, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor upsample_bilinear2d(const Tensor & self, IntArrayRef output_size, bool align_corners); // aten::upsample_bilinear2d(Tensor self, int[2] output_size, bool align_corners) -> Tensor\n", "Tensor & upsample_bilinear2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners); // aten::upsample_bilinear2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners); // aten::upsample_bilinear2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners) -> Tensor\n", "Tensor & upsample_bicubic2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners); // aten::upsample_bicubic2d.out(Tensor self, int[2] output_size, bool align_corners, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor upsample_bicubic2d(const Tensor & self, IntArrayRef output_size, bool align_corners); // aten::upsample_bicubic2d(Tensor self, int[2] output_size, bool align_corners) -> Tensor\n", "Tensor & upsample_bicubic2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners); // aten::upsample_bicubic2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners); // aten::upsample_bicubic2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners) -> Tensor\n", "Tensor & upsample_trilinear3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners); // aten::upsample_trilinear3d.out(Tensor self, int[3] output_size, bool align_corners, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor upsample_trilinear3d(const Tensor & self, IntArrayRef output_size, bool align_corners); // aten::upsample_trilinear3d(Tensor self, int[3] output_size, bool align_corners) -> Tensor\n", "Tensor & upsample_trilinear3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners); // aten::upsample_trilinear3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners); // aten::upsample_trilinear3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners) -> Tensor\n", "Tensor & upsample_nearest1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size); // aten::upsample_nearest1d.out(Tensor self, int[1] output_size, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor upsample_nearest1d(const Tensor & self, IntArrayRef output_size); // aten::upsample_nearest1d(Tensor self, int[1] output_size) -> Tensor\n", "Tensor & upsample_nearest1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size); // aten::upsample_nearest1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size); // aten::upsample_nearest1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size) -> Tensor\n", "Tensor & upsample_nearest2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size); // aten::upsample_nearest2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor upsample_nearest2d(const Tensor & self, IntArrayRef output_size); // aten::upsample_nearest2d(Tensor self, int[2] output_size) -> Tensor\n", "Tensor & upsample_nearest2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size); // aten::upsample_nearest2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size); // aten::upsample_nearest2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size) -> Tensor\n", "Tensor & upsample_nearest3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size); // aten::upsample_nearest3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor upsample_nearest3d(const Tensor & self, IntArrayRef output_size); // aten::upsample_nearest3d(Tensor self, int[3] output_size) -> Tensor\n", "Tensor & upsample_nearest3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size); // aten::upsample_nearest3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size); // aten::upsample_nearest3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size) -> Tensor\n", "Tensor & sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output); // aten::sigmoid_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor sigmoid_backward(const Tensor & grad_output, const Tensor & output); // aten::sigmoid_backward(Tensor grad_output, Tensor output) -> Tensor\n", "Tensor & tanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output); // aten::tanh_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor tanh_backward(const Tensor & grad_output, const Tensor & output); // aten::tanh_backward(Tensor grad_output, Tensor output) -> Tensor\n", "Tensor & slow_conv_transpose2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation); // aten::slow_conv_transpose2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor slow_conv_transpose2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation); // aten::slow_conv_transpose2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1) -> Tensor\n", "std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones); // aten::slow_conv_transpose2d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight, Tensor?(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))\n", "std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask); // aten::slow_conv_transpose2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)\n", "Tensor & slow_conv_transpose3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation); // aten::slow_conv_transpose3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor slow_conv_transpose3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation); // aten::slow_conv_transpose3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1) -> Tensor\n", "std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input); // aten::slow_conv_transpose3d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight, Tensor?(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))\n", "std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask); // aten::slow_conv_transpose3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)\n", "Tensor & thnn_conv2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding); // aten::thnn_conv2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor thnn_conv2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding); // aten::thnn_conv2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0) -> Tensor\n", "std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding); // aten::thnn_conv2d_forward.output(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))\n", "std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding); // aten::thnn_conv2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)\n", "std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input); // aten::thnn_conv2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight, Tensor?(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))\n", "std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask); // aten::thnn_conv2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)\n", "Tensor & thnn_conv_depthwise2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation); // aten::thnn_conv_depthwise2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor thnn_conv_depthwise2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation); // aten::thnn_conv_depthwise2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor\n", "Tensor & thnn_conv_depthwise2d_forward_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation); // aten::thnn_conv_depthwise2d_forward.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor thnn_conv_depthwise2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation); // aten::thnn_conv_depthwise2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation) -> Tensor\n", "std::tuple<Tensor &,Tensor &> thnn_conv_depthwise2d_backward_out(Tensor & grad_input, Tensor & grad_weight, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation); // aten::thnn_conv_depthwise2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight) -> (Tensor(a!), Tensor(b!))\n", "std::tuple<Tensor,Tensor> thnn_conv_depthwise2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,2> output_mask); // aten::thnn_conv_depthwise2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[2] output_mask) -> (Tensor grad_input, Tensor grad_weight)\n", "Tensor & thnn_conv3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding); // aten::thnn_conv3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor thnn_conv3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding); // aten::thnn_conv3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0) -> Tensor\n", "std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv3d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding); // aten::thnn_conv3d_forward.output(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))\n", "std::tuple<Tensor,Tensor,Tensor> thnn_conv3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding); // aten::thnn_conv3d_forward(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)\n", "std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input); // aten::thnn_conv3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight, Tensor?(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))\n", "std::tuple<Tensor,Tensor,Tensor> thnn_conv3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask); // aten::thnn_conv3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)\n", "Tensor slow_conv_dilated2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation); // aten::slow_conv_dilated2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor\n", "std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask); // aten::slow_conv_dilated2d_backward(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)\n", "Tensor slow_conv_dilated3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation); // aten::slow_conv_dilated3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1) -> Tensor\n", "std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask); // aten::slow_conv_dilated3d_backward(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)\n", "Tensor & col2im_out(Tensor & out, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride); // aten::col2im.out(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor col2im(const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride); // aten::col2im(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor\n", "Tensor & col2im_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride); // aten::col2im_backward.grad_input(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor col2im_backward(const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride); // aten::col2im_backward(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor\n", "Tensor & im2col_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride); // aten::im2col.out(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor im2col(const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride); // aten::im2col(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor\n", "Tensor & im2col_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride); // aten::im2col_backward.grad_input(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)\n", "Tensor im2col_backward(const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride); // aten::im2col_backward(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor\n", "Tensor & rivergold_test_out(Tensor & out, const Tensor & self); // aten::rivergold_test(Tensor self, *, Tensor(a!) out) -> Tensor(a!)\n", "Tensor rivergold_test(const Tensor & self); // aten::rivergold_test.raw(Tensor self) -> Tensor\n"]}